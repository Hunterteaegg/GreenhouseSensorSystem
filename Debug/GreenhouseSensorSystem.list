
GreenhouseSensorSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004374  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800451c  0800451c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800451c  0800451c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800451c  0800451c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000078  08004598  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004598  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2b3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021e3  00000000  00000000  0002f350  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  00031538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  00032420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018b79  00000000  00000000  00033208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c94c  00000000  00000000  0004bd81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d14d  00000000  00000000  000586cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e581a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b8  00000000  00000000  000e5898  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800446c 	.word	0x0800446c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800446c 	.word	0x0800446c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_d2uiz>:
 800094c:	004a      	lsls	r2, r1, #1
 800094e:	d211      	bcs.n	8000974 <__aeabi_d2uiz+0x28>
 8000950:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000954:	d211      	bcs.n	800097a <__aeabi_d2uiz+0x2e>
 8000956:	d50d      	bpl.n	8000974 <__aeabi_d2uiz+0x28>
 8000958:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800095c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000960:	d40e      	bmi.n	8000980 <__aeabi_d2uiz+0x34>
 8000962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800096a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800096e:	fa23 f002 	lsr.w	r0, r3, r2
 8000972:	4770      	bx	lr
 8000974:	f04f 0000 	mov.w	r0, #0
 8000978:	4770      	bx	lr
 800097a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800097e:	d102      	bne.n	8000986 <__aeabi_d2uiz+0x3a>
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	4770      	bx	lr
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	4770      	bx	lr

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 fe63 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f883 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 f915 	bl	8000bc8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800099e:	f000 f8bb 	bl	8000b18 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80009a2:	f000 f8e7 	bl	8000b74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();	//initialize LCD1602
 80009a6:	f000 fc51 	bl	800124c <LCD_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  LCD_writeCom(0x80|0x40);	//move cursor to position 0x40(the beginning of the second line)
 80009aa:	20c0      	movs	r0, #192	; 0xc0
 80009ac:	f000 fbf2 	bl	8001194 <LCD_writeCom>
	  GY30_init(GY30_ADDR_L);	//initialize GY30 sensor
 80009b0:	2046      	movs	r0, #70	; 0x46
 80009b2:	f000 fb1f 	bl	8000ff4 <GY30_init>
	  uint16_t luminance = GY30_getData(GY30_ADDR_L);	//get GY30 data
 80009b6:	2046      	movs	r0, #70	; 0x46
 80009b8:	f000 fb38 	bl	800102c <GY30_getData>
 80009bc:	4603      	mov	r3, r0
 80009be:	460c      	mov	r4, r1
 80009c0:	4618      	mov	r0, r3
 80009c2:	4621      	mov	r1, r4
 80009c4:	f7ff ffc2 	bl	800094c <__aeabi_d2uiz>
 80009c8:	4603      	mov	r3, r0
 80009ca:	82fb      	strh	r3, [r7, #22]
	  LCD_show_GY30(luminance);	//show GY30 data to LCD1602
 80009cc:	8afb      	ldrh	r3, [r7, #22]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fc50 	bl	8001274 <LCD_show_GY30>

	  LCD_writeCom(0x80|0x00);	//move cursor to position 0x00(the beginning of the first line)
 80009d4:	2080      	movs	r0, #128	; 0x80
 80009d6:	f000 fbdd 	bl	8001194 <LCD_writeCom>
	  SHT31_init(SHT31_COM_N_CS, SHT31_COM_N_CS_H);	//initialize SHT31 sensor with setting consist of no-clock-stretch and high repeatibility
 80009da:	2100      	movs	r1, #0
 80009dc:	2024      	movs	r0, #36	; 0x24
 80009de:	f000 fda9 	bl	8001534 <SHT31_init>
	  sht31Data = SHT31_readData();	//get SHT31 data
 80009e2:	4c2b      	ldr	r4, [pc, #172]	; (8000a90 <main+0x104>)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fdc6 	bl	8001578 <SHT31_readData>
 80009ec:	463b      	mov	r3, r7
 80009ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  LCD_show_SHT31(sht31Data.temp * 1000, sht31Data.humi * 1000);	//show SHT31 data to LCD1602
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <main+0x104>)
 80009f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009fa:	f04f 0200 	mov.w	r2, #0
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <main+0x108>)
 8000a00:	f7ff fd6a 	bl	80004d8 <__aeabi_dmul>
 8000a04:	4603      	mov	r3, r0
 8000a06:	460c      	mov	r4, r1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	4621      	mov	r1, r4
 8000a0c:	f7ff ff9e 	bl	800094c <__aeabi_d2uiz>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29c      	uxth	r4, r3
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <main+0x104>)
 8000a16:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000a1a:	f04f 0200 	mov.w	r2, #0
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <main+0x108>)
 8000a20:	f7ff fd5a 	bl	80004d8 <__aeabi_dmul>
 8000a24:	4602      	mov	r2, r0
 8000a26:	460b      	mov	r3, r1
 8000a28:	4610      	mov	r0, r2
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f7ff ff8e 	bl	800094c <__aeabi_d2uiz>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	4619      	mov	r1, r3
 8000a36:	4620      	mov	r0, r4
 8000a38:	f000 fc96 	bl	8001368 <LCD_show_SHT31>
	  LCD_writeCom(0x02);	//reset cursor
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f000 fba9 	bl	8001194 <LCD_writeCom>

	  //formatted-print string
	  snprintf(stringSend, sizeof(stringSend)-1, "Temperature: %d, Humidity: %d%%, Luminance: %dlx." ,(int)sht31Data.temp, (int)sht31Data.humi, (int)luminance);
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <main+0x104>)
 8000a44:	cb18      	ldmia	r3, {r3, r4}
 8000a46:	4618      	mov	r0, r3
 8000a48:	4621      	mov	r1, r4
 8000a4a:	f7ff ff57 	bl	80008fc <__aeabi_d2iz>
 8000a4e:	4605      	mov	r5, r0
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <main+0x104>)
 8000a52:	f103 0408 	add.w	r4, r3, #8
 8000a56:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	4621      	mov	r1, r4
 8000a5e:	f7ff ff4d 	bl	80008fc <__aeabi_d2iz>
 8000a62:	4602      	mov	r2, r0
 8000a64:	8afb      	ldrh	r3, [r7, #22]
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	9200      	str	r2, [sp, #0]
 8000a6a:	462b      	mov	r3, r5
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <main+0x10c>)
 8000a6e:	217f      	movs	r1, #127	; 0x7f
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <main+0x110>)
 8000a72:	f003 f8d5 	bl	8003c20 <sniprintf>

	  HC05_transmit(stringSend, strlen(stringSend));	//send text to HC05
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <main+0x110>)
 8000a78:	f7ff fb6a 	bl	8000150 <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <main+0x110>)
 8000a82:	f000 fb01 	bl	8001088 <HC05_transmit>

	  HAL_Delay(500);	//delay 500 miliseconds
 8000a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a8a:	f000 fe19 	bl	80016c0 <HAL_Delay>
  {
 8000a8e:	e78c      	b.n	80009aa <main+0x1e>
 8000a90:	20000118 	.word	0x20000118
 8000a94:	408f4000 	.word	0x408f4000
 8000a98:	08004484 	.word	0x08004484
 8000a9c:	20000094 	.word	0x20000094

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b090      	sub	sp, #64	; 0x40
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0318 	add.w	r3, r7, #24
 8000aaa:	2228      	movs	r2, #40	; 0x28
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 f8ae 	bl	8003c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aca:	2310      	movs	r3, #16
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 f822 	bl	8002b20 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f8d9 	bl	8000c98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 fa8e 	bl	8003020 <HAL_RCC_ClockConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 f8c5 	bl	8000c98 <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3740      	adds	r7, #64	; 0x40
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b1e:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <MX_I2C2_Init+0x54>)
 8000b20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_I2C2_Init+0x58>)
 8000b26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b56:	f001 f827 	bl	8001ba8 <HAL_I2C_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b60:	f000 f89a 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000138 	.word	0x20000138
 8000b6c:	40005800 	.word	0x40005800
 8000b70:	000186a0 	.word	0x000186a0

08000b74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <MX_USART2_UART_Init+0x50>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000bac:	f002 fe4e 	bl	800384c <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bb6:	f000 f86f 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000018c 	.word	0x2000018c
 8000bc4:	40004400 	.word	0x40004400

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_GPIO_Init+0xa0>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <MX_GPIO_Init+0xa0>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_GPIO_Init+0xa0>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_GPIO_Init+0xa0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <MX_GPIO_Init+0xa0>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_GPIO_Init+0xa0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin|LCD_D0_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f248 01e0 	movw	r1, #32992	; 0x80e0
 8000c12:	4816      	ldr	r0, [pc, #88]	; (8000c6c <MX_GPIO_Init+0xa4>)
 8000c14:	f000 ffb0 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000c1e:	4814      	ldr	r0, [pc, #80]	; (8000c70 <MX_GPIO_Init+0xa8>)
 8000c20:	f000 ffaa 	bl	8001b78 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_WR_Pin LCD_RD_Pin LCD_E_Pin LCD_D0_Pin */
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin|LCD_D0_Pin;
 8000c24:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8000c28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2302      	movs	r3, #2
 8000c34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <MX_GPIO_Init+0xa4>)
 8000c3e:	f000 fe41 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin LCD_D4_Pin
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 8000c42:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000c46:	60bb      	str	r3, [r7, #8]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2302      	movs	r3, #2
 8000c52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_GPIO_Init+0xa8>)
 8000c5c:	f000 fe32 	bl	80018c4 <HAL_GPIO_Init>

}
 8000c60:	bf00      	nop
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010800 	.word	0x40010800
 8000c70:	40010c00 	.word	0x40010c00

08000c74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c86:	f000 fcff 	bl	8001688 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40012c00 	.word	0x40012c00

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_MspInit+0x5c>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_MspInit+0x60>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_MspInit+0x60>)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010000 	.word	0x40010000

08000d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <HAL_I2C_MspInit+0x74>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d124      	bne.n	8000d72 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_I2C_MspInit+0x78>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <HAL_I2C_MspInit+0x78>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_I2C_MspInit+0x78>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000d40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d46:	2312      	movs	r3, #18
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	4619      	mov	r1, r3
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <HAL_I2C_MspInit+0x7c>)
 8000d56:	f000 fdb5 	bl	80018c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_I2C_MspInit+0x78>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_I2C_MspInit+0x78>)
 8000d60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_I2C_MspInit+0x78>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40005800 	.word	0x40005800
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010c00 	.word	0x40010c00

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d12f      	bne.n	8000e08 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <HAL_UART_MspInit+0x8c>)
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_UART_MspInit+0x8c>)
 8000dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db2:	61d3      	str	r3, [r2, #28]
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_UART_MspInit+0x8c>)
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_UART_MspInit+0x8c>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <HAL_UART_MspInit+0x8c>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_UART_MspInit+0x8c>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	480b      	ldr	r0, [pc, #44]	; (8000e18 <HAL_UART_MspInit+0x90>)
 8000dec:	f000 fd6a 	bl	80018c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000df0:	2308      	movs	r3, #8
 8000df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_UART_MspInit+0x90>)
 8000e04:	f000 fd5e 	bl	80018c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40004400 	.word	0x40004400
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010800 	.word	0x40010800

08000e1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	2019      	movs	r0, #25
 8000e32:	f000 fd1c 	bl	800186e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e36:	2019      	movs	r0, #25
 8000e38:	f000 fd35 	bl	80018a6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_InitTick+0x9c>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <HAL_InitTick+0x9c>)
 8000e42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_InitTick+0x9c>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e54:	f107 0210 	add.w	r2, r7, #16
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f002 fa5c 	bl	800331c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e64:	f002 fa46 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
 8000e68:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6c:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_InitTick+0xa0>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	0c9b      	lsrs	r3, r3, #18
 8000e74:	3b01      	subs	r3, #1
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_InitTick+0xa4>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_InitTick+0xa8>)
 8000e7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_InitTick+0xa4>)
 8000e80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_InitTick+0xa4>)
 8000e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_InitTick+0xa4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_InitTick+0xa4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <HAL_InitTick+0xa4>)
 8000e9a:	f002 fa8d 	bl	80033b8 <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d104      	bne.n	8000eae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ea4:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <HAL_InitTick+0xa4>)
 8000ea6:	f002 fadf 	bl	8003468 <HAL_TIM_Base_Start_IT>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3730      	adds	r7, #48	; 0x30
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	431bde83 	.word	0x431bde83
 8000ec0:	200001cc 	.word	0x200001cc
 8000ec4:	40012c00 	.word	0x40012c00

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <HardFault_Handler+0x4>

08000eda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <UsageFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM1_UP_IRQHandler+0x10>)
 8000f22:	f002 faf3 	bl	800350c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001cc 	.word	0x200001cc

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f002 fe2c 	bl	8003bbc <__errno>
 8000f64:	4602      	mov	r2, r0
 8000f66:	230c      	movs	r3, #12
 8000f68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20005000 	.word	0x20005000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	20000128 	.word	0x20000128
 8000f98:	20000228 	.word	0x20000228

08000f9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fa8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000faa:	e003      	b.n	8000fb4 <LoopCopyDataInit>

08000fac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fb2:	3104      	adds	r1, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fbc:	d3f6      	bcc.n	8000fac <CopyDataInit>
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fc0:	e002      	b.n	8000fc8 <LoopFillZerobss>

08000fc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fc4:	f842 3b04 	str.w	r3, [r2], #4

08000fc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fcc:	d3f9      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fce:	f7ff ffe5 	bl	8000f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f002 fdf9 	bl	8003bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd6:	f7ff fcd9 	bl	800098c <main>
  bx lr
 8000fda:	4770      	bx	lr
  ldr r3, =_sidata
 8000fdc:	08004524 	.word	0x08004524
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fe4:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000fe8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000fec:	20000224 	.word	0x20000224

08000ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_2_IRQHandler>
	...

08000ff4 <GY30_init>:
extern I2C_HandleTypeDef hi2c2;
uint8_t com;
uint8_t rawData[2];

void GY30_init(uint8_t addr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	com = GY30_MODE;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <GY30_init+0x30>)
 8001000:	2210      	movs	r2, #16
 8001002:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, addr, &com, sizeof(com), 0xFF);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	b299      	uxth	r1, r3
 8001008:	23ff      	movs	r3, #255	; 0xff
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <GY30_init+0x30>)
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <GY30_init+0x34>)
 8001012:	f000 ff01 	bl	8001e18 <HAL_I2C_Master_Transmit>
#if ((GY30_MODE & 0x03) == 0x03)
	HAL_Delay(50);
#else
	HAL_Delay(180);
 8001016:	20b4      	movs	r0, #180	; 0xb4
 8001018:	f000 fb52 	bl	80016c0 <HAL_Delay>
#endif
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000214 	.word	0x20000214
 8001028:	20000138 	.word	0x20000138

0800102c <GY30_getData>:

double GY30_getData(uint8_t addr)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b087      	sub	sp, #28
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	;
#elif ((GY30_MODE & 0x20) == 0x20)
	com = GY30_POWER_ON;
	HAL_I2C_Master_Transmit(&hi2c2, addr, &com, sizeof(com), 0xFF);
#endif
	HAL_I2C_Master_Receive(&hi2c2, addr, rawData, sizeof(rawData), 0xFF);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	b299      	uxth	r1, r3
 800103a:	23ff      	movs	r3, #255	; 0xff
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2302      	movs	r3, #2
 8001040:	4a0e      	ldr	r2, [pc, #56]	; (800107c <GY30_getData+0x50>)
 8001042:	480f      	ldr	r0, [pc, #60]	; (8001080 <GY30_getData+0x54>)
 8001044:	f000 ffe6 	bl	8002014 <HAL_I2C_Master_Receive>
	uint16_t temp = ((rawData[0] << 8) | rawData[1]);
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <GY30_getData+0x50>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <GY30_getData+0x50>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	81fb      	strh	r3, [r7, #14]

	return ((double)temp / 1.2);
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f9c0 	bl	80003e4 <__aeabi_ui2d>
 8001064:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <GY30_getData+0x58>)
 800106a:	f7ff fb5f 	bl	800072c <__aeabi_ddiv>
 800106e:	4603      	mov	r3, r0
 8001070:	460c      	mov	r4, r1
}
 8001072:	4618      	mov	r0, r3
 8001074:	4621      	mov	r1, r4
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	20000218 	.word	0x20000218
 8001080:	20000138 	.word	0x20000138
 8001084:	3ff33333 	.word	0x3ff33333

08001088 <HC05_transmit>:

extern UART_HandleTypeDef huart2;
static char *uartEnd = "\r\n";

void HC05_transmit(char *pdata,int len)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)pdata, len, 0xFF);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b29a      	uxth	r2, r3
 8001096:	23ff      	movs	r3, #255	; 0xff
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <HC05_transmit+0x3c>)
 800109c:	f002 fc23 	bl	80038e6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartEnd, strlen(uartEnd), 0xFF);	//transmit blank characters to end transmission
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HC05_transmit+0x40>)
 80010a2:	681c      	ldr	r4, [r3, #0]
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HC05_transmit+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f851 	bl	8000150 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	23ff      	movs	r3, #255	; 0xff
 80010b4:	4621      	mov	r1, r4
 80010b6:	4803      	ldr	r0, [pc, #12]	; (80010c4 <HC05_transmit+0x3c>)
 80010b8:	f002 fc15 	bl	80038e6 <HAL_UART_Transmit>
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd90      	pop	{r4, r7, pc}
 80010c4:	2000018c 	.word	0x2000018c
 80010c8:	20000004 	.word	0x20000004

080010cc <LCD_write>:
#include "stm32f1xx_hal.h"

uint8_t CRC8_compute(const uint8_t *pdat, short len, const uint8_t factor);

static void LCD_write(uint8_t dat)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, ((dat>>0)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e4:	4829      	ldr	r0, [pc, #164]	; (800118c <LCD_write+0xc0>)
 80010e6:	f000 fd47 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, ((dat>>1)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	085b      	lsrs	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	2108      	movs	r1, #8
 80010fa:	4825      	ldr	r0, [pc, #148]	; (8001190 <LCD_write+0xc4>)
 80010fc:	f000 fd3c 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, ((dat>>2)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	2110      	movs	r1, #16
 8001110:	481f      	ldr	r0, [pc, #124]	; (8001190 <LCD_write+0xc4>)
 8001112:	f000 fd31 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, ((dat>>3)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	08db      	lsrs	r3, r3, #3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	2120      	movs	r1, #32
 8001126:	481a      	ldr	r0, [pc, #104]	; (8001190 <LCD_write+0xc4>)
 8001128:	f000 fd26 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((dat>>4)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	461a      	mov	r2, r3
 800113a:	2140      	movs	r1, #64	; 0x40
 800113c:	4814      	ldr	r0, [pc, #80]	; (8001190 <LCD_write+0xc4>)
 800113e:	f000 fd1b 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((dat>>5)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	095b      	lsrs	r3, r3, #5
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <LCD_write+0xc4>)
 8001154:	f000 fd10 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((dat>>6)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	099b      	lsrs	r3, r3, #6
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <LCD_write+0xc4>)
 800116c:	f000 fd04 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((dat>>7)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	09db      	lsrs	r3, r3, #7
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <LCD_write+0xc4>)
 800117e:	f000 fcfb 	bl	8001b78 <HAL_GPIO_WritePin>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010800 	.word	0x40010800
 8001190:	40010c00 	.word	0x40010c00

08001194 <LCD_writeCom>:

void LCD_writeCom(uint8_t com)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	4812      	ldr	r0, [pc, #72]	; (80011ec <LCD_writeCom+0x58>)
 80011a4:	f000 fce8 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2140      	movs	r1, #64	; 0x40
 80011ac:	480f      	ldr	r0, [pc, #60]	; (80011ec <LCD_writeCom+0x58>)
 80011ae:	f000 fce3 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <LCD_writeCom+0x58>)
 80011b8:	f000 fcde 	bl	8001b78 <HAL_GPIO_WritePin>

	LCD_write(com);
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff84 	bl	80010cc <LCD_write>
	HAL_Delay(1);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 fa7b 	bl	80016c0 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <LCD_writeCom+0x58>)
 80011d0:	f000 fcd2 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f000 fa73 	bl	80016c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <LCD_writeCom+0x58>)
 80011e0:	f000 fcca 	bl	8001b78 <HAL_GPIO_WritePin>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40010800 	.word	0x40010800

080011f0 <LCD_writeData>:

void LCD_writeData(uint8_t data)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	4812      	ldr	r0, [pc, #72]	; (8001248 <LCD_writeData+0x58>)
 8001200:	f000 fcba 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2140      	movs	r1, #64	; 0x40
 8001208:	480f      	ldr	r0, [pc, #60]	; (8001248 <LCD_writeData+0x58>)
 800120a:	f000 fcb5 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2120      	movs	r1, #32
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <LCD_writeData+0x58>)
 8001214:	f000 fcb0 	bl	8001b78 <HAL_GPIO_WritePin>

	LCD_write(data);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff56 	bl	80010cc <LCD_write>
	HAL_Delay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f000 fa4d 	bl	80016c0 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	4807      	ldr	r0, [pc, #28]	; (8001248 <LCD_writeData+0x58>)
 800122c:	f000 fca4 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f000 fa45 	bl	80016c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <LCD_writeData+0x58>)
 800123c:	f000 fc9c 	bl	8001b78 <HAL_GPIO_WritePin>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40010800 	.word	0x40010800

0800124c <LCD_init>:

void LCD_init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	LCD_writeCom(0x38);
 8001250:	2038      	movs	r0, #56	; 0x38
 8001252:	f7ff ff9f 	bl	8001194 <LCD_writeCom>
	LCD_writeCom(0x0c);
 8001256:	200c      	movs	r0, #12
 8001258:	f7ff ff9c 	bl	8001194 <LCD_writeCom>
	LCD_writeCom(0x06);
 800125c:	2006      	movs	r0, #6
 800125e:	f7ff ff99 	bl	8001194 <LCD_writeCom>
	LCD_writeCom(0x01);
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff ff96 	bl	8001194 <LCD_writeCom>
	LCD_writeCom(0X80);
 8001268:	2080      	movs	r0, #128	; 0x80
 800126a:	f7ff ff93 	bl	8001194 <LCD_writeCom>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <LCD_show_GY30>:

void LCD_show_GY30(uint16_t result)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
	LCD_writeData((result / 10000)+48);
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	4a35      	ldr	r2, [pc, #212]	; (8001358 <LCD_show_GY30+0xe4>)
 8001282:	fba2 2303 	umull	r2, r3, r2, r3
 8001286:	0b5b      	lsrs	r3, r3, #13
 8001288:	b29b      	uxth	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	3330      	adds	r3, #48	; 0x30
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ffad 	bl	80011f0 <LCD_writeData>
	LCD_writeData((result % 10000 /1000)+48);
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <LCD_show_GY30+0xe4>)
 800129a:	fba2 1203 	umull	r1, r2, r2, r3
 800129e:	0b52      	lsrs	r2, r2, #13
 80012a0:	f242 7110 	movw	r1, #10000	; 0x2710
 80012a4:	fb01 f202 	mul.w	r2, r1, r2
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4a2b      	ldr	r2, [pc, #172]	; (800135c <LCD_show_GY30+0xe8>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	099b      	lsrs	r3, r3, #6
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3330      	adds	r3, #48	; 0x30
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff97 	bl	80011f0 <LCD_writeData>
	LCD_writeData((result % 1000 / 100)+48);
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	4a25      	ldr	r2, [pc, #148]	; (800135c <LCD_show_GY30+0xe8>)
 80012c6:	fba2 1203 	umull	r1, r2, r2, r3
 80012ca:	0992      	lsrs	r2, r2, #6
 80012cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012d0:	fb01 f202 	mul.w	r2, r1, r2
 80012d4:	1a9b      	subs	r3, r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4a21      	ldr	r2, [pc, #132]	; (8001360 <LCD_show_GY30+0xec>)
 80012da:	fba2 2303 	umull	r2, r3, r2, r3
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	3330      	adds	r3, #48	; 0x30
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff81 	bl	80011f0 <LCD_writeData>
	LCD_writeData((result % 100 / 10)+48);
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <LCD_show_GY30+0xec>)
 80012f2:	fba2 1203 	umull	r1, r2, r2, r3
 80012f6:	0952      	lsrs	r2, r2, #5
 80012f8:	2164      	movs	r1, #100	; 0x64
 80012fa:	fb01 f202 	mul.w	r2, r1, r2
 80012fe:	1a9b      	subs	r3, r3, r2
 8001300:	b29b      	uxth	r3, r3
 8001302:	4a18      	ldr	r2, [pc, #96]	; (8001364 <LCD_show_GY30+0xf0>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	3330      	adds	r3, #48	; 0x30
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff6c 	bl	80011f0 <LCD_writeData>
	LCD_writeData((result % 10)+48);
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <LCD_show_GY30+0xf0>)
 800131c:	fba3 1302 	umull	r1, r3, r3, r2
 8001320:	08d9      	lsrs	r1, r3, #3
 8001322:	460b      	mov	r3, r1
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3330      	adds	r3, #48	; 0x30
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5b 	bl	80011f0 <LCD_writeData>
	LCD_writeData('L');
 800133a:	204c      	movs	r0, #76	; 0x4c
 800133c:	f7ff ff58 	bl	80011f0 <LCD_writeData>
	LCD_writeData('x');
 8001340:	2078      	movs	r0, #120	; 0x78
 8001342:	f7ff ff55 	bl	80011f0 <LCD_writeData>

	HAL_Delay(1000);
 8001346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134a:	f000 f9b9 	bl	80016c0 <HAL_Delay>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	d1b71759 	.word	0xd1b71759
 800135c:	10624dd3 	.word	0x10624dd3
 8001360:	51eb851f 	.word	0x51eb851f
 8001364:	cccccccd 	.word	0xcccccccd

08001368 <LCD_show_SHT31>:

void LCD_show_SHT31(uint16_t temp, uint16_t humi)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	80fb      	strh	r3, [r7, #6]
 8001374:	4613      	mov	r3, r2
 8001376:	80bb      	strh	r3, [r7, #4]
	LCD_writeData((temp / 10000)+48);
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	4a6a      	ldr	r2, [pc, #424]	; (8001524 <LCD_show_SHT31+0x1bc>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	0b5b      	lsrs	r3, r3, #13
 8001382:	b29b      	uxth	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	3330      	adds	r3, #48	; 0x30
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff30 	bl	80011f0 <LCD_writeData>
	LCD_writeData((temp % 10000 /1000)+48);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	4a64      	ldr	r2, [pc, #400]	; (8001524 <LCD_show_SHT31+0x1bc>)
 8001394:	fba2 1203 	umull	r1, r2, r2, r3
 8001398:	0b52      	lsrs	r2, r2, #13
 800139a:	f242 7110 	movw	r1, #10000	; 0x2710
 800139e:	fb01 f202 	mul.w	r2, r1, r2
 80013a2:	1a9b      	subs	r3, r3, r2
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4a60      	ldr	r2, [pc, #384]	; (8001528 <LCD_show_SHT31+0x1c0>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	099b      	lsrs	r3, r3, #6
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3330      	adds	r3, #48	; 0x30
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff1a 	bl	80011f0 <LCD_writeData>
	LCD_writeData('.');
 80013bc:	202e      	movs	r0, #46	; 0x2e
 80013be:	f7ff ff17 	bl	80011f0 <LCD_writeData>
	LCD_writeData((temp % 1000 / 100)+48);
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	4a58      	ldr	r2, [pc, #352]	; (8001528 <LCD_show_SHT31+0x1c0>)
 80013c6:	fba2 1203 	umull	r1, r2, r2, r3
 80013ca:	0992      	lsrs	r2, r2, #6
 80013cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013d0:	fb01 f202 	mul.w	r2, r1, r2
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4a54      	ldr	r2, [pc, #336]	; (800152c <LCD_show_SHT31+0x1c4>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	3330      	adds	r3, #48	; 0x30
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff01 	bl	80011f0 <LCD_writeData>
	LCD_writeData((temp % 100 / 10)+48);
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4a4e      	ldr	r2, [pc, #312]	; (800152c <LCD_show_SHT31+0x1c4>)
 80013f2:	fba2 1203 	umull	r1, r2, r2, r3
 80013f6:	0952      	lsrs	r2, r2, #5
 80013f8:	2164      	movs	r1, #100	; 0x64
 80013fa:	fb01 f202 	mul.w	r2, r1, r2
 80013fe:	1a9b      	subs	r3, r3, r2
 8001400:	b29b      	uxth	r3, r3
 8001402:	4a4b      	ldr	r2, [pc, #300]	; (8001530 <LCD_show_SHT31+0x1c8>)
 8001404:	fba2 2303 	umull	r2, r3, r2, r3
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	b29b      	uxth	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	3330      	adds	r3, #48	; 0x30
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff feec 	bl	80011f0 <LCD_writeData>
	LCD_writeData((temp % 10)+48);
 8001418:	88fa      	ldrh	r2, [r7, #6]
 800141a:	4b45      	ldr	r3, [pc, #276]	; (8001530 <LCD_show_SHT31+0x1c8>)
 800141c:	fba3 1302 	umull	r1, r3, r3, r2
 8001420:	08d9      	lsrs	r1, r3, #3
 8001422:	460b      	mov	r3, r1
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	b29b      	uxth	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	3330      	adds	r3, #48	; 0x30
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fedb 	bl	80011f0 <LCD_writeData>
	LCD_writeData(0xDF);
 800143a:	20df      	movs	r0, #223	; 0xdf
 800143c:	f7ff fed8 	bl	80011f0 <LCD_writeData>
	LCD_writeData('C');
 8001440:	2043      	movs	r0, #67	; 0x43
 8001442:	f7ff fed5 	bl	80011f0 <LCD_writeData>
	LCD_writeData(' ');
 8001446:	2020      	movs	r0, #32
 8001448:	f7ff fed2 	bl	80011f0 <LCD_writeData>

	LCD_writeData((humi / 10000)+48);
 800144c:	88bb      	ldrh	r3, [r7, #4]
 800144e:	4a35      	ldr	r2, [pc, #212]	; (8001524 <LCD_show_SHT31+0x1bc>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	0b5b      	lsrs	r3, r3, #13
 8001456:	b29b      	uxth	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	3330      	adds	r3, #48	; 0x30
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fec6 	bl	80011f0 <LCD_writeData>
	LCD_writeData((humi % 10000 /1000)+48);
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <LCD_show_SHT31+0x1bc>)
 8001468:	fba2 1203 	umull	r1, r2, r2, r3
 800146c:	0b52      	lsrs	r2, r2, #13
 800146e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001472:	fb01 f202 	mul.w	r2, r1, r2
 8001476:	1a9b      	subs	r3, r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	4a2b      	ldr	r2, [pc, #172]	; (8001528 <LCD_show_SHT31+0x1c0>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	099b      	lsrs	r3, r3, #6
 8001482:	b29b      	uxth	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3330      	adds	r3, #48	; 0x30
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff feb0 	bl	80011f0 <LCD_writeData>
	LCD_writeData('.');
 8001490:	202e      	movs	r0, #46	; 0x2e
 8001492:	f7ff fead 	bl	80011f0 <LCD_writeData>
	LCD_writeData((humi % 1000 / 100)+48);
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	4a23      	ldr	r2, [pc, #140]	; (8001528 <LCD_show_SHT31+0x1c0>)
 800149a:	fba2 1203 	umull	r1, r2, r2, r3
 800149e:	0992      	lsrs	r2, r2, #6
 80014a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014a4:	fb01 f202 	mul.w	r2, r1, r2
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4a1f      	ldr	r2, [pc, #124]	; (800152c <LCD_show_SHT31+0x1c4>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	3330      	adds	r3, #48	; 0x30
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fe97 	bl	80011f0 <LCD_writeData>
	LCD_writeData((humi % 100 / 10)+48);
 80014c2:	88bb      	ldrh	r3, [r7, #4]
 80014c4:	4a19      	ldr	r2, [pc, #100]	; (800152c <LCD_show_SHT31+0x1c4>)
 80014c6:	fba2 1203 	umull	r1, r2, r2, r3
 80014ca:	0952      	lsrs	r2, r2, #5
 80014cc:	2164      	movs	r1, #100	; 0x64
 80014ce:	fb01 f202 	mul.w	r2, r1, r2
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <LCD_show_SHT31+0x1c8>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	3330      	adds	r3, #48	; 0x30
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fe82 	bl	80011f0 <LCD_writeData>
	LCD_writeData((humi % 10)+48);
 80014ec:	88ba      	ldrh	r2, [r7, #4]
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <LCD_show_SHT31+0x1c8>)
 80014f0:	fba3 1302 	umull	r1, r3, r3, r2
 80014f4:	08d9      	lsrs	r1, r3, #3
 80014f6:	460b      	mov	r3, r1
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3330      	adds	r3, #48	; 0x30
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe71 	bl	80011f0 <LCD_writeData>
	LCD_writeData('%');
 800150e:	2025      	movs	r0, #37	; 0x25
 8001510:	f7ff fe6e 	bl	80011f0 <LCD_writeData>
	LCD_writeData(' ');
 8001514:	2020      	movs	r0, #32
 8001516:	f7ff fe6b 	bl	80011f0 <LCD_writeData>


}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	d1b71759 	.word	0xd1b71759
 8001528:	10624dd3 	.word	0x10624dd3
 800152c:	51eb851f 	.word	0x51eb851f
 8001530:	cccccccd 	.word	0xcccccccd

08001534 <SHT31_init>:

extern I2C_HandleTypeDef hi2c2;
static uint8_t com[2] = {0};

void SHT31_init(uint8_t com_MSB, uint8_t com_LSB)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af02      	add	r7, sp, #8
 800153a:	4603      	mov	r3, r0
 800153c:	460a      	mov	r2, r1
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	4613      	mov	r3, r2
 8001542:	71bb      	strb	r3, [r7, #6]
	com[0] = com_MSB;
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SHT31_init+0x3c>)
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	7013      	strb	r3, [r2, #0]
	com[1] = com_LSB;
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <SHT31_init+0x3c>)
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c2, SHT31_WRITE_ADDR, com, sizeof(com), 0xFF);
 8001550:	23ff      	movs	r3, #255	; 0xff
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2302      	movs	r3, #2
 8001556:	4a06      	ldr	r2, [pc, #24]	; (8001570 <SHT31_init+0x3c>)
 8001558:	2188      	movs	r1, #136	; 0x88
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <SHT31_init+0x40>)
 800155c:	f000 fc5c 	bl	8001e18 <HAL_I2C_Master_Transmit>

#if (SHT31_MODE == SHT31_SINGLESHOT_MODE)
	HAL_Delay(10);
 8001560:	200a      	movs	r0, #10
 8001562:	f000 f8ad 	bl	80016c0 <HAL_Delay>
	;
#else
	fprintf(stderr,"SHT31 MODE selection failed.\n");
	exit(-1);
#endif
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000012c 	.word	0x2000012c
 8001574:	20000138 	.word	0x20000138

08001578 <SHT31_readData>:

SHT31_DATA_T SHT31_readData(void)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b08d      	sub	sp, #52	; 0x34
 800157c:	af02      	add	r7, sp, #8
 800157e:	6078      	str	r0, [r7, #4]
	uint8_t dataRaw[6];
	SHT31_DATA_T data;

#if (SHT31_MODE == SHT31_SINGLESHOT_MODE)
	HAL_Delay(20);
 8001580:	2014      	movs	r0, #20
 8001582:	f000 f89d 	bl	80016c0 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, SHT31_WRITE_ADDR, com, sizeof(com), 0xFF);
#else
	fprintf(stderr,"SHT31 MODE selection failed.\n");
	exit(-1);
#endif
	HAL_I2C_Master_Receive(&hi2c2, SHT31_READ_ADDR, dataRaw, sizeof(dataRaw), 0xFF);
 8001586:	f107 021c 	add.w	r2, r7, #28
 800158a:	23ff      	movs	r3, #255	; 0xff
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2306      	movs	r3, #6
 8001590:	2188      	movs	r1, #136	; 0x88
 8001592:	482f      	ldr	r0, [pc, #188]	; (8001650 <SHT31_readData+0xd8>)
 8001594:	f000 fd3e 	bl	8002014 <HAL_I2C_Master_Receive>
	uint16_t rawTemp = ((uint16_t)(dataRaw[0] << 8) | (uint16_t)dataRaw[1]);
 8001598:	7f3b      	ldrb	r3, [r7, #28]
 800159a:	b29b      	uxth	r3, r3
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b29a      	uxth	r2, r3
 80015a0:	7f7b      	ldrb	r3, [r7, #29]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHumi = ((uint16_t)(dataRaw[3] << 8) | (uint16_t)dataRaw[4]);
 80015a8:	7ffb      	ldrb	r3, [r7, #31]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	84bb      	strh	r3, [r7, #36]	; 0x24


	}
	***/

	data.temp = (-45) + 175 * (rawTemp / (double)((0x01UL << 16) - 1));
 80015ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff21 	bl	8000404 <__aeabi_i2d>
 80015c2:	a31f      	add	r3, pc, #124	; (adr r3, 8001640 <SHT31_readData+0xc8>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff f8b0 	bl	800072c <__aeabi_ddiv>
 80015cc:	4603      	mov	r3, r0
 80015ce:	460c      	mov	r4, r1
 80015d0:	4618      	mov	r0, r3
 80015d2:	4621      	mov	r1, r4
 80015d4:	a31c      	add	r3, pc, #112	; (adr r3, 8001648 <SHT31_readData+0xd0>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7fe ff7d 	bl	80004d8 <__aeabi_dmul>
 80015de:	4603      	mov	r3, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	4618      	mov	r0, r3
 80015e4:	4621      	mov	r1, r4
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <SHT31_readData+0xdc>)
 80015ec:	f7fe fdbc 	bl	8000168 <__aeabi_dsub>
 80015f0:	4603      	mov	r3, r0
 80015f2:	460c      	mov	r4, r1
 80015f4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	data.humi = 100 * (rawHumi / (double)((0x01UL << 16) - 1));
 80015f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff02 	bl	8000404 <__aeabi_i2d>
 8001600:	a30f      	add	r3, pc, #60	; (adr r3, 8001640 <SHT31_readData+0xc8>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7ff f891 	bl	800072c <__aeabi_ddiv>
 800160a:	4603      	mov	r3, r0
 800160c:	460c      	mov	r4, r1
 800160e:	4618      	mov	r0, r3
 8001610:	4621      	mov	r1, r4
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <SHT31_readData+0xe0>)
 8001618:	f7fe ff5e 	bl	80004d8 <__aeabi_dmul>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	e9c7 3404 	strd	r3, r4, [r7, #16]

	return data;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	461c      	mov	r4, r3
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800162e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	372c      	adds	r7, #44	; 0x2c
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop
 800163c:	f3af 8000 	nop.w
 8001640:	00000000 	.word	0x00000000
 8001644:	40efffe0 	.word	0x40efffe0
 8001648:	00000000 	.word	0x00000000
 800164c:	4065e000 	.word	0x4065e000
 8001650:	20000138 	.word	0x20000138
 8001654:	40468000 	.word	0x40468000
 8001658:	40590000 	.word	0x40590000

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x28>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f8f3 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff fbd2 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fb14 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x1c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_IncTick+0x20>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <HAL_IncTick+0x20>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	2000021c 	.word	0x2000021c

080016ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b02      	ldr	r3, [pc, #8]	; (80016bc <HAL_GetTick+0x10>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	2000021c 	.word	0x2000021c

080016c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff fff0 	bl	80016ac <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d8:	d005      	beq.n	80016e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_Delay+0x40>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e6:	bf00      	nop
 80016e8:	f7ff ffe0 	bl	80016ac <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d8f7      	bhi.n	80016e8 <HAL_Delay+0x28>
  {
  }
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000000c 	.word	0x2000000c

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4906      	ldr	r1, [pc, #24]	; (800179c <__NVIC_EnableIRQ+0x34>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff4f 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001880:	f7ff ff64 	bl	800174c <__NVIC_GetPriorityGrouping>
 8001884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff ffb2 	bl	80017f4 <NVIC_EncodePriority>
 8001890:	4602      	mov	r2, r0
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff81 	bl	80017a0 <__NVIC_SetPriority>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff57 	bl	8001768 <__NVIC_EnableIRQ>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b08b      	sub	sp, #44	; 0x2c
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d6:	e127      	b.n	8001b28 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d8:	2201      	movs	r2, #1
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f040 8116 	bne.w	8001b22 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b12      	cmp	r3, #18
 80018fc:	d034      	beq.n	8001968 <HAL_GPIO_Init+0xa4>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d80d      	bhi.n	800191e <HAL_GPIO_Init+0x5a>
 8001902:	2b02      	cmp	r3, #2
 8001904:	d02b      	beq.n	800195e <HAL_GPIO_Init+0x9a>
 8001906:	2b02      	cmp	r3, #2
 8001908:	d804      	bhi.n	8001914 <HAL_GPIO_Init+0x50>
 800190a:	2b00      	cmp	r3, #0
 800190c:	d031      	beq.n	8001972 <HAL_GPIO_Init+0xae>
 800190e:	2b01      	cmp	r3, #1
 8001910:	d01c      	beq.n	800194c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001912:	e048      	b.n	80019a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001914:	2b03      	cmp	r3, #3
 8001916:	d043      	beq.n	80019a0 <HAL_GPIO_Init+0xdc>
 8001918:	2b11      	cmp	r3, #17
 800191a:	d01b      	beq.n	8001954 <HAL_GPIO_Init+0x90>
          break;
 800191c:	e043      	b.n	80019a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800191e:	4a89      	ldr	r2, [pc, #548]	; (8001b44 <HAL_GPIO_Init+0x280>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d026      	beq.n	8001972 <HAL_GPIO_Init+0xae>
 8001924:	4a87      	ldr	r2, [pc, #540]	; (8001b44 <HAL_GPIO_Init+0x280>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d806      	bhi.n	8001938 <HAL_GPIO_Init+0x74>
 800192a:	4a87      	ldr	r2, [pc, #540]	; (8001b48 <HAL_GPIO_Init+0x284>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d020      	beq.n	8001972 <HAL_GPIO_Init+0xae>
 8001930:	4a86      	ldr	r2, [pc, #536]	; (8001b4c <HAL_GPIO_Init+0x288>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01d      	beq.n	8001972 <HAL_GPIO_Init+0xae>
          break;
 8001936:	e036      	b.n	80019a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001938:	4a85      	ldr	r2, [pc, #532]	; (8001b50 <HAL_GPIO_Init+0x28c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d019      	beq.n	8001972 <HAL_GPIO_Init+0xae>
 800193e:	4a85      	ldr	r2, [pc, #532]	; (8001b54 <HAL_GPIO_Init+0x290>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d016      	beq.n	8001972 <HAL_GPIO_Init+0xae>
 8001944:	4a84      	ldr	r2, [pc, #528]	; (8001b58 <HAL_GPIO_Init+0x294>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0xae>
          break;
 800194a:	e02c      	b.n	80019a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e028      	b.n	80019a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	3304      	adds	r3, #4
 800195a:	623b      	str	r3, [r7, #32]
          break;
 800195c:	e023      	b.n	80019a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	3308      	adds	r3, #8
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e01e      	b.n	80019a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	330c      	adds	r3, #12
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	e019      	b.n	80019a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800197a:	2304      	movs	r3, #4
 800197c:	623b      	str	r3, [r7, #32]
          break;
 800197e:	e012      	b.n	80019a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001988:	2308      	movs	r3, #8
 800198a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	611a      	str	r2, [r3, #16]
          break;
 8001992:	e008      	b.n	80019a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001994:	2308      	movs	r3, #8
 8001996:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	615a      	str	r2, [r3, #20]
          break;
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
          break;
 80019a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2bff      	cmp	r3, #255	; 0xff
 80019aa:	d801      	bhi.n	80019b0 <HAL_GPIO_Init+0xec>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	e001      	b.n	80019b4 <HAL_GPIO_Init+0xf0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3304      	adds	r3, #4
 80019b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2bff      	cmp	r3, #255	; 0xff
 80019ba:	d802      	bhi.n	80019c2 <HAL_GPIO_Init+0xfe>
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_Init+0x104>
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	3b08      	subs	r3, #8
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	210f      	movs	r1, #15
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	401a      	ands	r2, r3
 80019da:	6a39      	ldr	r1, [r7, #32]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	431a      	orrs	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 8096 	beq.w	8001b22 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019f6:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_GPIO_Init+0x298>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	4a58      	ldr	r2, [pc, #352]	; (8001b5c <HAL_GPIO_Init+0x298>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6193      	str	r3, [r2, #24]
 8001a02:	4b56      	ldr	r3, [pc, #344]	; (8001b5c <HAL_GPIO_Init+0x298>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a0e:	4a54      	ldr	r2, [pc, #336]	; (8001b60 <HAL_GPIO_Init+0x29c>)
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4b      	ldr	r2, [pc, #300]	; (8001b64 <HAL_GPIO_Init+0x2a0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_GPIO_Init+0x19e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4a      	ldr	r2, [pc, #296]	; (8001b68 <HAL_GPIO_Init+0x2a4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00d      	beq.n	8001a5e <HAL_GPIO_Init+0x19a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a49      	ldr	r2, [pc, #292]	; (8001b6c <HAL_GPIO_Init+0x2a8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d007      	beq.n	8001a5a <HAL_GPIO_Init+0x196>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a48      	ldr	r2, [pc, #288]	; (8001b70 <HAL_GPIO_Init+0x2ac>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_GPIO_Init+0x192>
 8001a52:	2303      	movs	r3, #3
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x1a0>
 8001a56:	2304      	movs	r3, #4
 8001a58:	e004      	b.n	8001a64 <HAL_GPIO_Init+0x1a0>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e002      	b.n	8001a64 <HAL_GPIO_Init+0x1a0>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_Init+0x1a0>
 8001a62:	2300      	movs	r3, #0
 8001a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a66:	f002 0203 	and.w	r2, r2, #3
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	4093      	lsls	r3, r2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a74:	493a      	ldr	r1, [pc, #232]	; (8001b60 <HAL_GPIO_Init+0x29c>)
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a8e:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4938      	ldr	r1, [pc, #224]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a9c:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4933      	ldr	r1, [pc, #204]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	492e      	ldr	r1, [pc, #184]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
 8001ac2:	e006      	b.n	8001ad2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	4929      	ldr	r1, [pc, #164]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	4924      	ldr	r1, [pc, #144]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
 8001aea:	e006      	b.n	8001afa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	491f      	ldr	r1, [pc, #124]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	491a      	ldr	r1, [pc, #104]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	60cb      	str	r3, [r1, #12]
 8001b12:	e006      	b.n	8001b22 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	4915      	ldr	r1, [pc, #84]	; (8001b74 <HAL_GPIO_Init+0x2b0>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	3301      	adds	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f47f aed0 	bne.w	80018d8 <HAL_GPIO_Init+0x14>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	372c      	adds	r7, #44	; 0x2c
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	10210000 	.word	0x10210000
 8001b48:	10110000 	.word	0x10110000
 8001b4c:	10120000 	.word	0x10120000
 8001b50:	10310000 	.word	0x10310000
 8001b54:	10320000 	.word	0x10320000
 8001b58:	10220000 	.word	0x10220000
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010000 	.word	0x40010000
 8001b64:	40010800 	.word	0x40010800
 8001b68:	40010c00 	.word	0x40010c00
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	40011400 	.word	0x40011400
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b94:	e003      	b.n	8001b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	041a      	lsls	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e11f      	b.n	8001dfa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d106      	bne.n	8001bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff f89a 	bl	8000d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2224      	movs	r2, #36	; 0x24
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c0c:	f001 fb5e 	bl	80032cc <HAL_RCC_GetPCLK1Freq>
 8001c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4a7b      	ldr	r2, [pc, #492]	; (8001e04 <HAL_I2C_Init+0x25c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d807      	bhi.n	8001c2c <HAL_I2C_Init+0x84>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <HAL_I2C_Init+0x260>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	bf94      	ite	ls
 8001c24:	2301      	movls	r3, #1
 8001c26:	2300      	movhi	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	e006      	b.n	8001c3a <HAL_I2C_Init+0x92>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4a77      	ldr	r2, [pc, #476]	; (8001e0c <HAL_I2C_Init+0x264>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	bf94      	ite	ls
 8001c34:	2301      	movls	r3, #1
 8001c36:	2300      	movhi	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0db      	b.n	8001dfa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <HAL_I2C_Init+0x268>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0c9b      	lsrs	r3, r3, #18
 8001c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a64      	ldr	r2, [pc, #400]	; (8001e04 <HAL_I2C_Init+0x25c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d802      	bhi.n	8001c7c <HAL_I2C_Init+0xd4>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	e009      	b.n	8001c90 <HAL_I2C_Init+0xe8>
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4a63      	ldr	r2, [pc, #396]	; (8001e14 <HAL_I2C_Init+0x26c>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	3301      	adds	r3, #1
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ca2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4956      	ldr	r1, [pc, #344]	; (8001e04 <HAL_I2C_Init+0x25c>)
 8001cac:	428b      	cmp	r3, r1
 8001cae:	d80d      	bhi.n	8001ccc <HAL_I2C_Init+0x124>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1e59      	subs	r1, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	bf38      	it	cc
 8001cc8:	2304      	movcc	r3, #4
 8001cca:	e04f      	b.n	8001d6c <HAL_I2C_Init+0x1c4>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d111      	bne.n	8001cf8 <HAL_I2C_Init+0x150>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1e58      	subs	r0, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6859      	ldr	r1, [r3, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	440b      	add	r3, r1
 8001ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf0c      	ite	eq
 8001cf0:	2301      	moveq	r3, #1
 8001cf2:	2300      	movne	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	e012      	b.n	8001d1e <HAL_I2C_Init+0x176>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e58      	subs	r0, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	0099      	lsls	r1, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Init+0x17e>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e022      	b.n	8001d6c <HAL_I2C_Init+0x1c4>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10e      	bne.n	8001d4c <HAL_I2C_Init+0x1a4>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1e58      	subs	r0, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6859      	ldr	r1, [r3, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	440b      	add	r3, r1
 8001d3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4a:	e00f      	b.n	8001d6c <HAL_I2C_Init+0x1c4>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1e58      	subs	r0, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	0099      	lsls	r1, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	6809      	ldr	r1, [r1, #0]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6911      	ldr	r1, [r2, #16]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68d2      	ldr	r2, [r2, #12]
 8001da6:	4311      	orrs	r1, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	430b      	orrs	r3, r1
 8001dae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	000186a0 	.word	0x000186a0
 8001e08:	001e847f 	.word	0x001e847f
 8001e0c:	003d08ff 	.word	0x003d08ff
 8001e10:	431bde83 	.word	0x431bde83
 8001e14:	10624dd3 	.word	0x10624dd3

08001e18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	461a      	mov	r2, r3
 8001e24:	460b      	mov	r3, r1
 8001e26:	817b      	strh	r3, [r7, #10]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff fc3e 	bl	80016ac <HAL_GetTick>
 8001e30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	f040 80e0 	bne.w	8002000 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2319      	movs	r3, #25
 8001e46:	2201      	movs	r2, #1
 8001e48:	4970      	ldr	r1, [pc, #448]	; (800200c <HAL_I2C_Master_Transmit+0x1f4>)
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 fc8c 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e56:	2302      	movs	r3, #2
 8001e58:	e0d3      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_I2C_Master_Transmit+0x50>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e0cc      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d007      	beq.n	8001e8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2221      	movs	r2, #33	; 0x21
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	893a      	ldrh	r2, [r7, #8]
 8001ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4a50      	ldr	r2, [pc, #320]	; (8002010 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ed0:	8979      	ldrh	r1, [r7, #10]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 faf6 	bl	80024c8 <I2C_MasterRequestWrite>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e08d      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001efc:	e066      	b.n	8001fcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	6a39      	ldr	r1, [r7, #32]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fd06 	bl	8002914 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00d      	beq.n	8001f2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d107      	bne.n	8001f26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e06b      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d11b      	bne.n	8001fa0 <HAL_I2C_Master_Transmit+0x188>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d017      	beq.n	8001fa0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	6a39      	ldr	r1, [r7, #32]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fcf6 	bl	8002996 <I2C_WaitOnBTFFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00d      	beq.n	8001fcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d107      	bne.n	8001fc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e01a      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d194      	bne.n	8001efe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e000      	b.n	8002002 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002000:	2302      	movs	r3, #2
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	00100002 	.word	0x00100002
 8002010:	ffff0000 	.word	0xffff0000

08002014 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08c      	sub	sp, #48	; 0x30
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	461a      	mov	r2, r3
 8002020:	460b      	mov	r3, r1
 8002022:	817b      	strh	r3, [r7, #10]
 8002024:	4613      	mov	r3, r2
 8002026:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800202c:	f7ff fb3e 	bl	80016ac <HAL_GetTick>
 8002030:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b20      	cmp	r3, #32
 800203c:	f040 8238 	bne.w	80024b0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2319      	movs	r3, #25
 8002046:	2201      	movs	r2, #1
 8002048:	497e      	ldr	r1, [pc, #504]	; (8002244 <HAL_I2C_Master_Receive+0x230>)
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fb8c 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002056:	2302      	movs	r3, #2
 8002058:	e22b      	b.n	80024b2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_I2C_Master_Receive+0x54>
 8002064:	2302      	movs	r3, #2
 8002066:	e224      	b.n	80024b2 <HAL_I2C_Master_Receive+0x49e>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d007      	beq.n	800208e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0201 	orr.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2222      	movs	r2, #34	; 0x22
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2210      	movs	r2, #16
 80020aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	893a      	ldrh	r2, [r7, #8]
 80020be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4a5e      	ldr	r2, [pc, #376]	; (8002248 <HAL_I2C_Master_Receive+0x234>)
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020d0:	8979      	ldrh	r1, [r7, #10]
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fa78 	bl	80025cc <I2C_MasterRequestRead>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1e5      	b.n	80024b2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d113      	bne.n	8002116 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e1b9      	b.n	800248a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	2b01      	cmp	r3, #1
 800211c:	d11d      	bne.n	800215a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800212e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002130:	2300      	movs	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002154:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002156:	b662      	cpsie	i
 8002158:	e197      	b.n	800248a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	2b02      	cmp	r3, #2
 8002160:	d11d      	bne.n	800219e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002170:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002172:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002198:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800219a:	b662      	cpsie	i
 800219c:	e175      	b.n	800248a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80021c4:	e161      	b.n	800248a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	f200 811a 	bhi.w	8002404 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d123      	bne.n	8002220 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fc1b 	bl	8002a18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e162      	b.n	80024b2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800221e:	e134      	b.n	800248a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	2b02      	cmp	r3, #2
 8002226:	d150      	bne.n	80022ca <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	2200      	movs	r2, #0
 8002230:	4906      	ldr	r1, [pc, #24]	; (800224c <HAL_I2C_Master_Receive+0x238>)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fa98 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e137      	b.n	80024b2 <HAL_I2C_Master_Receive+0x49e>
 8002242:	bf00      	nop
 8002244:	00100002 	.word	0x00100002
 8002248:	ffff0000 	.word	0xffff0000
 800224c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002250:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002260:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002294:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022c8:	e0df      	b.n	800248a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	2200      	movs	r2, #0
 80022d2:	497a      	ldr	r1, [pc, #488]	; (80024bc <HAL_I2C_Master_Receive+0x4a8>)
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fa47 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0e6      	b.n	80024b2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022f4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002328:	4b65      	ldr	r3, [pc, #404]	; (80024c0 <HAL_I2C_Master_Receive+0x4ac>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	08db      	lsrs	r3, r3, #3
 800232e:	4a65      	ldr	r2, [pc, #404]	; (80024c4 <HAL_I2C_Master_Receive+0x4b0>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	0a1a      	lsrs	r2, r3, #8
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00da      	lsls	r2, r3, #3
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	3b01      	subs	r3, #1
 8002346:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d117      	bne.n	800237e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002370:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e099      	b.n	80024b2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b04      	cmp	r3, #4
 800238a:	d1da      	bne.n	8002342 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023ce:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002402:	e042      	b.n	800248a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fb05 	bl	8002a18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e04c      	b.n	80024b2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b04      	cmp	r3, #4
 8002456:	d118      	bne.n	800248a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	2b00      	cmp	r3, #0
 8002490:	f47f ae99 	bne.w	80021c6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	00010004 	.word	0x00010004
 80024c0:	20000000 	.word	0x20000000
 80024c4:	14f8b589 	.word	0x14f8b589

080024c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	460b      	mov	r3, r1
 80024d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d006      	beq.n	80024f2 <I2C_MasterRequestWrite+0x2a>
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d003      	beq.n	80024f2 <I2C_MasterRequestWrite+0x2a>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024f0:	d108      	bne.n	8002504 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e00b      	b.n	800251c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	2b12      	cmp	r3, #18
 800250a:	d107      	bne.n	800251c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f91d 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00d      	beq.n	8002550 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002542:	d103      	bne.n	800254c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e035      	b.n	80025bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002558:	d108      	bne.n	800256c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800255a:	897b      	ldrh	r3, [r7, #10]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	e01b      	b.n	80025a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800256c:	897b      	ldrh	r3, [r7, #10]
 800256e:	11db      	asrs	r3, r3, #7
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f003 0306 	and.w	r3, r3, #6
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f063 030f 	orn	r3, r3, #15
 800257c:	b2da      	uxtb	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	490e      	ldr	r1, [pc, #56]	; (80025c4 <I2C_MasterRequestWrite+0xfc>)
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f943 	bl	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e010      	b.n	80025bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800259a:	897b      	ldrh	r3, [r7, #10]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <I2C_MasterRequestWrite+0x100>)
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f933 	bl	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	00010008 	.word	0x00010008
 80025c8:	00010002 	.word	0x00010002

080025cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	460b      	mov	r3, r1
 80025da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d006      	beq.n	8002606 <I2C_MasterRequestRead+0x3a>
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d003      	beq.n	8002606 <I2C_MasterRequestRead+0x3a>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002604:	d108      	bne.n	8002618 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e00b      	b.n	8002630 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	2b11      	cmp	r3, #17
 800261e:	d107      	bne.n	8002630 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f893 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002656:	d103      	bne.n	8002660 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e079      	b.n	8002758 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800266c:	d108      	bne.n	8002680 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	e05f      	b.n	8002740 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	11db      	asrs	r3, r3, #7
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 0306 	and.w	r3, r3, #6
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f063 030f 	orn	r3, r3, #15
 8002690:	b2da      	uxtb	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4930      	ldr	r1, [pc, #192]	; (8002760 <I2C_MasterRequestRead+0x194>)
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f8b9 	bl	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e054      	b.n	8002758 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026ae:	897b      	ldrh	r3, [r7, #10]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4929      	ldr	r1, [pc, #164]	; (8002764 <I2C_MasterRequestRead+0x198>)
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f8a9 	bl	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e044      	b.n	8002758 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f831 	bl	8002768 <I2C_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800271a:	d103      	bne.n	8002724 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e017      	b.n	8002758 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002728:	897b      	ldrh	r3, [r7, #10]
 800272a:	11db      	asrs	r3, r3, #7
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 0306 	and.w	r3, r3, #6
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f063 030e 	orn	r3, r3, #14
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4907      	ldr	r1, [pc, #28]	; (8002764 <I2C_MasterRequestRead+0x198>)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f865 	bl	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	00010008 	.word	0x00010008
 8002764:	00010002 	.word	0x00010002

08002768 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002778:	e025      	b.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d021      	beq.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002782:	f7fe ff93 	bl	80016ac <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d302      	bcc.n	8002798 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d116      	bne.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f043 0220 	orr.w	r2, r3, #32
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e023      	b.n	800280e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d10d      	bne.n	80027ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4013      	ands	r3, r2
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	e00c      	b.n	8002806 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4013      	ands	r3, r2
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bf0c      	ite	eq
 80027fe:	2301      	moveq	r3, #1
 8002800:	2300      	movne	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	429a      	cmp	r2, r3
 800280a:	d0b6      	beq.n	800277a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002824:	e051      	b.n	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002834:	d123      	bne.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002844:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800284e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f043 0204 	orr.w	r2, r3, #4
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e046      	b.n	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d021      	beq.n	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002886:	f7fe ff11 	bl	80016ac <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	d302      	bcc.n	800289c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d116      	bne.n	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f043 0220 	orr.w	r2, r3, #32
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e020      	b.n	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d10c      	bne.n	80028ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4013      	ands	r3, r2
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	e00b      	b.n	8002906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	43da      	mvns	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4013      	ands	r3, r2
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d18d      	bne.n	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002920:	e02d      	b.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f8ce 	bl	8002ac4 <I2C_IsAcknowledgeFailed>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e02d      	b.n	800298e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d021      	beq.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293a:	f7fe feb7 	bl	80016ac <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	429a      	cmp	r2, r3
 8002948:	d302      	bcc.n	8002950 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d116      	bne.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e007      	b.n	800298e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d1ca      	bne.n	8002922 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029a2:	e02d      	b.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f88d 	bl	8002ac4 <I2C_IsAcknowledgeFailed>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e02d      	b.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d021      	beq.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029bc:	f7fe fe76 	bl	80016ac <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d302      	bcc.n	80029d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e007      	b.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d1ca      	bne.n	80029a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a24:	e042      	b.n	8002aac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d119      	bne.n	8002a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0210 	mvn.w	r2, #16
 8002a3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e029      	b.n	8002abc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a68:	f7fe fe20 	bl	80016ac <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d302      	bcc.n	8002a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d116      	bne.n	8002aac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e007      	b.n	8002abc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d1b5      	bne.n	8002a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ada:	d11b      	bne.n	8002b14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ae4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f043 0204 	orr.w	r2, r3, #4
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e26c      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8087 	beq.w	8002c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b40:	4b92      	ldr	r3, [pc, #584]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d00c      	beq.n	8002b66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b4c:	4b8f      	ldr	r3, [pc, #572]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d112      	bne.n	8002b7e <HAL_RCC_OscConfig+0x5e>
 8002b58:	4b8c      	ldr	r3, [pc, #560]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b64:	d10b      	bne.n	8002b7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b66:	4b89      	ldr	r3, [pc, #548]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d06c      	beq.n	8002c4c <HAL_RCC_OscConfig+0x12c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d168      	bne.n	8002c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e246      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b86:	d106      	bne.n	8002b96 <HAL_RCC_OscConfig+0x76>
 8002b88:	4b80      	ldr	r3, [pc, #512]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a7f      	ldr	r2, [pc, #508]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	e02e      	b.n	8002bf4 <HAL_RCC_OscConfig+0xd4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x98>
 8002b9e:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a7a      	ldr	r2, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b78      	ldr	r3, [pc, #480]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a77      	ldr	r2, [pc, #476]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e01d      	b.n	8002bf4 <HAL_RCC_OscConfig+0xd4>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCC_OscConfig+0xbc>
 8002bc2:	4b72      	ldr	r3, [pc, #456]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a71      	ldr	r2, [pc, #452]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b6f      	ldr	r3, [pc, #444]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6e      	ldr	r2, [pc, #440]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCC_OscConfig+0xd4>
 8002bdc:	4b6b      	ldr	r3, [pc, #428]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6a      	ldr	r2, [pc, #424]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a67      	ldr	r2, [pc, #412]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fd56 	bl	80016ac <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe fd52 	bl	80016ac <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e1fa      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	4b5d      	ldr	r3, [pc, #372]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0xe4>
 8002c22:	e014      	b.n	8002c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe fd42 	bl	80016ac <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7fe fd3e 	bl	80016ac <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e1e6      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x10c>
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d063      	beq.n	8002d22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c5a:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c66:	4b49      	ldr	r3, [pc, #292]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d11c      	bne.n	8002cac <HAL_RCC_OscConfig+0x18c>
 8002c72:	4b46      	ldr	r3, [pc, #280]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d116      	bne.n	8002cac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	4b43      	ldr	r3, [pc, #268]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x176>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e1ba      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4939      	ldr	r1, [pc, #228]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	e03a      	b.n	8002d22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb4:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe fcf7 	bl	80016ac <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fcf3 	bl	80016ac <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e19b      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4927      	ldr	r1, [pc, #156]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
 8002cf4:	e015      	b.n	8002d22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <HAL_RCC_OscConfig+0x270>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fcd6 	bl	80016ac <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe fcd2 	bl	80016ac <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e17a      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d03a      	beq.n	8002da4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d019      	beq.n	8002d6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fcb6 	bl	80016ac <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d44:	f7fe fcb2 	bl	80016ac <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e15a      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_RCC_OscConfig+0x26c>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d62:	2001      	movs	r0, #1
 8002d64:	f000 fb0a 	bl	800337c <RCC_Delay>
 8002d68:	e01c      	b.n	8002da4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d70:	f7fe fc9c 	bl	80016ac <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d76:	e00f      	b.n	8002d98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d78:	f7fe fc98 	bl	80016ac <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d908      	bls.n	8002d98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e140      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	42420000 	.word	0x42420000
 8002d94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	4b9e      	ldr	r3, [pc, #632]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e9      	bne.n	8002d78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a6 	beq.w	8002efe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db2:	2300      	movs	r3, #0
 8002db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db6:	4b97      	ldr	r3, [pc, #604]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10d      	bne.n	8002dde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	4b94      	ldr	r3, [pc, #592]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4a93      	ldr	r2, [pc, #588]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	61d3      	str	r3, [r2, #28]
 8002dce:	4b91      	ldr	r3, [pc, #580]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	4b8e      	ldr	r3, [pc, #568]	; (8003018 <HAL_RCC_OscConfig+0x4f8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d118      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dea:	4b8b      	ldr	r3, [pc, #556]	; (8003018 <HAL_RCC_OscConfig+0x4f8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a8a      	ldr	r2, [pc, #552]	; (8003018 <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df6:	f7fe fc59 	bl	80016ac <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfe:	f7fe fc55 	bl	80016ac <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b64      	cmp	r3, #100	; 0x64
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0fd      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	4b81      	ldr	r3, [pc, #516]	; (8003018 <HAL_RCC_OscConfig+0x4f8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_OscConfig+0x312>
 8002e24:	4b7b      	ldr	r3, [pc, #492]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a7a      	ldr	r2, [pc, #488]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6213      	str	r3, [r2, #32]
 8002e30:	e02d      	b.n	8002e8e <HAL_RCC_OscConfig+0x36e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x334>
 8002e3a:	4b76      	ldr	r3, [pc, #472]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4a75      	ldr	r2, [pc, #468]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6213      	str	r3, [r2, #32]
 8002e46:	4b73      	ldr	r3, [pc, #460]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4a72      	ldr	r2, [pc, #456]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	f023 0304 	bic.w	r3, r3, #4
 8002e50:	6213      	str	r3, [r2, #32]
 8002e52:	e01c      	b.n	8002e8e <HAL_RCC_OscConfig+0x36e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d10c      	bne.n	8002e76 <HAL_RCC_OscConfig+0x356>
 8002e5c:	4b6d      	ldr	r3, [pc, #436]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	4a6c      	ldr	r2, [pc, #432]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e62:	f043 0304 	orr.w	r3, r3, #4
 8002e66:	6213      	str	r3, [r2, #32]
 8002e68:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4a69      	ldr	r2, [pc, #420]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	e00b      	b.n	8002e8e <HAL_RCC_OscConfig+0x36e>
 8002e76:	4b67      	ldr	r3, [pc, #412]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4a66      	ldr	r2, [pc, #408]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6213      	str	r3, [r2, #32]
 8002e82:	4b64      	ldr	r3, [pc, #400]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4a63      	ldr	r2, [pc, #396]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d015      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7fe fc09 	bl	80016ac <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fe fc05 	bl	80016ac <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e0ab      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	4b57      	ldr	r3, [pc, #348]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0ee      	beq.n	8002e9e <HAL_RCC_OscConfig+0x37e>
 8002ec0:	e014      	b.n	8002eec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fbf3 	bl	80016ac <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fe fbef 	bl	80016ac <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e095      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	4b4c      	ldr	r3, [pc, #304]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ee      	bne.n	8002eca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d105      	bne.n	8002efe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef2:	4b48      	ldr	r3, [pc, #288]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4a47      	ldr	r2, [pc, #284]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8081 	beq.w	800300a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f08:	4b42      	ldr	r3, [pc, #264]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d061      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d146      	bne.n	8002faa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_RCC_OscConfig+0x4fc>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fe fbc3 	bl	80016ac <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe fbbf 	bl	80016ac <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e067      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3c:	4b35      	ldr	r3, [pc, #212]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f50:	d108      	bne.n	8002f64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f52:	4b30      	ldr	r3, [pc, #192]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	492d      	ldr	r1, [pc, #180]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f64:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a19      	ldr	r1, [r3, #32]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	430b      	orrs	r3, r1
 8002f76:	4927      	ldr	r1, [pc, #156]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <HAL_RCC_OscConfig+0x4fc>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe fb93 	bl	80016ac <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe fb8f 	bl	80016ac <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e037      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x46a>
 8002fa8:	e02f      	b.n	800300a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <HAL_RCC_OscConfig+0x4fc>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fb7c 	bl	80016ac <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe fb78 	bl	80016ac <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e020      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x498>
 8002fd6:	e018      	b.n	800300a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e013      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_OscConfig+0x4f4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d001      	beq.n	800300a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	40007000 	.word	0x40007000
 800301c:	42420060 	.word	0x42420060

08003020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0d0      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d910      	bls.n	8003064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0207 	bic.w	r2, r3, #7
 800304a:	4965      	ldr	r1, [pc, #404]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b63      	ldr	r3, [pc, #396]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b8      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800307c:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a58      	ldr	r2, [pc, #352]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003086:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003094:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a52      	ldr	r2, [pc, #328]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800309e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a0:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	494d      	ldr	r1, [pc, #308]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d040      	beq.n	8003140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d115      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e073      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06b      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fe:	4b39      	ldr	r3, [pc, #228]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4936      	ldr	r1, [pc, #216]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003110:	f7fe facc 	bl	80016ac <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	e00a      	b.n	800312e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	f7fe fac8 	bl	80016ac <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e053      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 020c 	and.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	429a      	cmp	r2, r3
 800313e:	d1eb      	bne.n	8003118 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d210      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 0207 	bic.w	r2, r3, #7
 8003156:	4922      	ldr	r1, [pc, #136]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e032      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4916      	ldr	r1, [pc, #88]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	490e      	ldr	r1, [pc, #56]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ae:	f000 f821 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80031b2:	4601      	mov	r1, r0
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	5cd3      	ldrb	r3, [r2, r3]
 80031c2:	fa21 f303 	lsr.w	r3, r1, r3
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_RCC_ClockConfig+0x1cc>)
 80031c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1d0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd fe24 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40022000 	.word	0x40022000
 80031e4:	40021000 	.word	0x40021000
 80031e8:	080044d0 	.word	0x080044d0
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000008 	.word	0x20000008

080031f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b490      	push	{r4, r7}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031fa:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031fc:	1d3c      	adds	r4, r7, #4
 80031fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b04      	cmp	r3, #4
 800322c:	d002      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x40>
 800322e:	2b08      	cmp	r3, #8
 8003230:	d003      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0x46>
 8003232:	e02d      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003234:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003236:	623b      	str	r3, [r7, #32]
      break;
 8003238:	e02d      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	0c9b      	lsrs	r3, r3, #18
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003246:	4413      	add	r3, r2
 8003248:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800324c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0c5b      	lsrs	r3, r3, #17
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003266:	4413      	add	r3, r2
 8003268:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800326c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003272:	fb02 f203 	mul.w	r2, r2, r3
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
 800327e:	e004      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	623b      	str	r3, [r7, #32]
      break;
 800328e:	e002      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003292:	623b      	str	r3, [r7, #32]
      break;
 8003294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003296:	6a3b      	ldr	r3, [r7, #32]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3728      	adds	r7, #40	; 0x28
 800329c:	46bd      	mov	sp, r7
 800329e:	bc90      	pop	{r4, r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	080044bc 	.word	0x080044bc
 80032a8:	080044cc 	.word	0x080044cc
 80032ac:	40021000 	.word	0x40021000
 80032b0:	007a1200 	.word	0x007a1200
 80032b4:	003d0900 	.word	0x003d0900

080032b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032bc:	4b02      	ldr	r3, [pc, #8]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	20000000 	.word	0x20000000

080032cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d0:	f7ff fff2 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80032d4:	4601      	mov	r1, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	0a1b      	lsrs	r3, r3, #8
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4a03      	ldr	r2, [pc, #12]	; (80032f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e2:	5cd3      	ldrb	r3, [r2, r3]
 80032e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	080044e0 	.word	0x080044e0

080032f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032f8:	f7ff ffde 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80032fc:	4601      	mov	r1, r0
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	0adb      	lsrs	r3, r3, #11
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4a03      	ldr	r2, [pc, #12]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021000 	.word	0x40021000
 8003318:	080044e0 	.word	0x080044e0

0800331c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	220f      	movs	r2, #15
 800332a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_RCC_GetClockConfig+0x58>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0203 	and.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_RCC_GetClockConfig+0x58>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCC_GetClockConfig+0x58>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003350:	4b08      	ldr	r3, [pc, #32]	; (8003374 <HAL_RCC_GetClockConfig+0x58>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	08db      	lsrs	r3, r3, #3
 8003356:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40021000 	.word	0x40021000
 8003378:	40022000 	.word	0x40022000

0800337c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <RCC_Delay+0x34>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <RCC_Delay+0x38>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0a5b      	lsrs	r3, r3, #9
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003398:	bf00      	nop
  }
  while (Delay --);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1e5a      	subs	r2, r3, #1
 800339e:	60fa      	str	r2, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f9      	bne.n	8003398 <RCC_Delay+0x1c>
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000000 	.word	0x20000000
 80033b4:	10624dd3 	.word	0x10624dd3

080033b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e041      	b.n	800344e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f839 	bl	8003456 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 f9b4 	bl	8003764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d001      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e03a      	b.n	80034f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_TIM_Base_Start_IT+0x98>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00e      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x58>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d009      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x58>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a14      	ldr	r2, [pc, #80]	; (8003504 <HAL_TIM_Base_Start_IT+0x9c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x58>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a13      	ldr	r2, [pc, #76]	; (8003508 <HAL_TIM_Base_Start_IT+0xa0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d111      	bne.n	80034e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d010      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e2:	e007      	b.n	80034f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800

0800350c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b02      	cmp	r3, #2
 8003520:	d122      	bne.n	8003568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b02      	cmp	r3, #2
 800352e:	d11b      	bne.n	8003568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0202 	mvn.w	r2, #2
 8003538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f8ed 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 8003554:	e005      	b.n	8003562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8e0 	bl	800371c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f8ef 	bl	8003740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b04      	cmp	r3, #4
 8003574:	d122      	bne.n	80035bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b04      	cmp	r3, #4
 8003582:	d11b      	bne.n	80035bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0204 	mvn.w	r2, #4
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8c3 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f8b6 	bl	800371c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f8c5 	bl	8003740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d122      	bne.n	8003610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d11b      	bne.n	8003610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0208 	mvn.w	r2, #8
 80035e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2204      	movs	r2, #4
 80035e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f899 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 80035fc:	e005      	b.n	800360a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f88c 	bl	800371c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f89b 	bl	8003740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b10      	cmp	r3, #16
 800361c:	d122      	bne.n	8003664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b10      	cmp	r3, #16
 800362a:	d11b      	bne.n	8003664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0210 	mvn.w	r2, #16
 8003634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2208      	movs	r2, #8
 800363a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f86f 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f862 	bl	800371c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f871 	bl	8003740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d10e      	bne.n	8003690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0201 	mvn.w	r2, #1
 8003688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd faf2 	bl	8000c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	2b80      	cmp	r3, #128	; 0x80
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8bf 	bl	800383a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f835 	bl	8003752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d10e      	bne.n	8003714 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b20      	cmp	r3, #32
 8003702:	d107      	bne.n	8003714 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0220 	mvn.w	r2, #32
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f88a 	bl	8003828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a29      	ldr	r2, [pc, #164]	; (800381c <TIM_Base_SetConfig+0xb8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00b      	beq.n	8003794 <TIM_Base_SetConfig+0x30>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003782:	d007      	beq.n	8003794 <TIM_Base_SetConfig+0x30>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a26      	ldr	r2, [pc, #152]	; (8003820 <TIM_Base_SetConfig+0xbc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_Base_SetConfig+0x30>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a25      	ldr	r2, [pc, #148]	; (8003824 <TIM_Base_SetConfig+0xc0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d108      	bne.n	80037a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	; (800381c <TIM_Base_SetConfig+0xb8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <TIM_Base_SetConfig+0x62>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b4:	d007      	beq.n	80037c6 <TIM_Base_SetConfig+0x62>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <TIM_Base_SetConfig+0xbc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d003      	beq.n	80037c6 <TIM_Base_SetConfig+0x62>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a18      	ldr	r2, [pc, #96]	; (8003824 <TIM_Base_SetConfig+0xc0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d108      	bne.n	80037d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a07      	ldr	r2, [pc, #28]	; (800381c <TIM_Base_SetConfig+0xb8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d103      	bne.n	800380c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	615a      	str	r2, [r3, #20]
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800

08003828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e03f      	b.n	80038de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd fa88 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	; 0x24
 800387c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800388e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f905 	bl	8003aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b08a      	sub	sp, #40	; 0x28
 80038ea:	af02      	add	r7, sp, #8
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b20      	cmp	r3, #32
 8003904:	d17c      	bne.n	8003a00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_UART_Transmit+0x2c>
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e075      	b.n	8003a02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_UART_Transmit+0x3e>
 8003920:	2302      	movs	r3, #2
 8003922:	e06e      	b.n	8003a02 <HAL_UART_Transmit+0x11c>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2221      	movs	r2, #33	; 0x21
 8003936:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800393a:	f7fd feb7 	bl	80016ac <HAL_GetTick>
 800393e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	88fa      	ldrh	r2, [r7, #6]
 800394a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003954:	d108      	bne.n	8003968 <HAL_UART_Transmit+0x82>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e003      	b.n	8003970 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003978:	e02a      	b.n	80039d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2200      	movs	r2, #0
 8003982:	2180      	movs	r1, #128	; 0x80
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f840 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e036      	b.n	8003a02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	3302      	adds	r3, #2
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e007      	b.n	80039c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	3301      	adds	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1cf      	bne.n	800397a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2140      	movs	r1, #64	; 0x40
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f810 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e006      	b.n	8003a02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1a:	e02c      	b.n	8003a76 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d028      	beq.n	8003a76 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a2a:	f7fd fe3f 	bl	80016ac <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d21d      	bcs.n	8003a76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a48:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e00f      	b.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	bf0c      	ite	eq
 8003a86:	2301      	moveq	r3, #1
 8003a88:	2300      	movne	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d0c3      	beq.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ada:	f023 030c 	bic.w	r3, r3, #12
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2c      	ldr	r2, [pc, #176]	; (8003bb4 <UART_SetConfig+0x114>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d103      	bne.n	8003b10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b08:	f7ff fbf4 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	e002      	b.n	8003b16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b10:	f7ff fbdc 	bl	80032cc <HAL_RCC_GetPCLK1Freq>
 8003b14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009a      	lsls	r2, r3, #2
 8003b20:	441a      	add	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <UART_SetConfig+0x118>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	0119      	lsls	r1, r3, #4
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009a      	lsls	r2, r3, #2
 8003b40:	441a      	add	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <UART_SetConfig+0x118>)
 8003b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2064      	movs	r0, #100	; 0x64
 8003b56:	fb00 f303 	mul.w	r3, r0, r3
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	3332      	adds	r3, #50	; 0x32
 8003b60:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <UART_SetConfig+0x118>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6c:	4419      	add	r1, r3
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	009a      	lsls	r2, r3, #2
 8003b78:	441a      	add	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <UART_SetConfig+0x118>)
 8003b86:	fba3 0302 	umull	r0, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2064      	movs	r0, #100	; 0x64
 8003b8e:	fb00 f303 	mul.w	r3, r0, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	3332      	adds	r3, #50	; 0x32
 8003b98:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <UART_SetConfig+0x118>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	f003 020f 	and.w	r2, r3, #15
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	440a      	add	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	51eb851f 	.word	0x51eb851f

08003bbc <__errno>:
 8003bbc:	4b01      	ldr	r3, [pc, #4]	; (8003bc4 <__errno+0x8>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000010 	.word	0x20000010

08003bc8 <__libc_init_array>:
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	2500      	movs	r5, #0
 8003bcc:	4e0c      	ldr	r6, [pc, #48]	; (8003c00 <__libc_init_array+0x38>)
 8003bce:	4c0d      	ldr	r4, [pc, #52]	; (8003c04 <__libc_init_array+0x3c>)
 8003bd0:	1ba4      	subs	r4, r4, r6
 8003bd2:	10a4      	asrs	r4, r4, #2
 8003bd4:	42a5      	cmp	r5, r4
 8003bd6:	d109      	bne.n	8003bec <__libc_init_array+0x24>
 8003bd8:	f000 fc48 	bl	800446c <_init>
 8003bdc:	2500      	movs	r5, #0
 8003bde:	4e0a      	ldr	r6, [pc, #40]	; (8003c08 <__libc_init_array+0x40>)
 8003be0:	4c0a      	ldr	r4, [pc, #40]	; (8003c0c <__libc_init_array+0x44>)
 8003be2:	1ba4      	subs	r4, r4, r6
 8003be4:	10a4      	asrs	r4, r4, #2
 8003be6:	42a5      	cmp	r5, r4
 8003be8:	d105      	bne.n	8003bf6 <__libc_init_array+0x2e>
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
 8003bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bf0:	4798      	blx	r3
 8003bf2:	3501      	adds	r5, #1
 8003bf4:	e7ee      	b.n	8003bd4 <__libc_init_array+0xc>
 8003bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bfa:	4798      	blx	r3
 8003bfc:	3501      	adds	r5, #1
 8003bfe:	e7f2      	b.n	8003be6 <__libc_init_array+0x1e>
 8003c00:	0800451c 	.word	0x0800451c
 8003c04:	0800451c 	.word	0x0800451c
 8003c08:	0800451c 	.word	0x0800451c
 8003c0c:	08004520 	.word	0x08004520

08003c10 <memset>:
 8003c10:	4603      	mov	r3, r0
 8003c12:	4402      	add	r2, r0
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d100      	bne.n	8003c1a <memset+0xa>
 8003c18:	4770      	bx	lr
 8003c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c1e:	e7f9      	b.n	8003c14 <memset+0x4>

08003c20 <sniprintf>:
 8003c20:	b40c      	push	{r2, r3}
 8003c22:	b530      	push	{r4, r5, lr}
 8003c24:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <sniprintf+0x64>)
 8003c26:	1e0c      	subs	r4, r1, #0
 8003c28:	b09d      	sub	sp, #116	; 0x74
 8003c2a:	681d      	ldr	r5, [r3, #0]
 8003c2c:	da08      	bge.n	8003c40 <sniprintf+0x20>
 8003c2e:	238b      	movs	r3, #139	; 0x8b
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	602b      	str	r3, [r5, #0]
 8003c36:	b01d      	add	sp, #116	; 0x74
 8003c38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c3c:	b002      	add	sp, #8
 8003c3e:	4770      	bx	lr
 8003c40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003c44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003c48:	bf0c      	ite	eq
 8003c4a:	4623      	moveq	r3, r4
 8003c4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003c50:	9304      	str	r3, [sp, #16]
 8003c52:	9307      	str	r3, [sp, #28]
 8003c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c58:	9002      	str	r0, [sp, #8]
 8003c5a:	9006      	str	r0, [sp, #24]
 8003c5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003c60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c62:	ab21      	add	r3, sp, #132	; 0x84
 8003c64:	a902      	add	r1, sp, #8
 8003c66:	4628      	mov	r0, r5
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	f000 f867 	bl	8003d3c <_svfiprintf_r>
 8003c6e:	1c43      	adds	r3, r0, #1
 8003c70:	bfbc      	itt	lt
 8003c72:	238b      	movlt	r3, #139	; 0x8b
 8003c74:	602b      	strlt	r3, [r5, #0]
 8003c76:	2c00      	cmp	r4, #0
 8003c78:	d0dd      	beq.n	8003c36 <sniprintf+0x16>
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	9b02      	ldr	r3, [sp, #8]
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e7d9      	b.n	8003c36 <sniprintf+0x16>
 8003c82:	bf00      	nop
 8003c84:	20000010 	.word	0x20000010

08003c88 <__ssputs_r>:
 8003c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c8c:	688e      	ldr	r6, [r1, #8]
 8003c8e:	4682      	mov	sl, r0
 8003c90:	429e      	cmp	r6, r3
 8003c92:	460c      	mov	r4, r1
 8003c94:	4690      	mov	r8, r2
 8003c96:	4699      	mov	r9, r3
 8003c98:	d837      	bhi.n	8003d0a <__ssputs_r+0x82>
 8003c9a:	898a      	ldrh	r2, [r1, #12]
 8003c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ca0:	d031      	beq.n	8003d06 <__ssputs_r+0x7e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	6825      	ldr	r5, [r4, #0]
 8003ca6:	6909      	ldr	r1, [r1, #16]
 8003ca8:	1a6f      	subs	r7, r5, r1
 8003caa:	6965      	ldr	r5, [r4, #20]
 8003cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cb0:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cb4:	f109 0301 	add.w	r3, r9, #1
 8003cb8:	443b      	add	r3, r7
 8003cba:	429d      	cmp	r5, r3
 8003cbc:	bf38      	it	cc
 8003cbe:	461d      	movcc	r5, r3
 8003cc0:	0553      	lsls	r3, r2, #21
 8003cc2:	d530      	bpl.n	8003d26 <__ssputs_r+0x9e>
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f000 fb37 	bl	8004338 <_malloc_r>
 8003cca:	4606      	mov	r6, r0
 8003ccc:	b950      	cbnz	r0, 8003ce4 <__ssputs_r+0x5c>
 8003cce:	230c      	movs	r3, #12
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	f8ca 3000 	str.w	r3, [sl]
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cde:	81a3      	strh	r3, [r4, #12]
 8003ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce4:	463a      	mov	r2, r7
 8003ce6:	6921      	ldr	r1, [r4, #16]
 8003ce8:	f000 fab6 	bl	8004258 <memcpy>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf6:	81a3      	strh	r3, [r4, #12]
 8003cf8:	6126      	str	r6, [r4, #16]
 8003cfa:	443e      	add	r6, r7
 8003cfc:	6026      	str	r6, [r4, #0]
 8003cfe:	464e      	mov	r6, r9
 8003d00:	6165      	str	r5, [r4, #20]
 8003d02:	1bed      	subs	r5, r5, r7
 8003d04:	60a5      	str	r5, [r4, #8]
 8003d06:	454e      	cmp	r6, r9
 8003d08:	d900      	bls.n	8003d0c <__ssputs_r+0x84>
 8003d0a:	464e      	mov	r6, r9
 8003d0c:	4632      	mov	r2, r6
 8003d0e:	4641      	mov	r1, r8
 8003d10:	6820      	ldr	r0, [r4, #0]
 8003d12:	f000 faac 	bl	800426e <memmove>
 8003d16:	68a3      	ldr	r3, [r4, #8]
 8003d18:	2000      	movs	r0, #0
 8003d1a:	1b9b      	subs	r3, r3, r6
 8003d1c:	60a3      	str	r3, [r4, #8]
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	441e      	add	r6, r3
 8003d22:	6026      	str	r6, [r4, #0]
 8003d24:	e7dc      	b.n	8003ce0 <__ssputs_r+0x58>
 8003d26:	462a      	mov	r2, r5
 8003d28:	f000 fb60 	bl	80043ec <_realloc_r>
 8003d2c:	4606      	mov	r6, r0
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d1e2      	bne.n	8003cf8 <__ssputs_r+0x70>
 8003d32:	6921      	ldr	r1, [r4, #16]
 8003d34:	4650      	mov	r0, sl
 8003d36:	f000 fab3 	bl	80042a0 <_free_r>
 8003d3a:	e7c8      	b.n	8003cce <__ssputs_r+0x46>

08003d3c <_svfiprintf_r>:
 8003d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d40:	461d      	mov	r5, r3
 8003d42:	898b      	ldrh	r3, [r1, #12]
 8003d44:	b09d      	sub	sp, #116	; 0x74
 8003d46:	061f      	lsls	r7, r3, #24
 8003d48:	4680      	mov	r8, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	4616      	mov	r6, r2
 8003d4e:	d50f      	bpl.n	8003d70 <_svfiprintf_r+0x34>
 8003d50:	690b      	ldr	r3, [r1, #16]
 8003d52:	b96b      	cbnz	r3, 8003d70 <_svfiprintf_r+0x34>
 8003d54:	2140      	movs	r1, #64	; 0x40
 8003d56:	f000 faef 	bl	8004338 <_malloc_r>
 8003d5a:	6020      	str	r0, [r4, #0]
 8003d5c:	6120      	str	r0, [r4, #16]
 8003d5e:	b928      	cbnz	r0, 8003d6c <_svfiprintf_r+0x30>
 8003d60:	230c      	movs	r3, #12
 8003d62:	f8c8 3000 	str.w	r3, [r8]
 8003d66:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6a:	e0c8      	b.n	8003efe <_svfiprintf_r+0x1c2>
 8003d6c:	2340      	movs	r3, #64	; 0x40
 8003d6e:	6163      	str	r3, [r4, #20]
 8003d70:	2300      	movs	r3, #0
 8003d72:	9309      	str	r3, [sp, #36]	; 0x24
 8003d74:	2320      	movs	r3, #32
 8003d76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d7a:	2330      	movs	r3, #48	; 0x30
 8003d7c:	f04f 0b01 	mov.w	fp, #1
 8003d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d84:	9503      	str	r5, [sp, #12]
 8003d86:	4637      	mov	r7, r6
 8003d88:	463d      	mov	r5, r7
 8003d8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d8e:	b10b      	cbz	r3, 8003d94 <_svfiprintf_r+0x58>
 8003d90:	2b25      	cmp	r3, #37	; 0x25
 8003d92:	d13e      	bne.n	8003e12 <_svfiprintf_r+0xd6>
 8003d94:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d98:	d00b      	beq.n	8003db2 <_svfiprintf_r+0x76>
 8003d9a:	4653      	mov	r3, sl
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	4621      	mov	r1, r4
 8003da0:	4640      	mov	r0, r8
 8003da2:	f7ff ff71 	bl	8003c88 <__ssputs_r>
 8003da6:	3001      	adds	r0, #1
 8003da8:	f000 80a4 	beq.w	8003ef4 <_svfiprintf_r+0x1b8>
 8003dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dae:	4453      	add	r3, sl
 8003db0:	9309      	str	r3, [sp, #36]	; 0x24
 8003db2:	783b      	ldrb	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 809d 	beq.w	8003ef4 <_svfiprintf_r+0x1b8>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dc4:	9304      	str	r3, [sp, #16]
 8003dc6:	9307      	str	r3, [sp, #28]
 8003dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8003dce:	462f      	mov	r7, r5
 8003dd0:	2205      	movs	r2, #5
 8003dd2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003dd6:	4850      	ldr	r0, [pc, #320]	; (8003f18 <_svfiprintf_r+0x1dc>)
 8003dd8:	f000 fa30 	bl	800423c <memchr>
 8003ddc:	9b04      	ldr	r3, [sp, #16]
 8003dde:	b9d0      	cbnz	r0, 8003e16 <_svfiprintf_r+0xda>
 8003de0:	06d9      	lsls	r1, r3, #27
 8003de2:	bf44      	itt	mi
 8003de4:	2220      	movmi	r2, #32
 8003de6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dea:	071a      	lsls	r2, r3, #28
 8003dec:	bf44      	itt	mi
 8003dee:	222b      	movmi	r2, #43	; 0x2b
 8003df0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003df4:	782a      	ldrb	r2, [r5, #0]
 8003df6:	2a2a      	cmp	r2, #42	; 0x2a
 8003df8:	d015      	beq.n	8003e26 <_svfiprintf_r+0xea>
 8003dfa:	462f      	mov	r7, r5
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	250a      	movs	r5, #10
 8003e00:	9a07      	ldr	r2, [sp, #28]
 8003e02:	4639      	mov	r1, r7
 8003e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e08:	3b30      	subs	r3, #48	; 0x30
 8003e0a:	2b09      	cmp	r3, #9
 8003e0c:	d94d      	bls.n	8003eaa <_svfiprintf_r+0x16e>
 8003e0e:	b1b8      	cbz	r0, 8003e40 <_svfiprintf_r+0x104>
 8003e10:	e00f      	b.n	8003e32 <_svfiprintf_r+0xf6>
 8003e12:	462f      	mov	r7, r5
 8003e14:	e7b8      	b.n	8003d88 <_svfiprintf_r+0x4c>
 8003e16:	4a40      	ldr	r2, [pc, #256]	; (8003f18 <_svfiprintf_r+0x1dc>)
 8003e18:	463d      	mov	r5, r7
 8003e1a:	1a80      	subs	r0, r0, r2
 8003e1c:	fa0b f000 	lsl.w	r0, fp, r0
 8003e20:	4318      	orrs	r0, r3
 8003e22:	9004      	str	r0, [sp, #16]
 8003e24:	e7d3      	b.n	8003dce <_svfiprintf_r+0x92>
 8003e26:	9a03      	ldr	r2, [sp, #12]
 8003e28:	1d11      	adds	r1, r2, #4
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	9103      	str	r1, [sp, #12]
 8003e2e:	2a00      	cmp	r2, #0
 8003e30:	db01      	blt.n	8003e36 <_svfiprintf_r+0xfa>
 8003e32:	9207      	str	r2, [sp, #28]
 8003e34:	e004      	b.n	8003e40 <_svfiprintf_r+0x104>
 8003e36:	4252      	negs	r2, r2
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	9207      	str	r2, [sp, #28]
 8003e3e:	9304      	str	r3, [sp, #16]
 8003e40:	783b      	ldrb	r3, [r7, #0]
 8003e42:	2b2e      	cmp	r3, #46	; 0x2e
 8003e44:	d10c      	bne.n	8003e60 <_svfiprintf_r+0x124>
 8003e46:	787b      	ldrb	r3, [r7, #1]
 8003e48:	2b2a      	cmp	r3, #42	; 0x2a
 8003e4a:	d133      	bne.n	8003eb4 <_svfiprintf_r+0x178>
 8003e4c:	9b03      	ldr	r3, [sp, #12]
 8003e4e:	3702      	adds	r7, #2
 8003e50:	1d1a      	adds	r2, r3, #4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	9203      	str	r2, [sp, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bfb8      	it	lt
 8003e5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e5e:	9305      	str	r3, [sp, #20]
 8003e60:	4d2e      	ldr	r5, [pc, #184]	; (8003f1c <_svfiprintf_r+0x1e0>)
 8003e62:	2203      	movs	r2, #3
 8003e64:	7839      	ldrb	r1, [r7, #0]
 8003e66:	4628      	mov	r0, r5
 8003e68:	f000 f9e8 	bl	800423c <memchr>
 8003e6c:	b138      	cbz	r0, 8003e7e <_svfiprintf_r+0x142>
 8003e6e:	2340      	movs	r3, #64	; 0x40
 8003e70:	1b40      	subs	r0, r0, r5
 8003e72:	fa03 f000 	lsl.w	r0, r3, r0
 8003e76:	9b04      	ldr	r3, [sp, #16]
 8003e78:	3701      	adds	r7, #1
 8003e7a:	4303      	orrs	r3, r0
 8003e7c:	9304      	str	r3, [sp, #16]
 8003e7e:	7839      	ldrb	r1, [r7, #0]
 8003e80:	2206      	movs	r2, #6
 8003e82:	4827      	ldr	r0, [pc, #156]	; (8003f20 <_svfiprintf_r+0x1e4>)
 8003e84:	1c7e      	adds	r6, r7, #1
 8003e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e8a:	f000 f9d7 	bl	800423c <memchr>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d038      	beq.n	8003f04 <_svfiprintf_r+0x1c8>
 8003e92:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <_svfiprintf_r+0x1e8>)
 8003e94:	bb13      	cbnz	r3, 8003edc <_svfiprintf_r+0x1a0>
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	3307      	adds	r3, #7
 8003e9a:	f023 0307 	bic.w	r3, r3, #7
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	9303      	str	r3, [sp, #12]
 8003ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea4:	444b      	add	r3, r9
 8003ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea8:	e76d      	b.n	8003d86 <_svfiprintf_r+0x4a>
 8003eaa:	fb05 3202 	mla	r2, r5, r2, r3
 8003eae:	2001      	movs	r0, #1
 8003eb0:	460f      	mov	r7, r1
 8003eb2:	e7a6      	b.n	8003e02 <_svfiprintf_r+0xc6>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	250a      	movs	r5, #10
 8003eb8:	4619      	mov	r1, r3
 8003eba:	3701      	adds	r7, #1
 8003ebc:	9305      	str	r3, [sp, #20]
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec4:	3a30      	subs	r2, #48	; 0x30
 8003ec6:	2a09      	cmp	r2, #9
 8003ec8:	d903      	bls.n	8003ed2 <_svfiprintf_r+0x196>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0c8      	beq.n	8003e60 <_svfiprintf_r+0x124>
 8003ece:	9105      	str	r1, [sp, #20]
 8003ed0:	e7c6      	b.n	8003e60 <_svfiprintf_r+0x124>
 8003ed2:	fb05 2101 	mla	r1, r5, r1, r2
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	4607      	mov	r7, r0
 8003eda:	e7f0      	b.n	8003ebe <_svfiprintf_r+0x182>
 8003edc:	ab03      	add	r3, sp, #12
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <_svfiprintf_r+0x1ec>)
 8003ee4:	a904      	add	r1, sp, #16
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	f3af 8000 	nop.w
 8003eec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ef0:	4681      	mov	r9, r0
 8003ef2:	d1d6      	bne.n	8003ea2 <_svfiprintf_r+0x166>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	065b      	lsls	r3, r3, #25
 8003ef8:	f53f af35 	bmi.w	8003d66 <_svfiprintf_r+0x2a>
 8003efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003efe:	b01d      	add	sp, #116	; 0x74
 8003f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f04:	ab03      	add	r3, sp, #12
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	4622      	mov	r2, r4
 8003f0a:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <_svfiprintf_r+0x1ec>)
 8003f0c:	a904      	add	r1, sp, #16
 8003f0e:	4640      	mov	r0, r8
 8003f10:	f000 f882 	bl	8004018 <_printf_i>
 8003f14:	e7ea      	b.n	8003eec <_svfiprintf_r+0x1b0>
 8003f16:	bf00      	nop
 8003f18:	080044e8 	.word	0x080044e8
 8003f1c:	080044ee 	.word	0x080044ee
 8003f20:	080044f2 	.word	0x080044f2
 8003f24:	00000000 	.word	0x00000000
 8003f28:	08003c89 	.word	0x08003c89

08003f2c <_printf_common>:
 8003f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f30:	4691      	mov	r9, r2
 8003f32:	461f      	mov	r7, r3
 8003f34:	688a      	ldr	r2, [r1, #8]
 8003f36:	690b      	ldr	r3, [r1, #16]
 8003f38:	4606      	mov	r6, r0
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	bfb8      	it	lt
 8003f3e:	4613      	movlt	r3, r2
 8003f40:	f8c9 3000 	str.w	r3, [r9]
 8003f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f48:	460c      	mov	r4, r1
 8003f4a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f4e:	b112      	cbz	r2, 8003f56 <_printf_common+0x2a>
 8003f50:	3301      	adds	r3, #1
 8003f52:	f8c9 3000 	str.w	r3, [r9]
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	0699      	lsls	r1, r3, #26
 8003f5a:	bf42      	ittt	mi
 8003f5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f60:	3302      	addmi	r3, #2
 8003f62:	f8c9 3000 	strmi.w	r3, [r9]
 8003f66:	6825      	ldr	r5, [r4, #0]
 8003f68:	f015 0506 	ands.w	r5, r5, #6
 8003f6c:	d107      	bne.n	8003f7e <_printf_common+0x52>
 8003f6e:	f104 0a19 	add.w	sl, r4, #25
 8003f72:	68e3      	ldr	r3, [r4, #12]
 8003f74:	f8d9 2000 	ldr.w	r2, [r9]
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	42ab      	cmp	r3, r5
 8003f7c:	dc29      	bgt.n	8003fd2 <_printf_common+0xa6>
 8003f7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f82:	6822      	ldr	r2, [r4, #0]
 8003f84:	3300      	adds	r3, #0
 8003f86:	bf18      	it	ne
 8003f88:	2301      	movne	r3, #1
 8003f8a:	0692      	lsls	r2, r2, #26
 8003f8c:	d42e      	bmi.n	8003fec <_printf_common+0xc0>
 8003f8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f92:	4639      	mov	r1, r7
 8003f94:	4630      	mov	r0, r6
 8003f96:	47c0      	blx	r8
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d021      	beq.n	8003fe0 <_printf_common+0xb4>
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	68e5      	ldr	r5, [r4, #12]
 8003fa0:	f003 0306 	and.w	r3, r3, #6
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	bf18      	it	ne
 8003fa8:	2500      	movne	r5, #0
 8003faa:	f8d9 2000 	ldr.w	r2, [r9]
 8003fae:	f04f 0900 	mov.w	r9, #0
 8003fb2:	bf08      	it	eq
 8003fb4:	1aad      	subeq	r5, r5, r2
 8003fb6:	68a3      	ldr	r3, [r4, #8]
 8003fb8:	6922      	ldr	r2, [r4, #16]
 8003fba:	bf08      	it	eq
 8003fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	bfc4      	itt	gt
 8003fc4:	1a9b      	subgt	r3, r3, r2
 8003fc6:	18ed      	addgt	r5, r5, r3
 8003fc8:	341a      	adds	r4, #26
 8003fca:	454d      	cmp	r5, r9
 8003fcc:	d11a      	bne.n	8004004 <_printf_common+0xd8>
 8003fce:	2000      	movs	r0, #0
 8003fd0:	e008      	b.n	8003fe4 <_printf_common+0xb8>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4652      	mov	r2, sl
 8003fd6:	4639      	mov	r1, r7
 8003fd8:	4630      	mov	r0, r6
 8003fda:	47c0      	blx	r8
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d103      	bne.n	8003fe8 <_printf_common+0xbc>
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe8:	3501      	adds	r5, #1
 8003fea:	e7c2      	b.n	8003f72 <_printf_common+0x46>
 8003fec:	2030      	movs	r0, #48	; 0x30
 8003fee:	18e1      	adds	r1, r4, r3
 8003ff0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ffa:	4422      	add	r2, r4
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004002:	e7c4      	b.n	8003f8e <_printf_common+0x62>
 8004004:	2301      	movs	r3, #1
 8004006:	4622      	mov	r2, r4
 8004008:	4639      	mov	r1, r7
 800400a:	4630      	mov	r0, r6
 800400c:	47c0      	blx	r8
 800400e:	3001      	adds	r0, #1
 8004010:	d0e6      	beq.n	8003fe0 <_printf_common+0xb4>
 8004012:	f109 0901 	add.w	r9, r9, #1
 8004016:	e7d8      	b.n	8003fca <_printf_common+0x9e>

08004018 <_printf_i>:
 8004018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800401c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004020:	460c      	mov	r4, r1
 8004022:	7e09      	ldrb	r1, [r1, #24]
 8004024:	b085      	sub	sp, #20
 8004026:	296e      	cmp	r1, #110	; 0x6e
 8004028:	4617      	mov	r7, r2
 800402a:	4606      	mov	r6, r0
 800402c:	4698      	mov	r8, r3
 800402e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004030:	f000 80b3 	beq.w	800419a <_printf_i+0x182>
 8004034:	d822      	bhi.n	800407c <_printf_i+0x64>
 8004036:	2963      	cmp	r1, #99	; 0x63
 8004038:	d036      	beq.n	80040a8 <_printf_i+0x90>
 800403a:	d80a      	bhi.n	8004052 <_printf_i+0x3a>
 800403c:	2900      	cmp	r1, #0
 800403e:	f000 80b9 	beq.w	80041b4 <_printf_i+0x19c>
 8004042:	2958      	cmp	r1, #88	; 0x58
 8004044:	f000 8083 	beq.w	800414e <_printf_i+0x136>
 8004048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800404c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004050:	e032      	b.n	80040b8 <_printf_i+0xa0>
 8004052:	2964      	cmp	r1, #100	; 0x64
 8004054:	d001      	beq.n	800405a <_printf_i+0x42>
 8004056:	2969      	cmp	r1, #105	; 0x69
 8004058:	d1f6      	bne.n	8004048 <_printf_i+0x30>
 800405a:	6820      	ldr	r0, [r4, #0]
 800405c:	6813      	ldr	r3, [r2, #0]
 800405e:	0605      	lsls	r5, r0, #24
 8004060:	f103 0104 	add.w	r1, r3, #4
 8004064:	d52a      	bpl.n	80040bc <_printf_i+0xa4>
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6011      	str	r1, [r2, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	da03      	bge.n	8004076 <_printf_i+0x5e>
 800406e:	222d      	movs	r2, #45	; 0x2d
 8004070:	425b      	negs	r3, r3
 8004072:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004076:	486f      	ldr	r0, [pc, #444]	; (8004234 <_printf_i+0x21c>)
 8004078:	220a      	movs	r2, #10
 800407a:	e039      	b.n	80040f0 <_printf_i+0xd8>
 800407c:	2973      	cmp	r1, #115	; 0x73
 800407e:	f000 809d 	beq.w	80041bc <_printf_i+0x1a4>
 8004082:	d808      	bhi.n	8004096 <_printf_i+0x7e>
 8004084:	296f      	cmp	r1, #111	; 0x6f
 8004086:	d020      	beq.n	80040ca <_printf_i+0xb2>
 8004088:	2970      	cmp	r1, #112	; 0x70
 800408a:	d1dd      	bne.n	8004048 <_printf_i+0x30>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	f043 0320 	orr.w	r3, r3, #32
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	e003      	b.n	800409e <_printf_i+0x86>
 8004096:	2975      	cmp	r1, #117	; 0x75
 8004098:	d017      	beq.n	80040ca <_printf_i+0xb2>
 800409a:	2978      	cmp	r1, #120	; 0x78
 800409c:	d1d4      	bne.n	8004048 <_printf_i+0x30>
 800409e:	2378      	movs	r3, #120	; 0x78
 80040a0:	4865      	ldr	r0, [pc, #404]	; (8004238 <_printf_i+0x220>)
 80040a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040a6:	e055      	b.n	8004154 <_printf_i+0x13c>
 80040a8:	6813      	ldr	r3, [r2, #0]
 80040aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ae:	1d19      	adds	r1, r3, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6011      	str	r1, [r2, #0]
 80040b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040b8:	2301      	movs	r3, #1
 80040ba:	e08c      	b.n	80041d6 <_printf_i+0x1be>
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040c2:	6011      	str	r1, [r2, #0]
 80040c4:	bf18      	it	ne
 80040c6:	b21b      	sxthne	r3, r3
 80040c8:	e7cf      	b.n	800406a <_printf_i+0x52>
 80040ca:	6813      	ldr	r3, [r2, #0]
 80040cc:	6825      	ldr	r5, [r4, #0]
 80040ce:	1d18      	adds	r0, r3, #4
 80040d0:	6010      	str	r0, [r2, #0]
 80040d2:	0628      	lsls	r0, r5, #24
 80040d4:	d501      	bpl.n	80040da <_printf_i+0xc2>
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	e002      	b.n	80040e0 <_printf_i+0xc8>
 80040da:	0668      	lsls	r0, r5, #25
 80040dc:	d5fb      	bpl.n	80040d6 <_printf_i+0xbe>
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	296f      	cmp	r1, #111	; 0x6f
 80040e2:	bf14      	ite	ne
 80040e4:	220a      	movne	r2, #10
 80040e6:	2208      	moveq	r2, #8
 80040e8:	4852      	ldr	r0, [pc, #328]	; (8004234 <_printf_i+0x21c>)
 80040ea:	2100      	movs	r1, #0
 80040ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040f0:	6865      	ldr	r5, [r4, #4]
 80040f2:	2d00      	cmp	r5, #0
 80040f4:	60a5      	str	r5, [r4, #8]
 80040f6:	f2c0 8095 	blt.w	8004224 <_printf_i+0x20c>
 80040fa:	6821      	ldr	r1, [r4, #0]
 80040fc:	f021 0104 	bic.w	r1, r1, #4
 8004100:	6021      	str	r1, [r4, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d13d      	bne.n	8004182 <_printf_i+0x16a>
 8004106:	2d00      	cmp	r5, #0
 8004108:	f040 808e 	bne.w	8004228 <_printf_i+0x210>
 800410c:	4665      	mov	r5, ip
 800410e:	2a08      	cmp	r2, #8
 8004110:	d10b      	bne.n	800412a <_printf_i+0x112>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	07db      	lsls	r3, r3, #31
 8004116:	d508      	bpl.n	800412a <_printf_i+0x112>
 8004118:	6923      	ldr	r3, [r4, #16]
 800411a:	6862      	ldr	r2, [r4, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	bfde      	ittt	le
 8004120:	2330      	movle	r3, #48	; 0x30
 8004122:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004126:	f105 35ff 	addle.w	r5, r5, #4294967295
 800412a:	ebac 0305 	sub.w	r3, ip, r5
 800412e:	6123      	str	r3, [r4, #16]
 8004130:	f8cd 8000 	str.w	r8, [sp]
 8004134:	463b      	mov	r3, r7
 8004136:	aa03      	add	r2, sp, #12
 8004138:	4621      	mov	r1, r4
 800413a:	4630      	mov	r0, r6
 800413c:	f7ff fef6 	bl	8003f2c <_printf_common>
 8004140:	3001      	adds	r0, #1
 8004142:	d14d      	bne.n	80041e0 <_printf_i+0x1c8>
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	b005      	add	sp, #20
 800414a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800414e:	4839      	ldr	r0, [pc, #228]	; (8004234 <_printf_i+0x21c>)
 8004150:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004154:	6813      	ldr	r3, [r2, #0]
 8004156:	6821      	ldr	r1, [r4, #0]
 8004158:	1d1d      	adds	r5, r3, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6015      	str	r5, [r2, #0]
 800415e:	060a      	lsls	r2, r1, #24
 8004160:	d50b      	bpl.n	800417a <_printf_i+0x162>
 8004162:	07ca      	lsls	r2, r1, #31
 8004164:	bf44      	itt	mi
 8004166:	f041 0120 	orrmi.w	r1, r1, #32
 800416a:	6021      	strmi	r1, [r4, #0]
 800416c:	b91b      	cbnz	r3, 8004176 <_printf_i+0x15e>
 800416e:	6822      	ldr	r2, [r4, #0]
 8004170:	f022 0220 	bic.w	r2, r2, #32
 8004174:	6022      	str	r2, [r4, #0]
 8004176:	2210      	movs	r2, #16
 8004178:	e7b7      	b.n	80040ea <_printf_i+0xd2>
 800417a:	064d      	lsls	r5, r1, #25
 800417c:	bf48      	it	mi
 800417e:	b29b      	uxthmi	r3, r3
 8004180:	e7ef      	b.n	8004162 <_printf_i+0x14a>
 8004182:	4665      	mov	r5, ip
 8004184:	fbb3 f1f2 	udiv	r1, r3, r2
 8004188:	fb02 3311 	mls	r3, r2, r1, r3
 800418c:	5cc3      	ldrb	r3, [r0, r3]
 800418e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004192:	460b      	mov	r3, r1
 8004194:	2900      	cmp	r1, #0
 8004196:	d1f5      	bne.n	8004184 <_printf_i+0x16c>
 8004198:	e7b9      	b.n	800410e <_printf_i+0xf6>
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	6825      	ldr	r5, [r4, #0]
 800419e:	1d18      	adds	r0, r3, #4
 80041a0:	6961      	ldr	r1, [r4, #20]
 80041a2:	6010      	str	r0, [r2, #0]
 80041a4:	0628      	lsls	r0, r5, #24
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	d501      	bpl.n	80041ae <_printf_i+0x196>
 80041aa:	6019      	str	r1, [r3, #0]
 80041ac:	e002      	b.n	80041b4 <_printf_i+0x19c>
 80041ae:	066a      	lsls	r2, r5, #25
 80041b0:	d5fb      	bpl.n	80041aa <_printf_i+0x192>
 80041b2:	8019      	strh	r1, [r3, #0]
 80041b4:	2300      	movs	r3, #0
 80041b6:	4665      	mov	r5, ip
 80041b8:	6123      	str	r3, [r4, #16]
 80041ba:	e7b9      	b.n	8004130 <_printf_i+0x118>
 80041bc:	6813      	ldr	r3, [r2, #0]
 80041be:	1d19      	adds	r1, r3, #4
 80041c0:	6011      	str	r1, [r2, #0]
 80041c2:	681d      	ldr	r5, [r3, #0]
 80041c4:	6862      	ldr	r2, [r4, #4]
 80041c6:	2100      	movs	r1, #0
 80041c8:	4628      	mov	r0, r5
 80041ca:	f000 f837 	bl	800423c <memchr>
 80041ce:	b108      	cbz	r0, 80041d4 <_printf_i+0x1bc>
 80041d0:	1b40      	subs	r0, r0, r5
 80041d2:	6060      	str	r0, [r4, #4]
 80041d4:	6863      	ldr	r3, [r4, #4]
 80041d6:	6123      	str	r3, [r4, #16]
 80041d8:	2300      	movs	r3, #0
 80041da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041de:	e7a7      	b.n	8004130 <_printf_i+0x118>
 80041e0:	6923      	ldr	r3, [r4, #16]
 80041e2:	462a      	mov	r2, r5
 80041e4:	4639      	mov	r1, r7
 80041e6:	4630      	mov	r0, r6
 80041e8:	47c0      	blx	r8
 80041ea:	3001      	adds	r0, #1
 80041ec:	d0aa      	beq.n	8004144 <_printf_i+0x12c>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	079b      	lsls	r3, r3, #30
 80041f2:	d413      	bmi.n	800421c <_printf_i+0x204>
 80041f4:	68e0      	ldr	r0, [r4, #12]
 80041f6:	9b03      	ldr	r3, [sp, #12]
 80041f8:	4298      	cmp	r0, r3
 80041fa:	bfb8      	it	lt
 80041fc:	4618      	movlt	r0, r3
 80041fe:	e7a3      	b.n	8004148 <_printf_i+0x130>
 8004200:	2301      	movs	r3, #1
 8004202:	464a      	mov	r2, r9
 8004204:	4639      	mov	r1, r7
 8004206:	4630      	mov	r0, r6
 8004208:	47c0      	blx	r8
 800420a:	3001      	adds	r0, #1
 800420c:	d09a      	beq.n	8004144 <_printf_i+0x12c>
 800420e:	3501      	adds	r5, #1
 8004210:	68e3      	ldr	r3, [r4, #12]
 8004212:	9a03      	ldr	r2, [sp, #12]
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	42ab      	cmp	r3, r5
 8004218:	dcf2      	bgt.n	8004200 <_printf_i+0x1e8>
 800421a:	e7eb      	b.n	80041f4 <_printf_i+0x1dc>
 800421c:	2500      	movs	r5, #0
 800421e:	f104 0919 	add.w	r9, r4, #25
 8004222:	e7f5      	b.n	8004210 <_printf_i+0x1f8>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1ac      	bne.n	8004182 <_printf_i+0x16a>
 8004228:	7803      	ldrb	r3, [r0, #0]
 800422a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800422e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004232:	e76c      	b.n	800410e <_printf_i+0xf6>
 8004234:	080044f9 	.word	0x080044f9
 8004238:	0800450a 	.word	0x0800450a

0800423c <memchr>:
 800423c:	b510      	push	{r4, lr}
 800423e:	b2c9      	uxtb	r1, r1
 8004240:	4402      	add	r2, r0
 8004242:	4290      	cmp	r0, r2
 8004244:	4603      	mov	r3, r0
 8004246:	d101      	bne.n	800424c <memchr+0x10>
 8004248:	2300      	movs	r3, #0
 800424a:	e003      	b.n	8004254 <memchr+0x18>
 800424c:	781c      	ldrb	r4, [r3, #0]
 800424e:	3001      	adds	r0, #1
 8004250:	428c      	cmp	r4, r1
 8004252:	d1f6      	bne.n	8004242 <memchr+0x6>
 8004254:	4618      	mov	r0, r3
 8004256:	bd10      	pop	{r4, pc}

08004258 <memcpy>:
 8004258:	b510      	push	{r4, lr}
 800425a:	1e43      	subs	r3, r0, #1
 800425c:	440a      	add	r2, r1
 800425e:	4291      	cmp	r1, r2
 8004260:	d100      	bne.n	8004264 <memcpy+0xc>
 8004262:	bd10      	pop	{r4, pc}
 8004264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004268:	f803 4f01 	strb.w	r4, [r3, #1]!
 800426c:	e7f7      	b.n	800425e <memcpy+0x6>

0800426e <memmove>:
 800426e:	4288      	cmp	r0, r1
 8004270:	b510      	push	{r4, lr}
 8004272:	eb01 0302 	add.w	r3, r1, r2
 8004276:	d807      	bhi.n	8004288 <memmove+0x1a>
 8004278:	1e42      	subs	r2, r0, #1
 800427a:	4299      	cmp	r1, r3
 800427c:	d00a      	beq.n	8004294 <memmove+0x26>
 800427e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004282:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004286:	e7f8      	b.n	800427a <memmove+0xc>
 8004288:	4283      	cmp	r3, r0
 800428a:	d9f5      	bls.n	8004278 <memmove+0xa>
 800428c:	1881      	adds	r1, r0, r2
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	42d3      	cmn	r3, r2
 8004292:	d100      	bne.n	8004296 <memmove+0x28>
 8004294:	bd10      	pop	{r4, pc}
 8004296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800429a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800429e:	e7f7      	b.n	8004290 <memmove+0x22>

080042a0 <_free_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	4605      	mov	r5, r0
 80042a4:	2900      	cmp	r1, #0
 80042a6:	d043      	beq.n	8004330 <_free_r+0x90>
 80042a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ac:	1f0c      	subs	r4, r1, #4
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bfb8      	it	lt
 80042b2:	18e4      	addlt	r4, r4, r3
 80042b4:	f000 f8d0 	bl	8004458 <__malloc_lock>
 80042b8:	4a1e      	ldr	r2, [pc, #120]	; (8004334 <_free_r+0x94>)
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	4610      	mov	r0, r2
 80042be:	b933      	cbnz	r3, 80042ce <_free_r+0x2e>
 80042c0:	6063      	str	r3, [r4, #4]
 80042c2:	6014      	str	r4, [r2, #0]
 80042c4:	4628      	mov	r0, r5
 80042c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042ca:	f000 b8c6 	b.w	800445a <__malloc_unlock>
 80042ce:	42a3      	cmp	r3, r4
 80042d0:	d90b      	bls.n	80042ea <_free_r+0x4a>
 80042d2:	6821      	ldr	r1, [r4, #0]
 80042d4:	1862      	adds	r2, r4, r1
 80042d6:	4293      	cmp	r3, r2
 80042d8:	bf01      	itttt	eq
 80042da:	681a      	ldreq	r2, [r3, #0]
 80042dc:	685b      	ldreq	r3, [r3, #4]
 80042de:	1852      	addeq	r2, r2, r1
 80042e0:	6022      	streq	r2, [r4, #0]
 80042e2:	6063      	str	r3, [r4, #4]
 80042e4:	6004      	str	r4, [r0, #0]
 80042e6:	e7ed      	b.n	80042c4 <_free_r+0x24>
 80042e8:	4613      	mov	r3, r2
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	b10a      	cbz	r2, 80042f2 <_free_r+0x52>
 80042ee:	42a2      	cmp	r2, r4
 80042f0:	d9fa      	bls.n	80042e8 <_free_r+0x48>
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	1858      	adds	r0, r3, r1
 80042f6:	42a0      	cmp	r0, r4
 80042f8:	d10b      	bne.n	8004312 <_free_r+0x72>
 80042fa:	6820      	ldr	r0, [r4, #0]
 80042fc:	4401      	add	r1, r0
 80042fe:	1858      	adds	r0, r3, r1
 8004300:	4282      	cmp	r2, r0
 8004302:	6019      	str	r1, [r3, #0]
 8004304:	d1de      	bne.n	80042c4 <_free_r+0x24>
 8004306:	6810      	ldr	r0, [r2, #0]
 8004308:	6852      	ldr	r2, [r2, #4]
 800430a:	4401      	add	r1, r0
 800430c:	6019      	str	r1, [r3, #0]
 800430e:	605a      	str	r2, [r3, #4]
 8004310:	e7d8      	b.n	80042c4 <_free_r+0x24>
 8004312:	d902      	bls.n	800431a <_free_r+0x7a>
 8004314:	230c      	movs	r3, #12
 8004316:	602b      	str	r3, [r5, #0]
 8004318:	e7d4      	b.n	80042c4 <_free_r+0x24>
 800431a:	6820      	ldr	r0, [r4, #0]
 800431c:	1821      	adds	r1, r4, r0
 800431e:	428a      	cmp	r2, r1
 8004320:	bf01      	itttt	eq
 8004322:	6811      	ldreq	r1, [r2, #0]
 8004324:	6852      	ldreq	r2, [r2, #4]
 8004326:	1809      	addeq	r1, r1, r0
 8004328:	6021      	streq	r1, [r4, #0]
 800432a:	6062      	str	r2, [r4, #4]
 800432c:	605c      	str	r4, [r3, #4]
 800432e:	e7c9      	b.n	80042c4 <_free_r+0x24>
 8004330:	bd38      	pop	{r3, r4, r5, pc}
 8004332:	bf00      	nop
 8004334:	20000130 	.word	0x20000130

08004338 <_malloc_r>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	1ccd      	adds	r5, r1, #3
 800433c:	f025 0503 	bic.w	r5, r5, #3
 8004340:	3508      	adds	r5, #8
 8004342:	2d0c      	cmp	r5, #12
 8004344:	bf38      	it	cc
 8004346:	250c      	movcc	r5, #12
 8004348:	2d00      	cmp	r5, #0
 800434a:	4606      	mov	r6, r0
 800434c:	db01      	blt.n	8004352 <_malloc_r+0x1a>
 800434e:	42a9      	cmp	r1, r5
 8004350:	d903      	bls.n	800435a <_malloc_r+0x22>
 8004352:	230c      	movs	r3, #12
 8004354:	6033      	str	r3, [r6, #0]
 8004356:	2000      	movs	r0, #0
 8004358:	bd70      	pop	{r4, r5, r6, pc}
 800435a:	f000 f87d 	bl	8004458 <__malloc_lock>
 800435e:	4a21      	ldr	r2, [pc, #132]	; (80043e4 <_malloc_r+0xac>)
 8004360:	6814      	ldr	r4, [r2, #0]
 8004362:	4621      	mov	r1, r4
 8004364:	b991      	cbnz	r1, 800438c <_malloc_r+0x54>
 8004366:	4c20      	ldr	r4, [pc, #128]	; (80043e8 <_malloc_r+0xb0>)
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	b91b      	cbnz	r3, 8004374 <_malloc_r+0x3c>
 800436c:	4630      	mov	r0, r6
 800436e:	f000 f863 	bl	8004438 <_sbrk_r>
 8004372:	6020      	str	r0, [r4, #0]
 8004374:	4629      	mov	r1, r5
 8004376:	4630      	mov	r0, r6
 8004378:	f000 f85e 	bl	8004438 <_sbrk_r>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d124      	bne.n	80043ca <_malloc_r+0x92>
 8004380:	230c      	movs	r3, #12
 8004382:	4630      	mov	r0, r6
 8004384:	6033      	str	r3, [r6, #0]
 8004386:	f000 f868 	bl	800445a <__malloc_unlock>
 800438a:	e7e4      	b.n	8004356 <_malloc_r+0x1e>
 800438c:	680b      	ldr	r3, [r1, #0]
 800438e:	1b5b      	subs	r3, r3, r5
 8004390:	d418      	bmi.n	80043c4 <_malloc_r+0x8c>
 8004392:	2b0b      	cmp	r3, #11
 8004394:	d90f      	bls.n	80043b6 <_malloc_r+0x7e>
 8004396:	600b      	str	r3, [r1, #0]
 8004398:	18cc      	adds	r4, r1, r3
 800439a:	50cd      	str	r5, [r1, r3]
 800439c:	4630      	mov	r0, r6
 800439e:	f000 f85c 	bl	800445a <__malloc_unlock>
 80043a2:	f104 000b 	add.w	r0, r4, #11
 80043a6:	1d23      	adds	r3, r4, #4
 80043a8:	f020 0007 	bic.w	r0, r0, #7
 80043ac:	1ac3      	subs	r3, r0, r3
 80043ae:	d0d3      	beq.n	8004358 <_malloc_r+0x20>
 80043b0:	425a      	negs	r2, r3
 80043b2:	50e2      	str	r2, [r4, r3]
 80043b4:	e7d0      	b.n	8004358 <_malloc_r+0x20>
 80043b6:	684b      	ldr	r3, [r1, #4]
 80043b8:	428c      	cmp	r4, r1
 80043ba:	bf16      	itet	ne
 80043bc:	6063      	strne	r3, [r4, #4]
 80043be:	6013      	streq	r3, [r2, #0]
 80043c0:	460c      	movne	r4, r1
 80043c2:	e7eb      	b.n	800439c <_malloc_r+0x64>
 80043c4:	460c      	mov	r4, r1
 80043c6:	6849      	ldr	r1, [r1, #4]
 80043c8:	e7cc      	b.n	8004364 <_malloc_r+0x2c>
 80043ca:	1cc4      	adds	r4, r0, #3
 80043cc:	f024 0403 	bic.w	r4, r4, #3
 80043d0:	42a0      	cmp	r0, r4
 80043d2:	d005      	beq.n	80043e0 <_malloc_r+0xa8>
 80043d4:	1a21      	subs	r1, r4, r0
 80043d6:	4630      	mov	r0, r6
 80043d8:	f000 f82e 	bl	8004438 <_sbrk_r>
 80043dc:	3001      	adds	r0, #1
 80043de:	d0cf      	beq.n	8004380 <_malloc_r+0x48>
 80043e0:	6025      	str	r5, [r4, #0]
 80043e2:	e7db      	b.n	800439c <_malloc_r+0x64>
 80043e4:	20000130 	.word	0x20000130
 80043e8:	20000134 	.word	0x20000134

080043ec <_realloc_r>:
 80043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ee:	4607      	mov	r7, r0
 80043f0:	4614      	mov	r4, r2
 80043f2:	460e      	mov	r6, r1
 80043f4:	b921      	cbnz	r1, 8004400 <_realloc_r+0x14>
 80043f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043fa:	4611      	mov	r1, r2
 80043fc:	f7ff bf9c 	b.w	8004338 <_malloc_r>
 8004400:	b922      	cbnz	r2, 800440c <_realloc_r+0x20>
 8004402:	f7ff ff4d 	bl	80042a0 <_free_r>
 8004406:	4625      	mov	r5, r4
 8004408:	4628      	mov	r0, r5
 800440a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800440c:	f000 f826 	bl	800445c <_malloc_usable_size_r>
 8004410:	42a0      	cmp	r0, r4
 8004412:	d20f      	bcs.n	8004434 <_realloc_r+0x48>
 8004414:	4621      	mov	r1, r4
 8004416:	4638      	mov	r0, r7
 8004418:	f7ff ff8e 	bl	8004338 <_malloc_r>
 800441c:	4605      	mov	r5, r0
 800441e:	2800      	cmp	r0, #0
 8004420:	d0f2      	beq.n	8004408 <_realloc_r+0x1c>
 8004422:	4631      	mov	r1, r6
 8004424:	4622      	mov	r2, r4
 8004426:	f7ff ff17 	bl	8004258 <memcpy>
 800442a:	4631      	mov	r1, r6
 800442c:	4638      	mov	r0, r7
 800442e:	f7ff ff37 	bl	80042a0 <_free_r>
 8004432:	e7e9      	b.n	8004408 <_realloc_r+0x1c>
 8004434:	4635      	mov	r5, r6
 8004436:	e7e7      	b.n	8004408 <_realloc_r+0x1c>

08004438 <_sbrk_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	2300      	movs	r3, #0
 800443c:	4c05      	ldr	r4, [pc, #20]	; (8004454 <_sbrk_r+0x1c>)
 800443e:	4605      	mov	r5, r0
 8004440:	4608      	mov	r0, r1
 8004442:	6023      	str	r3, [r4, #0]
 8004444:	f7fc fd74 	bl	8000f30 <_sbrk>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	d102      	bne.n	8004452 <_sbrk_r+0x1a>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	b103      	cbz	r3, 8004452 <_sbrk_r+0x1a>
 8004450:	602b      	str	r3, [r5, #0]
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	20000220 	.word	0x20000220

08004458 <__malloc_lock>:
 8004458:	4770      	bx	lr

0800445a <__malloc_unlock>:
 800445a:	4770      	bx	lr

0800445c <_malloc_usable_size_r>:
 800445c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004460:	1f18      	subs	r0, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	bfbc      	itt	lt
 8004466:	580b      	ldrlt	r3, [r1, r0]
 8004468:	18c0      	addlt	r0, r0, r3
 800446a:	4770      	bx	lr

0800446c <_init>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	bf00      	nop
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr

08004478 <_fini>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	bf00      	nop
 800447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447e:	bc08      	pop	{r3}
 8004480:	469e      	mov	lr, r3
 8004482:	4770      	bx	lr
