
GreenhouseSensorSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d38  08003d38  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003d38  08003d38  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d38  08003d38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b4  20000010  08003d50  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019c4  08003d50  000219c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001389c  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025cf  00000000  00000000  000338d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001038  00000000  00000000  00035ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  00036ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002372  00000000  00000000  00037e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d00d  00000000  00000000  0003a172  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009027c  00000000  00000000  0004717f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d73fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a0  00000000  00000000  000d7478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cac 	.word	0x08003cac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003cac 	.word	0x08003cac

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 f948 	bl	80003e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f814 	bl	8000184 <SystemClock_Config>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800015c:	f001 f8d8 	bl	8001310 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000160:	4a05      	ldr	r2, [pc, #20]	; (8000178 <main+0x28>)
 8000162:	2100      	movs	r1, #0
 8000164:	4805      	ldr	r0, [pc, #20]	; (800017c <main+0x2c>)
 8000166:	f001 f939 	bl	80013dc <osThreadNew>
 800016a:	4602      	mov	r2, r0
 800016c:	4b04      	ldr	r3, [pc, #16]	; (8000180 <main+0x30>)
 800016e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000170:	f001 f900 	bl	8001374 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000174:	e7fe      	b.n	8000174 <main+0x24>
 8000176:	bf00      	nop
 8000178:	08003cfc 	.word	0x08003cfc
 800017c:	080001fb 	.word	0x080001fb
 8000180:	20001934 	.word	0x20001934

08000184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b090      	sub	sp, #64	; 0x40
 8000188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	f107 0318 	add.w	r3, r7, #24
 800018e:	2228      	movs	r2, #40	; 0x28
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f003 fd81 	bl	8003c9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	605a      	str	r2, [r3, #4]
 80001a0:	609a      	str	r2, [r3, #8]
 80001a2:	60da      	str	r2, [r3, #12]
 80001a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a6:	2302      	movs	r3, #2
 80001a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001aa:	2301      	movs	r3, #1
 80001ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ae:	2310      	movs	r3, #16
 80001b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001b2:	2300      	movs	r3, #0
 80001b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 fa26 	bl	800060c <HAL_RCC_OscConfig>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001c6:	f000 f833 	bl	8000230 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ca:	230f      	movs	r3, #15
 80001cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 fc92 	bl	8000b0c <HAL_RCC_ClockConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001ee:	f000 f81f 	bl	8000230 <Error_Handler>
  }
}
 80001f2:	bf00      	nop
 80001f4:	3740      	adds	r7, #64	; 0x40
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}

080001fa <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001fa:	b580      	push	{r7, lr}
 80001fc:	b082      	sub	sp, #8
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f001 f994 	bl	8001530 <osDelay>
 8000208:	e7fb      	b.n	8000202 <StartDefaultTask+0x8>
	...

0800020c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d101      	bne.n	8000222 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800021e:	f000 f8f9 	bl	8000414 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40012c00 	.word	0x40012c00

08000230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000242:	4b15      	ldr	r3, [pc, #84]	; (8000298 <HAL_MspInit+0x5c>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a14      	ldr	r2, [pc, #80]	; (8000298 <HAL_MspInit+0x5c>)
 8000248:	f043 0301 	orr.w	r3, r3, #1
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <HAL_MspInit+0x5c>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <HAL_MspInit+0x5c>)
 800025c:	69db      	ldr	r3, [r3, #28]
 800025e:	4a0e      	ldr	r2, [pc, #56]	; (8000298 <HAL_MspInit+0x5c>)
 8000260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000264:	61d3      	str	r3, [r2, #28]
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <HAL_MspInit+0x5c>)
 8000268:	69db      	ldr	r3, [r3, #28]
 800026a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <HAL_MspInit+0x60>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <HAL_MspInit+0x60>)
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40021000 	.word	0x40021000
 800029c:	40010000 	.word	0x40010000

080002a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08c      	sub	sp, #48	; 0x30
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80002b0:	2200      	movs	r2, #0
 80002b2:	6879      	ldr	r1, [r7, #4]
 80002b4:	2019      	movs	r0, #25
 80002b6:	f000 f97e 	bl	80005b6 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80002ba:	2019      	movs	r0, #25
 80002bc:	f000 f997 	bl	80005ee <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80002c0:	4b1e      	ldr	r3, [pc, #120]	; (800033c <HAL_InitTick+0x9c>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a1d      	ldr	r2, [pc, #116]	; (800033c <HAL_InitTick+0x9c>)
 80002c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <HAL_InitTick+0x9c>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80002d8:	f107 0210 	add.w	r2, r7, #16
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fd7c 	bl	8000de0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80002e8:	f000 fd66 	bl	8000db8 <HAL_RCC_GetPCLK2Freq>
 80002ec:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80002ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002f0:	4a13      	ldr	r2, [pc, #76]	; (8000340 <HAL_InitTick+0xa0>)
 80002f2:	fba2 2303 	umull	r2, r3, r2, r3
 80002f6:	0c9b      	lsrs	r3, r3, #18
 80002f8:	3b01      	subs	r3, #1
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <HAL_InitTick+0xa4>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <HAL_InitTick+0xa8>)
 8000300:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <HAL_InitTick+0xa4>)
 8000304:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000308:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_InitTick+0xa4>)
 800030c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800030e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <HAL_InitTick+0xa4>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <HAL_InitTick+0xa4>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800031c:	4809      	ldr	r0, [pc, #36]	; (8000344 <HAL_InitTick+0xa4>)
 800031e:	f000 fdad 	bl	8000e7c <HAL_TIM_Base_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d104      	bne.n	8000332 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000328:	4806      	ldr	r0, [pc, #24]	; (8000344 <HAL_InitTick+0xa4>)
 800032a:	f000 fdff 	bl	8000f2c <HAL_TIM_Base_Start_IT>
 800032e:	4603      	mov	r3, r0
 8000330:	e000      	b.n	8000334 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000332:	2301      	movs	r3, #1
}
 8000334:	4618      	mov	r0, r3
 8000336:	3730      	adds	r7, #48	; 0x30
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40021000 	.word	0x40021000
 8000340:	431bde83 	.word	0x431bde83
 8000344:	20001938 	.word	0x20001938
 8000348:	40012c00 	.word	0x40012c00

0800034c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800035c:	e7fe      	b.n	800035c <HardFault_Handler+0x4>

0800035e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000362:	e7fe      	b.n	8000362 <MemManage_Handler+0x4>

08000364 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <BusFault_Handler+0x4>

0800036a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800036e:	e7fe      	b.n	800036e <UsageFault_Handler+0x4>

08000370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000380:	4802      	ldr	r0, [pc, #8]	; (800038c <TIM1_UP_IRQHandler+0x10>)
 8000382:	f000 fe25 	bl	8000fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20001938 	.word	0x20001938

08000390 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800039c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800039e:	e003      	b.n	80003a8 <LoopCopyDataInit>

080003a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80003a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80003a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80003a6:	3104      	adds	r1, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80003a8:	480a      	ldr	r0, [pc, #40]	; (80003d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80003ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80003ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80003b0:	d3f6      	bcc.n	80003a0 <CopyDataInit>
  ldr r2, =_sbss
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80003b4:	e002      	b.n	80003bc <LoopFillZerobss>

080003b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80003b8:	f842 3b04 	str.w	r3, [r2], #4

080003bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80003be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80003c0:	d3f9      	bcc.n	80003b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003c2:	f7ff ffe5 	bl	8000390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003c6:	f003 fc39 	bl	8003c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff fec1 	bl	8000150 <main>
  bx lr
 80003ce:	4770      	bx	lr
  ldr r3, =_sidata
 80003d0:	08003d40 	.word	0x08003d40
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80003d8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80003dc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80003e0:	200019c4 	.word	0x200019c4

080003e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC1_2_IRQHandler>
	...

080003e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <HAL_Init+0x28>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a07      	ldr	r2, [pc, #28]	; (8000410 <HAL_Init+0x28>)
 80003f2:	f043 0310 	orr.w	r3, r3, #16
 80003f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003f8:	2003      	movs	r0, #3
 80003fa:	f000 f8d1 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003fe:	2000      	movs	r0, #0
 8000400:	f7ff ff4e 	bl	80002a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000404:	f7ff ff1a 	bl	800023c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000408:	2300      	movs	r3, #0
}
 800040a:	4618      	mov	r0, r3
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40022000 	.word	0x40022000

08000414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <HAL_IncTick+0x1c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <HAL_IncTick+0x20>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a03      	ldr	r2, [pc, #12]	; (8000434 <HAL_IncTick+0x20>)
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	20000008 	.word	0x20000008
 8000434:	20001980 	.word	0x20001980

08000438 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  return uwTick;
 800043c:	4b02      	ldr	r3, [pc, #8]	; (8000448 <HAL_GetTick+0x10>)
 800043e:	681b      	ldr	r3, [r3, #0]
}
 8000440:	4618      	mov	r0, r3
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	20001980 	.word	0x20001980

0800044c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <__NVIC_SetPriorityGrouping+0x44>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000468:	4013      	ands	r3, r2
 800046a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800047c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800047e:	4a04      	ldr	r2, [pc, #16]	; (8000490 <__NVIC_SetPriorityGrouping+0x44>)
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	60d3      	str	r3, [r2, #12]
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	e000ed00 	.word	0xe000ed00

08000494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <__NVIC_GetPriorityGrouping+0x18>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	0a1b      	lsrs	r3, r3, #8
 800049e:	f003 0307 	and.w	r3, r3, #7
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	db0b      	blt.n	80004da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	f003 021f 	and.w	r2, r3, #31
 80004c8:	4906      	ldr	r1, [pc, #24]	; (80004e4 <__NVIC_EnableIRQ+0x34>)
 80004ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ce:	095b      	lsrs	r3, r3, #5
 80004d0:	2001      	movs	r0, #1
 80004d2:	fa00 f202 	lsl.w	r2, r0, r2
 80004d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	6039      	str	r1, [r7, #0]
 80004f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	db0a      	blt.n	8000512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	490c      	ldr	r1, [pc, #48]	; (8000534 <__NVIC_SetPriority+0x4c>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	0112      	lsls	r2, r2, #4
 8000508:	b2d2      	uxtb	r2, r2
 800050a:	440b      	add	r3, r1
 800050c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000510:	e00a      	b.n	8000528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4908      	ldr	r1, [pc, #32]	; (8000538 <__NVIC_SetPriority+0x50>)
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	f003 030f 	and.w	r3, r3, #15
 800051e:	3b04      	subs	r3, #4
 8000520:	0112      	lsls	r2, r2, #4
 8000522:	b2d2      	uxtb	r2, r2
 8000524:	440b      	add	r3, r1
 8000526:	761a      	strb	r2, [r3, #24]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	e000e100 	.word	0xe000e100
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800053c:	b480      	push	{r7}
 800053e:	b089      	sub	sp, #36	; 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	f1c3 0307 	rsb	r3, r3, #7
 8000556:	2b04      	cmp	r3, #4
 8000558:	bf28      	it	cs
 800055a:	2304      	movcs	r3, #4
 800055c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	3304      	adds	r3, #4
 8000562:	2b06      	cmp	r3, #6
 8000564:	d902      	bls.n	800056c <NVIC_EncodePriority+0x30>
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	3b03      	subs	r3, #3
 800056a:	e000      	b.n	800056e <NVIC_EncodePriority+0x32>
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000570:	f04f 32ff 	mov.w	r2, #4294967295
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	43da      	mvns	r2, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	401a      	ands	r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000584:	f04f 31ff 	mov.w	r1, #4294967295
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43d9      	mvns	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	4313      	orrs	r3, r2
         );
}
 8000596:	4618      	mov	r0, r3
 8000598:	3724      	adds	r7, #36	; 0x24
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff ff4f 	bl	800044c <__NVIC_SetPriorityGrouping>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	4603      	mov	r3, r0
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005c8:	f7ff ff64 	bl	8000494 <__NVIC_GetPriorityGrouping>
 80005cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	6978      	ldr	r0, [r7, #20]
 80005d4:	f7ff ffb2 	bl	800053c <NVIC_EncodePriority>
 80005d8:	4602      	mov	r2, r0
 80005da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005de:	4611      	mov	r1, r2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ff81 	bl	80004e8 <__NVIC_SetPriority>
}
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	4603      	mov	r3, r0
 80005f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff57 	bl	80004b0 <__NVIC_EnableIRQ>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e26c      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	2b00      	cmp	r3, #0
 8000628:	f000 8087 	beq.w	800073a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800062c:	4b92      	ldr	r3, [pc, #584]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f003 030c 	and.w	r3, r3, #12
 8000634:	2b04      	cmp	r3, #4
 8000636:	d00c      	beq.n	8000652 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000638:	4b8f      	ldr	r3, [pc, #572]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f003 030c 	and.w	r3, r3, #12
 8000640:	2b08      	cmp	r3, #8
 8000642:	d112      	bne.n	800066a <HAL_RCC_OscConfig+0x5e>
 8000644:	4b8c      	ldr	r3, [pc, #560]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800064c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000650:	d10b      	bne.n	800066a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000652:	4b89      	ldr	r3, [pc, #548]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d06c      	beq.n	8000738 <HAL_RCC_OscConfig+0x12c>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d168      	bne.n	8000738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e246      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000672:	d106      	bne.n	8000682 <HAL_RCC_OscConfig+0x76>
 8000674:	4b80      	ldr	r3, [pc, #512]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a7f      	ldr	r2, [pc, #508]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800067a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	e02e      	b.n	80006e0 <HAL_RCC_OscConfig+0xd4>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10c      	bne.n	80006a4 <HAL_RCC_OscConfig+0x98>
 800068a:	4b7b      	ldr	r3, [pc, #492]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a7a      	ldr	r2, [pc, #488]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000694:	6013      	str	r3, [r2, #0]
 8000696:	4b78      	ldr	r3, [pc, #480]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a77      	ldr	r2, [pc, #476]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800069c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	e01d      	b.n	80006e0 <HAL_RCC_OscConfig+0xd4>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006ac:	d10c      	bne.n	80006c8 <HAL_RCC_OscConfig+0xbc>
 80006ae:	4b72      	ldr	r3, [pc, #456]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a71      	ldr	r2, [pc, #452]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b8:	6013      	str	r3, [r2, #0]
 80006ba:	4b6f      	ldr	r3, [pc, #444]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a6e      	ldr	r2, [pc, #440]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c4:	6013      	str	r3, [r2, #0]
 80006c6:	e00b      	b.n	80006e0 <HAL_RCC_OscConfig+0xd4>
 80006c8:	4b6b      	ldr	r3, [pc, #428]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a6a      	ldr	r2, [pc, #424]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b68      	ldr	r3, [pc, #416]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a67      	ldr	r2, [pc, #412]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80006da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d013      	beq.n	8000710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006e8:	f7ff fea6 	bl	8000438 <HAL_GetTick>
 80006ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006ee:	e008      	b.n	8000702 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80006f0:	f7ff fea2 	bl	8000438 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	2b64      	cmp	r3, #100	; 0x64
 80006fc:	d901      	bls.n	8000702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80006fe:	2303      	movs	r3, #3
 8000700:	e1fa      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000702:	4b5d      	ldr	r3, [pc, #372]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0f0      	beq.n	80006f0 <HAL_RCC_OscConfig+0xe4>
 800070e:	e014      	b.n	800073a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000710:	f7ff fe92 	bl	8000438 <HAL_GetTick>
 8000714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000716:	e008      	b.n	800072a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000718:	f7ff fe8e 	bl	8000438 <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	2b64      	cmp	r3, #100	; 0x64
 8000724:	d901      	bls.n	800072a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000726:	2303      	movs	r3, #3
 8000728:	e1e6      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800072a:	4b53      	ldr	r3, [pc, #332]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1f0      	bne.n	8000718 <HAL_RCC_OscConfig+0x10c>
 8000736:	e000      	b.n	800073a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	2b00      	cmp	r3, #0
 8000744:	d063      	beq.n	800080e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000746:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	f003 030c 	and.w	r3, r3, #12
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00b      	beq.n	800076a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000752:	4b49      	ldr	r3, [pc, #292]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	f003 030c 	and.w	r3, r3, #12
 800075a:	2b08      	cmp	r3, #8
 800075c:	d11c      	bne.n	8000798 <HAL_RCC_OscConfig+0x18c>
 800075e:	4b46      	ldr	r3, [pc, #280]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d116      	bne.n	8000798 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800076a:	4b43      	ldr	r3, [pc, #268]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	2b00      	cmp	r3, #0
 8000774:	d005      	beq.n	8000782 <HAL_RCC_OscConfig+0x176>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d001      	beq.n	8000782 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e1ba      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000782:	4b3d      	ldr	r3, [pc, #244]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	4939      	ldr	r1, [pc, #228]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000792:	4313      	orrs	r3, r2
 8000794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000796:	e03a      	b.n	800080e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	691b      	ldr	r3, [r3, #16]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d020      	beq.n	80007e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80007a0:	4b36      	ldr	r3, [pc, #216]	; (800087c <HAL_RCC_OscConfig+0x270>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007a6:	f7ff fe47 	bl	8000438 <HAL_GetTick>
 80007aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007ac:	e008      	b.n	80007c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007ae:	f7ff fe43 	bl	8000438 <HAL_GetTick>
 80007b2:	4602      	mov	r2, r0
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d901      	bls.n	80007c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80007bc:	2303      	movs	r3, #3
 80007be:	e19b      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d0f0      	beq.n	80007ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007cc:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	4927      	ldr	r1, [pc, #156]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 80007dc:	4313      	orrs	r3, r2
 80007de:	600b      	str	r3, [r1, #0]
 80007e0:	e015      	b.n	800080e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <HAL_RCC_OscConfig+0x270>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007e8:	f7ff fe26 	bl	8000438 <HAL_GetTick>
 80007ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007ee:	e008      	b.n	8000802 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007f0:	f7ff fe22 	bl	8000438 <HAL_GetTick>
 80007f4:	4602      	mov	r2, r0
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d901      	bls.n	8000802 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80007fe:	2303      	movs	r3, #3
 8000800:	e17a      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f0      	bne.n	80007f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	2b00      	cmp	r3, #0
 8000818:	d03a      	beq.n	8000890 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d019      	beq.n	8000856 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_RCC_OscConfig+0x274>)
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000828:	f7ff fe06 	bl	8000438 <HAL_GetTick>
 800082c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800082e:	e008      	b.n	8000842 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000830:	f7ff fe02 	bl	8000438 <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	2b02      	cmp	r3, #2
 800083c:	d901      	bls.n	8000842 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800083e:	2303      	movs	r3, #3
 8000840:	e15a      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_RCC_OscConfig+0x26c>)
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0f0      	beq.n	8000830 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f000 faf6 	bl	8000e40 <RCC_Delay>
 8000854:	e01c      	b.n	8000890 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_RCC_OscConfig+0x274>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800085c:	f7ff fdec 	bl	8000438 <HAL_GetTick>
 8000860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000862:	e00f      	b.n	8000884 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000864:	f7ff fde8 	bl	8000438 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	2b02      	cmp	r3, #2
 8000870:	d908      	bls.n	8000884 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000872:	2303      	movs	r3, #3
 8000874:	e140      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	42420000 	.word	0x42420000
 8000880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000884:	4b9e      	ldr	r3, [pc, #632]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1e9      	bne.n	8000864 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	2b00      	cmp	r3, #0
 800089a:	f000 80a6 	beq.w	80009ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008a2:	4b97      	ldr	r3, [pc, #604]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10d      	bne.n	80008ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b94      	ldr	r3, [pc, #592]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a93      	ldr	r2, [pc, #588]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b91      	ldr	r3, [pc, #580]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80008c6:	2301      	movs	r3, #1
 80008c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008ca:	4b8e      	ldr	r3, [pc, #568]	; (8000b04 <HAL_RCC_OscConfig+0x4f8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d118      	bne.n	8000908 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008d6:	4b8b      	ldr	r3, [pc, #556]	; (8000b04 <HAL_RCC_OscConfig+0x4f8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a8a      	ldr	r2, [pc, #552]	; (8000b04 <HAL_RCC_OscConfig+0x4f8>)
 80008dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80008e2:	f7ff fda9 	bl	8000438 <HAL_GetTick>
 80008e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008e8:	e008      	b.n	80008fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008ea:	f7ff fda5 	bl	8000438 <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	2b64      	cmp	r3, #100	; 0x64
 80008f6:	d901      	bls.n	80008fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80008f8:	2303      	movs	r3, #3
 80008fa:	e0fd      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008fc:	4b81      	ldr	r3, [pc, #516]	; (8000b04 <HAL_RCC_OscConfig+0x4f8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f0      	beq.n	80008ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d106      	bne.n	800091e <HAL_RCC_OscConfig+0x312>
 8000910:	4b7b      	ldr	r3, [pc, #492]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000912:	6a1b      	ldr	r3, [r3, #32]
 8000914:	4a7a      	ldr	r2, [pc, #488]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6213      	str	r3, [r2, #32]
 800091c:	e02d      	b.n	800097a <HAL_RCC_OscConfig+0x36e>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10c      	bne.n	8000940 <HAL_RCC_OscConfig+0x334>
 8000926:	4b76      	ldr	r3, [pc, #472]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000928:	6a1b      	ldr	r3, [r3, #32]
 800092a:	4a75      	ldr	r2, [pc, #468]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	6213      	str	r3, [r2, #32]
 8000932:	4b73      	ldr	r3, [pc, #460]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000934:	6a1b      	ldr	r3, [r3, #32]
 8000936:	4a72      	ldr	r2, [pc, #456]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000938:	f023 0304 	bic.w	r3, r3, #4
 800093c:	6213      	str	r3, [r2, #32]
 800093e:	e01c      	b.n	800097a <HAL_RCC_OscConfig+0x36e>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	2b05      	cmp	r3, #5
 8000946:	d10c      	bne.n	8000962 <HAL_RCC_OscConfig+0x356>
 8000948:	4b6d      	ldr	r3, [pc, #436]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	4a6c      	ldr	r2, [pc, #432]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6213      	str	r3, [r2, #32]
 8000954:	4b6a      	ldr	r3, [pc, #424]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000956:	6a1b      	ldr	r3, [r3, #32]
 8000958:	4a69      	ldr	r2, [pc, #420]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6213      	str	r3, [r2, #32]
 8000960:	e00b      	b.n	800097a <HAL_RCC_OscConfig+0x36e>
 8000962:	4b67      	ldr	r3, [pc, #412]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000964:	6a1b      	ldr	r3, [r3, #32]
 8000966:	4a66      	ldr	r2, [pc, #408]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000968:	f023 0301 	bic.w	r3, r3, #1
 800096c:	6213      	str	r3, [r2, #32]
 800096e:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	4a63      	ldr	r2, [pc, #396]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000974:	f023 0304 	bic.w	r3, r3, #4
 8000978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d015      	beq.n	80009ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000982:	f7ff fd59 	bl	8000438 <HAL_GetTick>
 8000986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000988:	e00a      	b.n	80009a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800098a:	f7ff fd55 	bl	8000438 <HAL_GetTick>
 800098e:	4602      	mov	r2, r0
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	f241 3288 	movw	r2, #5000	; 0x1388
 8000998:	4293      	cmp	r3, r2
 800099a:	d901      	bls.n	80009a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800099c:	2303      	movs	r3, #3
 800099e:	e0ab      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009a0:	4b57      	ldr	r3, [pc, #348]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0ee      	beq.n	800098a <HAL_RCC_OscConfig+0x37e>
 80009ac:	e014      	b.n	80009d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ae:	f7ff fd43 	bl	8000438 <HAL_GetTick>
 80009b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009b4:	e00a      	b.n	80009cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009b6:	f7ff fd3f 	bl	8000438 <HAL_GetTick>
 80009ba:	4602      	mov	r2, r0
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d901      	bls.n	80009cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80009c8:	2303      	movs	r3, #3
 80009ca:	e095      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009cc:	4b4c      	ldr	r3, [pc, #304]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 80009ce:	6a1b      	ldr	r3, [r3, #32]
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1ee      	bne.n	80009b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80009d8:	7dfb      	ldrb	r3, [r7, #23]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d105      	bne.n	80009ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80009de:	4b48      	ldr	r3, [pc, #288]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a47      	ldr	r2, [pc, #284]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 80009e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8081 	beq.w	8000af6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009f4:	4b42      	ldr	r3, [pc, #264]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 030c 	and.w	r3, r3, #12
 80009fc:	2b08      	cmp	r3, #8
 80009fe:	d061      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d146      	bne.n	8000a96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a08:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <HAL_RCC_OscConfig+0x4fc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0e:	f7ff fd13 	bl	8000438 <HAL_GetTick>
 8000a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a14:	e008      	b.n	8000a28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a16:	f7ff fd0f 	bl	8000438 <HAL_GetTick>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d901      	bls.n	8000a28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	e067      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a28:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1f0      	bne.n	8000a16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a3c:	d108      	bne.n	8000a50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a3e:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	492d      	ldr	r1, [pc, #180]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a19      	ldr	r1, [r3, #32]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	430b      	orrs	r3, r1
 8000a62:	4927      	ldr	r1, [pc, #156]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000a64:	4313      	orrs	r3, r2
 8000a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000a68:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <HAL_RCC_OscConfig+0x4fc>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a6e:	f7ff fce3 	bl	8000438 <HAL_GetTick>
 8000a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a74:	e008      	b.n	8000a88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a76:	f7ff fcdf 	bl	8000438 <HAL_GetTick>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d901      	bls.n	8000a88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000a84:	2303      	movs	r3, #3
 8000a86:	e037      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0f0      	beq.n	8000a76 <HAL_RCC_OscConfig+0x46a>
 8000a94:	e02f      	b.n	8000af6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_RCC_OscConfig+0x4fc>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a9c:	f7ff fccc 	bl	8000438 <HAL_GetTick>
 8000aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aa2:	e008      	b.n	8000ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000aa4:	f7ff fcc8 	bl	8000438 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d901      	bls.n	8000ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	e020      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1f0      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x498>
 8000ac2:	e018      	b.n	8000af6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	69db      	ldr	r3, [r3, #28]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d101      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e013      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a1b      	ldr	r3, [r3, #32]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d106      	bne.n	8000af2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d001      	beq.n	8000af6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e000      	b.n	8000af8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40007000 	.word	0x40007000
 8000b08:	42420060 	.word	0x42420060

08000b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e0d0      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b20:	4b6a      	ldr	r3, [pc, #424]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 0307 	and.w	r3, r3, #7
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d910      	bls.n	8000b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b2e:	4b67      	ldr	r3, [pc, #412]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f023 0207 	bic.w	r2, r3, #7
 8000b36:	4965      	ldr	r1, [pc, #404]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b3e:	4b63      	ldr	r3, [pc, #396]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d001      	beq.n	8000b50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e0b8      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d020      	beq.n	8000b9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d005      	beq.n	8000b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b68:	4b59      	ldr	r3, [pc, #356]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	4a58      	ldr	r2, [pc, #352]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000b72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d005      	beq.n	8000b8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b80:	4b53      	ldr	r3, [pc, #332]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4a52      	ldr	r2, [pc, #328]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000b8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b8c:	4b50      	ldr	r3, [pc, #320]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	494d      	ldr	r1, [pc, #308]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d040      	beq.n	8000c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d107      	bne.n	8000bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb2:	4b47      	ldr	r3, [pc, #284]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d115      	bne.n	8000bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e07f      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d107      	bne.n	8000bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bca:	4b41      	ldr	r3, [pc, #260]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d109      	bne.n	8000bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e073      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bda:	4b3d      	ldr	r3, [pc, #244]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e06b      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bea:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f023 0203 	bic.w	r2, r3, #3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4936      	ldr	r1, [pc, #216]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000bfc:	f7ff fc1c 	bl	8000438 <HAL_GetTick>
 8000c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c02:	e00a      	b.n	8000c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c04:	f7ff fc18 	bl	8000438 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e053      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 020c 	and.w	r2, r3, #12
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d1eb      	bne.n	8000c04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d210      	bcs.n	8000c5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c3a:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f023 0207 	bic.w	r2, r3, #7
 8000c42:	4922      	ldr	r1, [pc, #136]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d001      	beq.n	8000c5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e032      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d008      	beq.n	8000c7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4916      	ldr	r1, [pc, #88]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d009      	beq.n	8000c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c96:	4313      	orrs	r3, r2
 8000c98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c9a:	f000 f821 	bl	8000ce0 <HAL_RCC_GetSysClockFreq>
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8000cac:	5cd3      	ldrb	r3, [r2, r3]
 8000cae:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb2:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8000cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_RCC_ClockConfig+0x1d0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff faf0 	bl	80002a0 <HAL_InitTick>

  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40022000 	.word	0x40022000
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	08003d20 	.word	0x08003d20
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ce0:	b490      	push	{r4, r7}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000ce8:	1d3c      	adds	r4, r7, #4
 8000cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d002      	beq.n	8000d20 <HAL_RCC_GetSysClockFreq+0x40>
 8000d1a:	2b08      	cmp	r3, #8
 8000d1c:	d003      	beq.n	8000d26 <HAL_RCC_GetSysClockFreq+0x46>
 8000d1e:	e02d      	b.n	8000d7c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000d22:	623b      	str	r3, [r7, #32]
      break;
 8000d24:	e02d      	b.n	8000d82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	0c9b      	lsrs	r3, r3, #18
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d32:	4413      	add	r3, r2
 8000d34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000d38:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d013      	beq.n	8000d6c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	0c5b      	lsrs	r3, r3, #17
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d52:	4413      	add	r3, r2
 8000d54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000d58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000d5e:	fb02 f203 	mul.w	r2, r2, r3
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6a:	e004      	b.n	8000d76 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000d70:	fb02 f303 	mul.w	r3, r2, r3
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	623b      	str	r3, [r7, #32]
      break;
 8000d7a:	e002      	b.n	8000d82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000d7e:	623b      	str	r3, [r7, #32]
      break;
 8000d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000d82:	6a3b      	ldr	r3, [r7, #32]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc90      	pop	{r4, r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	08003cd0 	.word	0x08003cd0
 8000d94:	08003ce0 	.word	0x08003ce0
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	007a1200 	.word	0x007a1200
 8000da0:	003d0900 	.word	0x003d0900

08000da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <HAL_RCC_GetHCLKFreq+0x10>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	20000000 	.word	0x20000000

08000db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000dbc:	f7ff fff2 	bl	8000da4 <HAL_RCC_GetHCLKFreq>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	0adb      	lsrs	r3, r3, #11
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	4a03      	ldr	r2, [pc, #12]	; (8000ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000dce:	5cd3      	ldrb	r3, [r2, r3]
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	08003d30 	.word	0x08003d30

08000de0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	220f      	movs	r2, #15
 8000dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_RCC_GetClockConfig+0x58>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_RCC_GetClockConfig+0x58>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_RCC_GetClockConfig+0x58>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_RCC_GetClockConfig+0x58>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	08db      	lsrs	r3, r3, #3
 8000e1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_RCC_GetClockConfig+0x5c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0207 	and.w	r2, r3, #7
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40022000 	.word	0x40022000

08000e40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <RCC_Delay+0x34>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <RCC_Delay+0x38>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	0a5b      	lsrs	r3, r3, #9
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	fb02 f303 	mul.w	r3, r2, r3
 8000e5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000e5c:	bf00      	nop
  }
  while (Delay --);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	60fa      	str	r2, [r7, #12]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f9      	bne.n	8000e5c <RCC_Delay+0x1c>
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000000 	.word	0x20000000
 8000e78:	10624dd3 	.word	0x10624dd3

08000e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e041      	b.n	8000f12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f839 	bl	8000f1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4610      	mov	r0, r2
 8000ebc:	f000 f9b4 	bl	8001228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2201      	movs	r2, #1
 8000efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d001      	beq.n	8000f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e03a      	b.n	8000fba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2202      	movs	r2, #2
 8000f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 0201 	orr.w	r2, r2, #1
 8000f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a18      	ldr	r2, [pc, #96]	; (8000fc4 <HAL_TIM_Base_Start_IT+0x98>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00e      	beq.n	8000f84 <HAL_TIM_Base_Start_IT+0x58>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f6e:	d009      	beq.n	8000f84 <HAL_TIM_Base_Start_IT+0x58>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d004      	beq.n	8000f84 <HAL_TIM_Base_Start_IT+0x58>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <HAL_TIM_Base_Start_IT+0xa0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d111      	bne.n	8000fa8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d010      	beq.n	8000fb8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0201 	orr.w	r2, r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000fa6:	e007      	b.n	8000fb8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 0201 	orr.w	r2, r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40012c00 	.word	0x40012c00
 8000fc8:	40000400 	.word	0x40000400
 8000fcc:	40000800 	.word	0x40000800

08000fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d122      	bne.n	800102c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d11b      	bne.n	800102c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f06f 0202 	mvn.w	r2, #2
 8000ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f8ed 	bl	80011f2 <HAL_TIM_IC_CaptureCallback>
 8001018:	e005      	b.n	8001026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f8e0 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f8ef 	bl	8001204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	2b04      	cmp	r3, #4
 8001038:	d122      	bne.n	8001080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b04      	cmp	r3, #4
 8001046:	d11b      	bne.n	8001080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f06f 0204 	mvn.w	r2, #4
 8001050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2202      	movs	r2, #2
 8001056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f8c3 	bl	80011f2 <HAL_TIM_IC_CaptureCallback>
 800106c:	e005      	b.n	800107a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f8b6 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f8c5 	bl	8001204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b08      	cmp	r3, #8
 800108c:	d122      	bne.n	80010d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	2b08      	cmp	r3, #8
 800109a:	d11b      	bne.n	80010d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f06f 0208 	mvn.w	r2, #8
 80010a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2204      	movs	r2, #4
 80010aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f899 	bl	80011f2 <HAL_TIM_IC_CaptureCallback>
 80010c0:	e005      	b.n	80010ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f88c 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f89b 	bl	8001204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	2b10      	cmp	r3, #16
 80010e0:	d122      	bne.n	8001128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	2b10      	cmp	r3, #16
 80010ee:	d11b      	bne.n	8001128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f06f 0210 	mvn.w	r2, #16
 80010f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2208      	movs	r2, #8
 80010fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f86f 	bl	80011f2 <HAL_TIM_IC_CaptureCallback>
 8001114:	e005      	b.n	8001122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f862 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f871 	bl	8001204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b01      	cmp	r3, #1
 8001134:	d10e      	bne.n	8001154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b01      	cmp	r3, #1
 8001142:	d107      	bne.n	8001154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f06f 0201 	mvn.w	r2, #1
 800114c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff f85c 	bl	800020c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	2b80      	cmp	r3, #128	; 0x80
 8001160:	d10e      	bne.n	8001180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116c:	2b80      	cmp	r3, #128	; 0x80
 800116e:	d107      	bne.n	8001180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f8bf 	bl	80012fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118a:	2b40      	cmp	r3, #64	; 0x40
 800118c:	d10e      	bne.n	80011ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001198:	2b40      	cmp	r3, #64	; 0x40
 800119a:	d107      	bne.n	80011ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80011a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f835 	bl	8001216 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	f003 0320 	and.w	r3, r3, #32
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	d10e      	bne.n	80011d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	2b20      	cmp	r3, #32
 80011c6:	d107      	bne.n	80011d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f06f 0220 	mvn.w	r2, #32
 80011d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f88a 	bl	80012ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr

080011f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <TIM_Base_SetConfig+0xb8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00b      	beq.n	8001258 <TIM_Base_SetConfig+0x30>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001246:	d007      	beq.n	8001258 <TIM_Base_SetConfig+0x30>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a26      	ldr	r2, [pc, #152]	; (80012e4 <TIM_Base_SetConfig+0xbc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d003      	beq.n	8001258 <TIM_Base_SetConfig+0x30>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a25      	ldr	r2, [pc, #148]	; (80012e8 <TIM_Base_SetConfig+0xc0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d108      	bne.n	800126a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800125e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <TIM_Base_SetConfig+0xb8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00b      	beq.n	800128a <TIM_Base_SetConfig+0x62>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d007      	beq.n	800128a <TIM_Base_SetConfig+0x62>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <TIM_Base_SetConfig+0xbc>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d003      	beq.n	800128a <TIM_Base_SetConfig+0x62>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <TIM_Base_SetConfig+0xc0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d108      	bne.n	800129c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <TIM_Base_SetConfig+0xb8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d103      	bne.n	80012d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	615a      	str	r2, [r3, #20]
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	40012c00 	.word	0x40012c00
 80012e4:	40000400 	.word	0x40000400
 80012e8:	40000800 	.word	0x40000800

080012ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001316:	f3ef 8305 	mrs	r3, IPSR
 800131a:	60bb      	str	r3, [r7, #8]
  return(result);
 800131c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10f      	bne.n	8001342 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001322:	f3ef 8310 	mrs	r3, PRIMASK
 8001326:	607b      	str	r3, [r7, #4]
  return(result);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <osKernelInitialize+0x32>
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <osKernelInitialize+0x60>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d109      	bne.n	800134a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001336:	f3ef 8311 	mrs	r3, BASEPRI
 800133a:	603b      	str	r3, [r7, #0]
  return(result);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001342:	f06f 0305 	mvn.w	r3, #5
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	e00c      	b.n	8001364 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <osKernelInitialize+0x60>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d105      	bne.n	800135e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <osKernelInitialize+0x60>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e002      	b.n	8001364 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	2000002c 	.word	0x2000002c

08001374 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800137a:	f3ef 8305 	mrs	r3, IPSR
 800137e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001380:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10f      	bne.n	80013a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001386:	f3ef 8310 	mrs	r3, PRIMASK
 800138a:	607b      	str	r3, [r7, #4]
  return(result);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d109      	bne.n	80013a6 <osKernelStart+0x32>
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <osKernelStart+0x64>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d109      	bne.n	80013ae <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800139a:	f3ef 8311 	mrs	r3, BASEPRI
 800139e:	603b      	str	r3, [r7, #0]
  return(result);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80013a6:	f06f 0305 	mvn.w	r3, #5
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	e00e      	b.n	80013cc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <osKernelStart+0x64>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <osKernelStart+0x64>)
 80013b8:	2202      	movs	r2, #2
 80013ba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80013bc:	f001 f864 	bl	8002488 <vTaskStartScheduler>
      stat = osOK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	e002      	b.n	80013cc <osKernelStart+0x58>
    } else {
      stat = osError;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80013cc:	68fb      	ldr	r3, [r7, #12]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000002c 	.word	0x2000002c

080013dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b092      	sub	sp, #72	; 0x48
 80013e0:	af04      	add	r7, sp, #16
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013ec:	f3ef 8305 	mrs	r3, IPSR
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f040 8094 	bne.w	8001522 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013fa:	f3ef 8310 	mrs	r3, PRIMASK
 80013fe:	623b      	str	r3, [r7, #32]
  return(result);
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f040 808d 	bne.w	8001522 <osThreadNew+0x146>
 8001408:	4b48      	ldr	r3, [pc, #288]	; (800152c <osThreadNew+0x150>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d106      	bne.n	800141e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001410:	f3ef 8311 	mrs	r3, BASEPRI
 8001414:	61fb      	str	r3, [r7, #28]
  return(result);
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f040 8082 	bne.w	8001522 <osThreadNew+0x146>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d07e      	beq.n	8001522 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001428:	2318      	movs	r3, #24
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800142c:	2300      	movs	r3, #0
 800142e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001430:	f107 031b 	add.w	r3, r7, #27
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d045      	beq.n	80014ce <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <osThreadNew+0x74>
        name = attr->name;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <osThreadNew+0x9a>
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	2b38      	cmp	r3, #56	; 0x38
 8001468:	d805      	bhi.n	8001476 <osThreadNew+0x9a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <osThreadNew+0x9e>
        return (NULL);
 8001476:	2300      	movs	r3, #0
 8001478:	e054      	b.n	8001524 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00e      	beq.n	80014b0 <osThreadNew+0xd4>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b5b      	cmp	r3, #91	; 0x5b
 8001498:	d90a      	bls.n	80014b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <osThreadNew+0xd4>
        mem = 1;
 80014aa:	2301      	movs	r3, #1
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ae:	e010      	b.n	80014d2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10c      	bne.n	80014d2 <osThreadNew+0xf6>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d108      	bne.n	80014d2 <osThreadNew+0xf6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d104      	bne.n	80014d2 <osThreadNew+0xf6>
          mem = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80014cc:	e001      	b.n	80014d2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80014d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d110      	bne.n	80014fa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80014e0:	9202      	str	r2, [sp, #8]
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 fe02 	bl	80020f8 <xTaskCreateStatic>
 80014f4:	4603      	mov	r3, r0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e013      	b.n	8001522 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d110      	bne.n	8001522 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001502:	b29a      	uxth	r2, r3
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 fe49 	bl	80021aa <xTaskCreate>
 8001518:	4603      	mov	r3, r0
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <osThreadNew+0x146>
          hTask = NULL;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001522:	697b      	ldr	r3, [r7, #20]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3738      	adds	r7, #56	; 0x38
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000002c 	.word	0x2000002c

08001530 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001538:	f3ef 8305 	mrs	r3, IPSR
 800153c:	613b      	str	r3, [r7, #16]
  return(result);
 800153e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10f      	bne.n	8001564 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001544:	f3ef 8310 	mrs	r3, PRIMASK
 8001548:	60fb      	str	r3, [r7, #12]
  return(result);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d109      	bne.n	8001564 <osDelay+0x34>
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <osDelay+0x58>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d109      	bne.n	800156c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001558:	f3ef 8311 	mrs	r3, BASEPRI
 800155c:	60bb      	str	r3, [r7, #8]
  return(result);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <osDelay+0x3c>
    stat = osErrorISR;
 8001564:	f06f 0305 	mvn.w	r3, #5
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e007      	b.n	800157c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 ff52 	bl	8002420 <vTaskDelay>
    }
  }

  return (stat);
 800157c:	697b      	ldr	r3, [r7, #20]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000002c 	.word	0x2000002c

0800158c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <vApplicationGetIdleTaskMemory+0x28>)
 800159c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80015a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	601a      	str	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000030 	.word	0x20000030
 80015b8:	2000008c 	.word	0x2000008c

080015bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80015cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <vApplicationGetTimerTaskMemory+0x30>)
 80015d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015da:	601a      	str	r2, [r3, #0]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2000028c 	.word	0x2000028c
 80015ec:	200002e8 	.word	0x200002e8

080015f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f103 0208 	add.w	r2, r3, #8
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f103 0208 	add.w	r2, r3, #8
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f103 0208 	add.w	r2, r3, #8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a2:	d103      	bne.n	80016ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e00c      	b.n	80016c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3308      	adds	r3, #8
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e002      	b.n	80016ba <vListInsert+0x2e>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d2f6      	bcs.n	80016b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6892      	ldr	r2, [r2, #8]
 8001712:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6852      	ldr	r2, [r2, #4]
 800171c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	d103      	bne.n	8001730 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	1e5a      	subs	r2, r3, #1
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
	...

08001750 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001768:	f383 8811 	msr	BASEPRI, r3
 800176c:	f3bf 8f6f 	isb	sy
 8001770:	f3bf 8f4f 	dsb	sy
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	e7fe      	b.n	8001776 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001778:	f001 ff96 	bl	80036a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001784:	68f9      	ldr	r1, [r7, #12]
 8001786:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	441a      	add	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a8:	3b01      	subs	r3, #1
 80017aa:	68f9      	ldr	r1, [r7, #12]
 80017ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	441a      	add	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	22ff      	movs	r2, #255	; 0xff
 80017bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	22ff      	movs	r2, #255	; 0xff
 80017c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d114      	bne.n	80017f8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01a      	beq.n	800180c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3310      	adds	r3, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 f8d8 	bl	8002990 <xTaskRemoveFromEventList>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d012      	beq.n	800180c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <xQueueGenericReset+0xcc>)
 80017e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	f3bf 8f6f 	isb	sy
 80017f6:	e009      	b.n	800180c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3310      	adds	r3, #16
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fef7 	bl	80015f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3324      	adds	r3, #36	; 0x24
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fef2 	bl	80015f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800180c:	f001 ff7a 	bl	8003704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001810:	2301      	movs	r3, #1
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000ed04 	.word	0xe000ed04

08001820 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <xQueueGenericCreateStatic+0x28>
 8001834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001838:	f383 8811 	msr	BASEPRI, r3
 800183c:	f3bf 8f6f 	isb	sy
 8001840:	f3bf 8f4f 	dsb	sy
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
 8001846:	e7fe      	b.n	8001846 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <xQueueGenericCreateStatic+0x42>
 800184e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001852:	f383 8811 	msr	BASEPRI, r3
 8001856:	f3bf 8f6f 	isb	sy
 800185a:	f3bf 8f4f 	dsb	sy
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
 8001860:	e7fe      	b.n	8001860 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <xQueueGenericCreateStatic+0x4e>
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <xQueueGenericCreateStatic+0x52>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <xQueueGenericCreateStatic+0x54>
 8001872:	2300      	movs	r3, #0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <xQueueGenericCreateStatic+0x6c>
 8001878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187c:	f383 8811 	msr	BASEPRI, r3
 8001880:	f3bf 8f6f 	isb	sy
 8001884:	f3bf 8f4f 	dsb	sy
 8001888:	623b      	str	r3, [r7, #32]
 800188a:	e7fe      	b.n	800188a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <xQueueGenericCreateStatic+0x78>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <xQueueGenericCreateStatic+0x7c>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <xQueueGenericCreateStatic+0x7e>
 800189c:	2300      	movs	r3, #0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <xQueueGenericCreateStatic+0x96>
 80018a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a6:	f383 8811 	msr	BASEPRI, r3
 80018aa:	f3bf 8f6f 	isb	sy
 80018ae:	f3bf 8f4f 	dsb	sy
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	e7fe      	b.n	80018b4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80018b6:	2350      	movs	r3, #80	; 0x50
 80018b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b50      	cmp	r3, #80	; 0x50
 80018be:	d009      	beq.n	80018d4 <xQueueGenericCreateStatic+0xb4>
 80018c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c4:	f383 8811 	msr	BASEPRI, r3
 80018c8:	f3bf 8f6f 	isb	sy
 80018cc:	f3bf 8f4f 	dsb	sy
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	e7fe      	b.n	80018d2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80018d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00d      	beq.n	80018fa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80018e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	4613      	mov	r3, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f805 	bl	8001904 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3730      	adds	r7, #48	; 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d103      	bne.n	8001920 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e002      	b.n	8001926 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001932:	2101      	movs	r1, #1
 8001934:	69b8      	ldr	r0, [r7, #24]
 8001936:	f7ff ff0b 	bl	8001750 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	; 0x38
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800195a:	2300      	movs	r3, #0
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <xQueueGenericSend+0x30>
 8001968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196c:	f383 8811 	msr	BASEPRI, r3
 8001970:	f3bf 8f6f 	isb	sy
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
 800197a:	e7fe      	b.n	800197a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <xQueueGenericSend+0x3e>
 8001982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <xQueueGenericSend+0x42>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <xQueueGenericSend+0x44>
 800198e:	2300      	movs	r3, #0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d109      	bne.n	80019a8 <xQueueGenericSend+0x5c>
 8001994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001998:	f383 8811 	msr	BASEPRI, r3
 800199c:	f3bf 8f6f 	isb	sy
 80019a0:	f3bf 8f4f 	dsb	sy
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
 80019a6:	e7fe      	b.n	80019a6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d103      	bne.n	80019b6 <xQueueGenericSend+0x6a>
 80019ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <xQueueGenericSend+0x6e>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <xQueueGenericSend+0x70>
 80019ba:	2300      	movs	r3, #0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <xQueueGenericSend+0x88>
 80019c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c4:	f383 8811 	msr	BASEPRI, r3
 80019c8:	f3bf 8f6f 	isb	sy
 80019cc:	f3bf 8f4f 	dsb	sy
 80019d0:	623b      	str	r3, [r7, #32]
 80019d2:	e7fe      	b.n	80019d2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80019d4:	f001 f996 	bl	8002d04 <xTaskGetSchedulerState>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <xQueueGenericSend+0x98>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <xQueueGenericSend+0x9c>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <xQueueGenericSend+0x9e>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <xQueueGenericSend+0xb6>
 80019ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f2:	f383 8811 	msr	BASEPRI, r3
 80019f6:	f3bf 8f6f 	isb	sy
 80019fa:	f3bf 8f4f 	dsb	sy
 80019fe:	61fb      	str	r3, [r7, #28]
 8001a00:	e7fe      	b.n	8001a00 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001a02:	f001 fe51 	bl	80036a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d302      	bcc.n	8001a18 <xQueueGenericSend+0xcc>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d129      	bne.n	8001a6c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a1e:	f000 f9ff 	bl	8001e20 <prvCopyDataToQueue>
 8001a22:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d010      	beq.n	8001a4e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2e:	3324      	adds	r3, #36	; 0x24
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 ffad 	bl	8002990 <xTaskRemoveFromEventList>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001a3c:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <xQueueGenericSend+0x1f0>)
 8001a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	f3bf 8f4f 	dsb	sy
 8001a48:	f3bf 8f6f 	isb	sy
 8001a4c:	e00a      	b.n	8001a64 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001a54:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <xQueueGenericSend+0x1f0>)
 8001a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	f3bf 8f4f 	dsb	sy
 8001a60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001a64:	f001 fe4e 	bl	8003704 <vPortExitCritical>
				return pdPASS;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e063      	b.n	8001b34 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d103      	bne.n	8001a7a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001a72:	f001 fe47 	bl	8003704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e05c      	b.n	8001b34 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d106      	bne.n	8001a8e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 ffe5 	bl	8002a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001a8e:	f001 fe39 	bl	8003704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001a92:	f000 fd5d 	bl	8002550 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a96:	f001 fe07 	bl	80036a8 <vPortEnterCritical>
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa6:	d103      	bne.n	8001ab0 <xQueueGenericSend+0x164>
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d103      	bne.n	8001ac6 <xQueueGenericSend+0x17a>
 8001abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ac6:	f001 fe1d 	bl	8003704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001aca:	1d3a      	adds	r2, r7, #4
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 ffd4 	bl	8002a80 <xTaskCheckForTimeOut>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d124      	bne.n	8001b28 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ae0:	f000 fa96 	bl	8002010 <prvIsQueueFull>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d018      	beq.n	8001b1c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aec:	3310      	adds	r3, #16
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 fefe 	bl	80028f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001afa:	f000 fa21 	bl	8001f40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001afe:	f000 fd35 	bl	800256c <xTaskResumeAll>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f47f af7c 	bne.w	8001a02 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <xQueueGenericSend+0x1f0>)
 8001b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f3bf 8f4f 	dsb	sy
 8001b16:	f3bf 8f6f 	isb	sy
 8001b1a:	e772      	b.n	8001a02 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b1e:	f000 fa0f 	bl	8001f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b22:	f000 fd23 	bl	800256c <xTaskResumeAll>
 8001b26:	e76c      	b.n	8001a02 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b2a:	f000 fa09 	bl	8001f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b2e:	f000 fd1d 	bl	800256c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001b32:	2300      	movs	r3, #0
		}
	}
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3738      	adds	r7, #56	; 0x38
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	e000ed04 	.word	0xe000ed04

08001b40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08e      	sub	sp, #56	; 0x38
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <xQueueGenericSendFromISR+0x2c>
 8001b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5c:	f383 8811 	msr	BASEPRI, r3
 8001b60:	f3bf 8f6f 	isb	sy
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	e7fe      	b.n	8001b6a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <xQueueGenericSendFromISR+0x3a>
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <xQueueGenericSendFromISR+0x3e>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <xQueueGenericSendFromISR+0x40>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <xQueueGenericSendFromISR+0x58>
 8001b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b88:	f383 8811 	msr	BASEPRI, r3
 8001b8c:	f3bf 8f6f 	isb	sy
 8001b90:	f3bf 8f4f 	dsb	sy
 8001b94:	623b      	str	r3, [r7, #32]
 8001b96:	e7fe      	b.n	8001b96 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d103      	bne.n	8001ba6 <xQueueGenericSendFromISR+0x66>
 8001b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <xQueueGenericSendFromISR+0x6a>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <xQueueGenericSendFromISR+0x6c>
 8001baa:	2300      	movs	r3, #0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <xQueueGenericSendFromISR+0x84>
 8001bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb4:	f383 8811 	msr	BASEPRI, r3
 8001bb8:	f3bf 8f6f 	isb	sy
 8001bbc:	f3bf 8f4f 	dsb	sy
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e7fe      	b.n	8001bc2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001bc4:	f001 fe2a 	bl	800381c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001bc8:	f3ef 8211 	mrs	r2, BASEPRI
 8001bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd0:	f383 8811 	msr	BASEPRI, r3
 8001bd4:	f3bf 8f6f 	isb	sy
 8001bd8:	f3bf 8f4f 	dsb	sy
 8001bdc:	61ba      	str	r2, [r7, #24]
 8001bde:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001be0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d302      	bcc.n	8001bf6 <xQueueGenericSendFromISR+0xb6>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d12c      	bne.n	8001c50 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c06:	f000 f90b 	bl	8001e20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001c0a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d112      	bne.n	8001c3a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d016      	beq.n	8001c4a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1e:	3324      	adds	r3, #36	; 0x24
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 feb5 	bl	8002990 <xTaskRemoveFromEventList>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00e      	beq.n	8001c4a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e007      	b.n	8001c4a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001c3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c3e:	3301      	adds	r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	b25a      	sxtb	r2, r3
 8001c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001c4e:	e001      	b.n	8001c54 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
 8001c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c56:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3738      	adds	r7, #56	; 0x38
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <xQueueReceive+0x2e>
	__asm volatile
 8001c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	e7fe      	b.n	8001c94 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d103      	bne.n	8001ca4 <xQueueReceive+0x3c>
 8001c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <xQueueReceive+0x40>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <xQueueReceive+0x42>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <xQueueReceive+0x5a>
 8001cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb2:	f383 8811 	msr	BASEPRI, r3
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	f3bf 8f4f 	dsb	sy
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	e7fe      	b.n	8001cc0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cc2:	f001 f81f 	bl	8002d04 <xTaskGetSchedulerState>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <xQueueReceive+0x6a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <xQueueReceive+0x6e>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <xQueueReceive+0x70>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <xQueueReceive+0x88>
 8001cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce0:	f383 8811 	msr	BASEPRI, r3
 8001ce4:	f3bf 8f6f 	isb	sy
 8001ce8:	f3bf 8f4f 	dsb	sy
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	e7fe      	b.n	8001cee <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001cf0:	f001 fcda 	bl	80036a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01f      	beq.n	8001d40 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d04:	f000 f8f6 	bl	8001ef4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00f      	beq.n	8001d38 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	3310      	adds	r3, #16
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fe37 	bl	8002990 <xTaskRemoveFromEventList>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001d28:	4b3c      	ldr	r3, [pc, #240]	; (8001e1c <xQueueReceive+0x1b4>)
 8001d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001d38:	f001 fce4 	bl	8003704 <vPortExitCritical>
				return pdPASS;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e069      	b.n	8001e14 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d103      	bne.n	8001d4e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001d46:	f001 fcdd 	bl	8003704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e062      	b.n	8001e14 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d106      	bne.n	8001d62 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fe7b 	bl	8002a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d62:	f001 fccf 	bl	8003704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d66:	f000 fbf3 	bl	8002550 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d6a:	f001 fc9d 	bl	80036a8 <vPortEnterCritical>
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7a:	d103      	bne.n	8001d84 <xQueueReceive+0x11c>
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d103      	bne.n	8001d9a <xQueueReceive+0x132>
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d9a:	f001 fcb3 	bl	8003704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d9e:	1d3a      	adds	r2, r7, #4
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fe6a 	bl	8002a80 <xTaskCheckForTimeOut>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d123      	bne.n	8001dfa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001db4:	f000 f916 	bl	8001fe4 <prvIsQueueEmpty>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d017      	beq.n	8001dee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	3324      	adds	r3, #36	; 0x24
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 fd94 	bl	80028f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dce:	f000 f8b7 	bl	8001f40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001dd2:	f000 fbcb 	bl	800256c <xTaskResumeAll>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d189      	bne.n	8001cf0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <xQueueReceive+0x1b4>)
 8001dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	f3bf 8f6f 	isb	sy
 8001dec:	e780      	b.n	8001cf0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001df0:	f000 f8a6 	bl	8001f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001df4:	f000 fbba 	bl	800256c <xTaskResumeAll>
 8001df8:	e77a      	b.n	8001cf0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dfc:	f000 f8a0 	bl	8001f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e00:	f000 fbb4 	bl	800256c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e06:	f000 f8ed 	bl	8001fe4 <prvIsQueueEmpty>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f43f af6f 	beq.w	8001cf0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001e12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3730      	adds	r7, #48	; 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	e000ed04 	.word	0xe000ed04

08001e20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d14d      	bne.n	8001ee2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 ff78 	bl	8002d40 <xTaskPriorityDisinherit>
 8001e50:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	e043      	b.n	8001ee2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d119      	bne.n	8001e94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6898      	ldr	r0, [r3, #8]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	f001 ff0a 	bl	8003c84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	441a      	add	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d32b      	bcc.n	8001ee2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	e026      	b.n	8001ee2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	68d8      	ldr	r0, [r3, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	f001 fef0 	bl	8003c84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	425b      	negs	r3, r3
 8001eae:	441a      	add	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d207      	bcs.n	8001ed0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	425b      	negs	r3, r3
 8001eca:	441a      	add	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d105      	bne.n	8001ee2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001eea:	697b      	ldr	r3, [r7, #20]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d018      	beq.n	8001f38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	441a      	add	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d303      	bcc.n	8001f28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68d9      	ldr	r1, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	461a      	mov	r2, r3
 8001f32:	6838      	ldr	r0, [r7, #0]
 8001f34:	f001 fea6 	bl	8003c84 <memcpy>
	}
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001f48:	f001 fbae 	bl	80036a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f54:	e011      	b.n	8001f7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d012      	beq.n	8001f84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3324      	adds	r3, #36	; 0x24
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fd14 	bl	8002990 <xTaskRemoveFromEventList>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001f6e:	f000 fde7 	bl	8002b40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	dce9      	bgt.n	8001f56 <prvUnlockQueue+0x16>
 8001f82:	e000      	b.n	8001f86 <prvUnlockQueue+0x46>
					break;
 8001f84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	22ff      	movs	r2, #255	; 0xff
 8001f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001f8e:	f001 fbb9 	bl	8003704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001f92:	f001 fb89 	bl	80036a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f9e:	e011      	b.n	8001fc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d012      	beq.n	8001fce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3310      	adds	r3, #16
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fcef 	bl	8002990 <xTaskRemoveFromEventList>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001fb8:	f000 fdc2 	bl	8002b40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001fbc:	7bbb      	ldrb	r3, [r7, #14]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	dce9      	bgt.n	8001fa0 <prvUnlockQueue+0x60>
 8001fcc:	e000      	b.n	8001fd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001fce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	22ff      	movs	r2, #255	; 0xff
 8001fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001fd8:	f001 fb94 	bl	8003704 <vPortExitCritical>
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001fec:	f001 fb5c 	bl	80036a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e001      	b.n	8002002 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002002:	f001 fb7f 	bl	8003704 <vPortExitCritical>

	return xReturn;
 8002006:	68fb      	ldr	r3, [r7, #12]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002018:	f001 fb46 	bl	80036a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	429a      	cmp	r2, r3
 8002026:	d102      	bne.n	800202e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002028:	2301      	movs	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e001      	b.n	8002032 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002032:	f001 fb67 	bl	8003704 <vPortExitCritical>

	return xReturn;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	e014      	b.n	800207a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <vQueueAddToRegistry+0x4c>)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10b      	bne.n	8002074 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800205c:	490b      	ldr	r1, [pc, #44]	; (800208c <vQueueAddToRegistry+0x4c>)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <vQueueAddToRegistry+0x4c>)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002072:	e005      	b.n	8002080 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3301      	adds	r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b07      	cmp	r3, #7
 800207e:	d9e7      	bls.n	8002050 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20001984 	.word	0x20001984

08002090 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80020a0:	f001 fb02 	bl	80036a8 <vPortEnterCritical>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d103      	bne.n	80020ba <vQueueWaitForMessageRestricted+0x2a>
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c6:	d103      	bne.n	80020d0 <vQueueWaitForMessageRestricted+0x40>
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020d0:	f001 fb18 	bl	8003704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d106      	bne.n	80020ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3324      	adds	r3, #36	; 0x24
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fc29 	bl	800293c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff28 	bl	8001f40 <prvUnlockQueue>
	}
 80020f0:	bf00      	nop
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08e      	sub	sp, #56	; 0x38
 80020fc:	af04      	add	r7, sp, #16
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <xTaskCreateStatic+0x28>
 800210c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002110:	f383 8811 	msr	BASEPRI, r3
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	f3bf 8f4f 	dsb	sy
 800211c:	623b      	str	r3, [r7, #32]
 800211e:	e7fe      	b.n	800211e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <xTaskCreateStatic+0x42>
 8002126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212a:	f383 8811 	msr	BASEPRI, r3
 800212e:	f3bf 8f6f 	isb	sy
 8002132:	f3bf 8f4f 	dsb	sy
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e7fe      	b.n	8002138 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800213a:	235c      	movs	r3, #92	; 0x5c
 800213c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b5c      	cmp	r3, #92	; 0x5c
 8002142:	d009      	beq.n	8002158 <xTaskCreateStatic+0x60>
 8002144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	e7fe      	b.n	8002156 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215a:	2b00      	cmp	r3, #0
 800215c:	d01e      	beq.n	800219c <xTaskCreateStatic+0xa4>
 800215e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01b      	beq.n	800219c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800216c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	2202      	movs	r2, #2
 8002172:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002176:	2300      	movs	r3, #0
 8002178:	9303      	str	r3, [sp, #12]
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	9302      	str	r3, [sp, #8]
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f850 	bl	8002234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002196:	f000 f8d3 	bl	8002340 <prvAddNewTaskToReadyList>
 800219a:	e001      	b.n	80021a0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80021a0:	697b      	ldr	r3, [r7, #20]
	}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3728      	adds	r7, #40	; 0x28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b08c      	sub	sp, #48	; 0x30
 80021ae:	af04      	add	r7, sp, #16
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4618      	mov	r0, r3
 80021c0:	f001 fb68 	bl	8003894 <pvPortMalloc>
 80021c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80021cc:	205c      	movs	r0, #92	; 0x5c
 80021ce:	f001 fb61 	bl	8003894 <pvPortMalloc>
 80021d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
 80021e0:	e005      	b.n	80021ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f001 fc18 	bl	8003a18 <vPortFree>
 80021e8:	e001      	b.n	80021ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d017      	beq.n	8002224 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	2300      	movs	r3, #0
 8002200:	9303      	str	r3, [sp, #12]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f80e 	bl	8002234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002218:	69f8      	ldr	r0, [r7, #28]
 800221a:	f000 f891 	bl	8002340 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800221e:	2301      	movs	r3, #1
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	e002      	b.n	800222a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800222a:	69bb      	ldr	r3, [r7, #24]
	}
 800222c:	4618      	mov	r0, r3
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	461a      	mov	r2, r3
 800224c:	21a5      	movs	r1, #165	; 0xa5
 800224e:	f001 fd24 	bl	8003c9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800225c:	3b01      	subs	r3, #1
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	f023 0307 	bic.w	r3, r3, #7
 800226a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <prvInitialiseNewTask+0x56>
 8002276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	e7fe      	b.n	8002288 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e012      	b.n	80022b6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	7819      	ldrb	r1, [r3, #0]
 8002298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	3334      	adds	r3, #52	; 0x34
 80022a0:	460a      	mov	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	4413      	add	r3, r2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	3301      	adds	r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d9e9      	bls.n	8002290 <prvInitialiseNewTask+0x5c>
 80022bc:	e000      	b.n	80022c0 <prvInitialiseNewTask+0x8c>
		{
			break;
 80022be:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	2b37      	cmp	r3, #55	; 0x37
 80022cc:	d901      	bls.n	80022d2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022ce:	2337      	movs	r3, #55	; 0x37
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	2200      	movs	r2, #0
 80022e2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	3304      	adds	r3, #4
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff f9a0 	bl	800162e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	3318      	adds	r3, #24
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f99b 	bl	800162e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	2200      	movs	r2, #0
 8002312:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	68f9      	ldr	r1, [r7, #12]
 8002320:	69b8      	ldr	r0, [r7, #24]
 8002322:	f001 f8d7 	bl	80034d4 <pxPortInitialiseStack>
 8002326:	4602      	mov	r2, r0
 8002328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002336:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002338:	bf00      	nop
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002348:	f001 f9ae 	bl	80036a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	4a2c      	ldr	r2, [pc, #176]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 8002354:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002356:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <prvAddNewTaskToReadyList+0xc8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800235e:	4a2a      	ldr	r2, [pc, #168]	; (8002408 <prvAddNewTaskToReadyList+0xc8>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d110      	bne.n	800238e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800236c:	f000 fc0c 	bl	8002b88 <prvInitialiseTaskLists>
 8002370:	e00d      	b.n	800238e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <prvAddNewTaskToReadyList+0xcc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <prvAddNewTaskToReadyList+0xc8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	429a      	cmp	r2, r3
 8002386:	d802      	bhi.n	800238e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002388:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <prvAddNewTaskToReadyList+0xc8>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <prvAddNewTaskToReadyList+0xd0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <prvAddNewTaskToReadyList+0xd0>)
 8002396:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <prvAddNewTaskToReadyList+0xd0>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <prvAddNewTaskToReadyList+0xd4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d903      	bls.n	80023b4 <prvAddNewTaskToReadyList+0x74>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	4a18      	ldr	r2, [pc, #96]	; (8002414 <prvAddNewTaskToReadyList+0xd4>)
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4a15      	ldr	r2, [pc, #84]	; (8002418 <prvAddNewTaskToReadyList+0xd8>)
 80023c2:	441a      	add	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4610      	mov	r0, r2
 80023cc:	f7ff f93b 	bl	8001646 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80023d0:	f001 f998 	bl	8003704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <prvAddNewTaskToReadyList+0xcc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00e      	beq.n	80023fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <prvAddNewTaskToReadyList+0xc8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d207      	bcs.n	80023fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <prvAddNewTaskToReadyList+0xdc>)
 80023ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	f3bf 8f4f 	dsb	sy
 80023f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000bbc 	.word	0x20000bbc
 8002408:	200006e8 	.word	0x200006e8
 800240c:	20000bc8 	.word	0x20000bc8
 8002410:	20000bd8 	.word	0x20000bd8
 8002414:	20000bc4 	.word	0x20000bc4
 8002418:	200006ec 	.word	0x200006ec
 800241c:	e000ed04 	.word	0xe000ed04

08002420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d016      	beq.n	8002460 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <vTaskDelay+0x60>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <vTaskDelay+0x2e>
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	e7fe      	b.n	800244c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800244e:	f000 f87f 	bl	8002550 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002452:	2100      	movs	r1, #0
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fcdf 	bl	8002e18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800245a:	f000 f887 	bl	800256c <xTaskResumeAll>
 800245e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d107      	bne.n	8002476 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <vTaskDelay+0x64>)
 8002468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000be4 	.word	0x20000be4
 8002484:	e000ed04 	.word	0xe000ed04

08002488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002496:	463a      	mov	r2, r7
 8002498:	1d39      	adds	r1, r7, #4
 800249a:	f107 0308 	add.w	r3, r7, #8
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f874 	bl	800158c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80024a4:	6839      	ldr	r1, [r7, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	9202      	str	r2, [sp, #8]
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	2300      	movs	r3, #0
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	460a      	mov	r2, r1
 80024b6:	4920      	ldr	r1, [pc, #128]	; (8002538 <vTaskStartScheduler+0xb0>)
 80024b8:	4820      	ldr	r0, [pc, #128]	; (800253c <vTaskStartScheduler+0xb4>)
 80024ba:	f7ff fe1d 	bl	80020f8 <xTaskCreateStatic>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <vTaskStartScheduler+0xb8>)
 80024c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80024c4:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <vTaskStartScheduler+0xb8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80024cc:	2301      	movs	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e001      	b.n	80024d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d102      	bne.n	80024e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80024dc:	f000 fcf0 	bl	8002ec0 <xTimerCreateTimerTask>
 80024e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d115      	bne.n	8002514 <vTaskStartScheduler+0x8c>
 80024e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <vTaskStartScheduler+0xbc>)
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <vTaskStartScheduler+0xc0>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <vTaskStartScheduler+0xc4>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800250e:	f001 f85b 	bl	80035c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002512:	e00d      	b.n	8002530 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d109      	bne.n	8002530 <vTaskStartScheduler+0xa8>
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e7fe      	b.n	800252e <vTaskStartScheduler+0xa6>
}
 8002530:	bf00      	nop
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	08003ce4 	.word	0x08003ce4
 800253c:	08002b59 	.word	0x08002b59
 8002540:	20000be0 	.word	0x20000be0
 8002544:	20000bdc 	.word	0x20000bdc
 8002548:	20000bc8 	.word	0x20000bc8
 800254c:	20000bc0 	.word	0x20000bc0

08002550 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <vTaskSuspendAll+0x18>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	4a03      	ldr	r2, [pc, #12]	; (8002568 <vTaskSuspendAll+0x18>)
 800255c:	6013      	str	r3, [r2, #0]
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000be4 	.word	0x20000be4

0800256c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <xTaskResumeAll+0x114>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <xTaskResumeAll+0x2a>
 8002582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	e7fe      	b.n	8002594 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002596:	f001 f887 	bl	80036a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800259a:	4b39      	ldr	r3, [pc, #228]	; (8002680 <xTaskResumeAll+0x114>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3b01      	subs	r3, #1
 80025a0:	4a37      	ldr	r2, [pc, #220]	; (8002680 <xTaskResumeAll+0x114>)
 80025a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <xTaskResumeAll+0x114>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d162      	bne.n	8002672 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <xTaskResumeAll+0x118>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d05e      	beq.n	8002672 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025b4:	e02f      	b.n	8002616 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <xTaskResumeAll+0x11c>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3318      	adds	r3, #24
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f89a 	bl	80016fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff f895 	bl	80016fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d6:	4b2d      	ldr	r3, [pc, #180]	; (800268c <xTaskResumeAll+0x120>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d903      	bls.n	80025e6 <xTaskResumeAll+0x7a>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	4a2a      	ldr	r2, [pc, #168]	; (800268c <xTaskResumeAll+0x120>)
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4a27      	ldr	r2, [pc, #156]	; (8002690 <xTaskResumeAll+0x124>)
 80025f4:	441a      	add	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3304      	adds	r3, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	4610      	mov	r0, r2
 80025fe:	f7ff f822 	bl	8001646 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <xTaskResumeAll+0x128>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	429a      	cmp	r2, r3
 800260e:	d302      	bcc.n	8002616 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <xTaskResumeAll+0x12c>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002616:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <xTaskResumeAll+0x11c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1cb      	bne.n	80025b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002624:	f000 fb4a 	bl	8002cbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002628:	4b1c      	ldr	r3, [pc, #112]	; (800269c <xTaskResumeAll+0x130>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d010      	beq.n	8002656 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002634:	f000 f844 	bl	80026c0 <xTaskIncrementTick>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <xTaskResumeAll+0x12c>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f1      	bne.n	8002634 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <xTaskResumeAll+0x130>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <xTaskResumeAll+0x12c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800265e:	2301      	movs	r3, #1
 8002660:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <xTaskResumeAll+0x134>)
 8002664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002672:	f001 f847 	bl	8003704 <vPortExitCritical>

	return xAlreadyYielded;
 8002676:	68bb      	ldr	r3, [r7, #8]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000be4 	.word	0x20000be4
 8002684:	20000bbc 	.word	0x20000bbc
 8002688:	20000b7c 	.word	0x20000b7c
 800268c:	20000bc4 	.word	0x20000bc4
 8002690:	200006ec 	.word	0x200006ec
 8002694:	200006e8 	.word	0x200006e8
 8002698:	20000bd0 	.word	0x20000bd0
 800269c:	20000bcc 	.word	0x20000bcc
 80026a0:	e000ed04 	.word	0xe000ed04

080026a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <xTaskGetTickCount+0x18>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	20000bc0 	.word	0x20000bc0

080026c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ca:	4b51      	ldr	r3, [pc, #324]	; (8002810 <xTaskIncrementTick+0x150>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 808d 	bne.w	80027ee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026d4:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <xTaskIncrementTick+0x154>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80026dc:	4a4d      	ldr	r2, [pc, #308]	; (8002814 <xTaskIncrementTick+0x154>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d11f      	bne.n	8002728 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80026e8:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <xTaskIncrementTick+0x158>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <xTaskIncrementTick+0x46>
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	e7fe      	b.n	8002704 <xTaskIncrementTick+0x44>
 8002706:	4b44      	ldr	r3, [pc, #272]	; (8002818 <xTaskIncrementTick+0x158>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	4b43      	ldr	r3, [pc, #268]	; (800281c <xTaskIncrementTick+0x15c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a41      	ldr	r2, [pc, #260]	; (8002818 <xTaskIncrementTick+0x158>)
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4a41      	ldr	r2, [pc, #260]	; (800281c <xTaskIncrementTick+0x15c>)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <xTaskIncrementTick+0x160>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	4a3f      	ldr	r2, [pc, #252]	; (8002820 <xTaskIncrementTick+0x160>)
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	f000 faca 	bl	8002cbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002728:	4b3e      	ldr	r3, [pc, #248]	; (8002824 <xTaskIncrementTick+0x164>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	429a      	cmp	r2, r3
 8002730:	d34e      	bcc.n	80027d0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002732:	4b39      	ldr	r3, [pc, #228]	; (8002818 <xTaskIncrementTick+0x158>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <xTaskIncrementTick+0x80>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <xTaskIncrementTick+0x82>
 8002740:	2300      	movs	r3, #0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d004      	beq.n	8002750 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002746:	4b37      	ldr	r3, [pc, #220]	; (8002824 <xTaskIncrementTick+0x164>)
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	601a      	str	r2, [r3, #0]
					break;
 800274e:	e03f      	b.n	80027d0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002750:	4b31      	ldr	r3, [pc, #196]	; (8002818 <xTaskIncrementTick+0x158>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	d203      	bcs.n	8002770 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002768:	4a2e      	ldr	r2, [pc, #184]	; (8002824 <xTaskIncrementTick+0x164>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6013      	str	r3, [r2, #0]
						break;
 800276e:	e02f      	b.n	80027d0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	3304      	adds	r3, #4
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe ffc1 	bl	80016fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3318      	adds	r3, #24
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe ffb8 	bl	80016fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002790:	4b25      	ldr	r3, [pc, #148]	; (8002828 <xTaskIncrementTick+0x168>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d903      	bls.n	80027a0 <xTaskIncrementTick+0xe0>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	4a22      	ldr	r2, [pc, #136]	; (8002828 <xTaskIncrementTick+0x168>)
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4a1f      	ldr	r2, [pc, #124]	; (800282c <xTaskIncrementTick+0x16c>)
 80027ae:	441a      	add	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f7fe ff45 	bl	8001646 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <xTaskIncrementTick+0x170>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d3b3      	bcc.n	8002732 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80027ca:	2301      	movs	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027ce:	e7b0      	b.n	8002732 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <xTaskIncrementTick+0x170>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d6:	4915      	ldr	r1, [pc, #84]	; (800282c <xTaskIncrementTick+0x16c>)
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d907      	bls.n	80027f8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80027e8:	2301      	movs	r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	e004      	b.n	80027f8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <xTaskIncrementTick+0x174>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <xTaskIncrementTick+0x174>)
 80027f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <xTaskIncrementTick+0x178>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002800:	2301      	movs	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002804:	697b      	ldr	r3, [r7, #20]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000be4 	.word	0x20000be4
 8002814:	20000bc0 	.word	0x20000bc0
 8002818:	20000b74 	.word	0x20000b74
 800281c:	20000b78 	.word	0x20000b78
 8002820:	20000bd4 	.word	0x20000bd4
 8002824:	20000bdc 	.word	0x20000bdc
 8002828:	20000bc4 	.word	0x20000bc4
 800282c:	200006ec 	.word	0x200006ec
 8002830:	200006e8 	.word	0x200006e8
 8002834:	20000bcc 	.word	0x20000bcc
 8002838:	20000bd0 	.word	0x20000bd0

0800283c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002842:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <vTaskSwitchContext+0xa4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <vTaskSwitchContext+0xa8>)
 800284c:	2201      	movs	r2, #1
 800284e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002850:	e040      	b.n	80028d4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <vTaskSwitchContext+0xa8>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <vTaskSwitchContext+0xac>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	e00f      	b.n	8002880 <vTaskSwitchContext+0x44>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <vTaskSwitchContext+0x3e>
 8002866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286a:	f383 8811 	msr	BASEPRI, r3
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	e7fe      	b.n	8002878 <vTaskSwitchContext+0x3c>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3b01      	subs	r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	491a      	ldr	r1, [pc, #104]	; (80028ec <vTaskSwitchContext+0xb0>)
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0e5      	beq.n	8002860 <vTaskSwitchContext+0x24>
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4a13      	ldr	r2, [pc, #76]	; (80028ec <vTaskSwitchContext+0xb0>)
 80028a0:	4413      	add	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3308      	adds	r3, #8
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d104      	bne.n	80028c4 <vTaskSwitchContext+0x88>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <vTaskSwitchContext+0xb4>)
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <vTaskSwitchContext+0xac>)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000be4 	.word	0x20000be4
 80028e4:	20000bd0 	.word	0x20000bd0
 80028e8:	20000bc4 	.word	0x20000bc4
 80028ec:	200006ec 	.word	0x200006ec
 80028f0:	200006e8 	.word	0x200006e8

080028f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <vTaskPlaceOnEventList+0x24>
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e7fe      	b.n	8002916 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <vTaskPlaceOnEventList+0x44>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3318      	adds	r3, #24
 800291e:	4619      	mov	r1, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7fe feb3 	bl	800168c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002926:	2101      	movs	r1, #1
 8002928:	6838      	ldr	r0, [r7, #0]
 800292a:	f000 fa75 	bl	8002e18 <prvAddCurrentTaskToDelayedList>
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200006e8 	.word	0x200006e8

0800293c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <vTaskPlaceOnEventListRestricted+0x26>
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	e7fe      	b.n	8002960 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <vTaskPlaceOnEventListRestricted+0x50>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3318      	adds	r3, #24
 8002968:	4619      	mov	r1, r3
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7fe fe6b 	bl	8001646 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68b8      	ldr	r0, [r7, #8]
 8002980:	f000 fa4a 	bl	8002e18 <prvAddCurrentTaskToDelayedList>
	}
 8002984:	bf00      	nop
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	200006e8 	.word	0x200006e8

08002990 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <xTaskRemoveFromEventList+0x2a>
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	e7fe      	b.n	80029b8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	3318      	adds	r3, #24
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fe9c 	bl	80016fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <xTaskRemoveFromEventList+0xac>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11d      	bne.n	8002a08 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	3304      	adds	r3, #4
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fe93 	bl	80016fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <xTaskRemoveFromEventList+0xb0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d903      	bls.n	80029ea <xTaskRemoveFromEventList+0x5a>
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <xTaskRemoveFromEventList+0xb0>)
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <xTaskRemoveFromEventList+0xb4>)
 80029f8:	441a      	add	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	3304      	adds	r3, #4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4610      	mov	r0, r2
 8002a02:	f7fe fe20 	bl	8001646 <vListInsertEnd>
 8002a06:	e005      	b.n	8002a14 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	3318      	adds	r3, #24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	480e      	ldr	r0, [pc, #56]	; (8002a48 <xTaskRemoveFromEventList+0xb8>)
 8002a10:	f7fe fe19 	bl	8001646 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <xTaskRemoveFromEventList+0xbc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d905      	bls.n	8002a2e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002a22:	2301      	movs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <xTaskRemoveFromEventList+0xc0>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e001      	b.n	8002a32 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002a32:	697b      	ldr	r3, [r7, #20]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000be4 	.word	0x20000be4
 8002a40:	20000bc4 	.word	0x20000bc4
 8002a44:	200006ec 	.word	0x200006ec
 8002a48:	20000b7c 	.word	0x20000b7c
 8002a4c:	200006e8 	.word	0x200006e8
 8002a50:	20000bd0 	.word	0x20000bd0

08002a54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <vTaskInternalSetTimeOutState+0x24>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <vTaskInternalSetTimeOutState+0x28>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	605a      	str	r2, [r3, #4]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000bd4 	.word	0x20000bd4
 8002a7c:	20000bc0 	.word	0x20000bc0

08002a80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <xTaskCheckForTimeOut+0x24>
 8002a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	e7fe      	b.n	8002aa2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <xTaskCheckForTimeOut+0x3e>
 8002aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e7fe      	b.n	8002abc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002abe:	f000 fdf3 	bl	80036a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <xTaskCheckForTimeOut+0xb8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ada:	d102      	bne.n	8002ae2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	e023      	b.n	8002b2a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <xTaskCheckForTimeOut+0xbc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d007      	beq.n	8002afe <xTaskCheckForTimeOut+0x7e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d302      	bcc.n	8002afe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	61fb      	str	r3, [r7, #28]
 8002afc:	e015      	b.n	8002b2a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d20b      	bcs.n	8002b20 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	1ad2      	subs	r2, r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff9d 	bl	8002a54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	e004      	b.n	8002b2a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002b2a:	f000 fdeb 	bl	8003704 <vPortExitCritical>

	return xReturn;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000bc0 	.word	0x20000bc0
 8002b3c:	20000bd4 	.word	0x20000bd4

08002b40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <vTaskMissedYield+0x14>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000bd0 	.word	0x20000bd0

08002b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b60:	f000 f852 	bl	8002c08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <prvIdleTask+0x28>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d9f9      	bls.n	8002b60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <prvIdleTask+0x2c>)
 8002b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b7c:	e7f0      	b.n	8002b60 <prvIdleTask+0x8>
 8002b7e:	bf00      	nop
 8002b80:	200006ec 	.word	0x200006ec
 8002b84:	e000ed04 	.word	0xe000ed04

08002b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	e00c      	b.n	8002bae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <prvInitialiseTaskLists+0x60>)
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fd24 	bl	80015f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3301      	adds	r3, #1
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b37      	cmp	r3, #55	; 0x37
 8002bb2:	d9ef      	bls.n	8002b94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002bb4:	480d      	ldr	r0, [pc, #52]	; (8002bec <prvInitialiseTaskLists+0x64>)
 8002bb6:	f7fe fd1b 	bl	80015f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002bba:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <prvInitialiseTaskLists+0x68>)
 8002bbc:	f7fe fd18 	bl	80015f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bc0:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <prvInitialiseTaskLists+0x6c>)
 8002bc2:	f7fe fd15 	bl	80015f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002bc6:	480c      	ldr	r0, [pc, #48]	; (8002bf8 <prvInitialiseTaskLists+0x70>)
 8002bc8:	f7fe fd12 	bl	80015f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002bcc:	480b      	ldr	r0, [pc, #44]	; (8002bfc <prvInitialiseTaskLists+0x74>)
 8002bce:	f7fe fd0f 	bl	80015f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <prvInitialiseTaskLists+0x78>)
 8002bd4:	4a05      	ldr	r2, [pc, #20]	; (8002bec <prvInitialiseTaskLists+0x64>)
 8002bd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <prvInitialiseTaskLists+0x7c>)
 8002bda:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <prvInitialiseTaskLists+0x68>)
 8002bdc:	601a      	str	r2, [r3, #0]
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200006ec 	.word	0x200006ec
 8002bec:	20000b4c 	.word	0x20000b4c
 8002bf0:	20000b60 	.word	0x20000b60
 8002bf4:	20000b7c 	.word	0x20000b7c
 8002bf8:	20000b90 	.word	0x20000b90
 8002bfc:	20000ba8 	.word	0x20000ba8
 8002c00:	20000b74 	.word	0x20000b74
 8002c04:	20000b78 	.word	0x20000b78

08002c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c0e:	e019      	b.n	8002c44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002c10:	f000 fd4a 	bl	80036a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <prvCheckTasksWaitingTermination+0x4c>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe fd6b 	bl	80016fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <prvCheckTasksWaitingTermination+0x50>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <prvCheckTasksWaitingTermination+0x50>)
 8002c2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <prvCheckTasksWaitingTermination+0x54>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <prvCheckTasksWaitingTermination+0x54>)
 8002c38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c3a:	f000 fd63 	bl	8003704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f80e 	bl	8002c60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <prvCheckTasksWaitingTermination+0x54>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e1      	bne.n	8002c10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000b90 	.word	0x20000b90
 8002c58:	20000bbc 	.word	0x20000bbc
 8002c5c:	20000ba4 	.word	0x20000ba4

08002c60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fece 	bl	8003a18 <vPortFree>
				vPortFree( pxTCB );
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fecb 	bl	8003a18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c82:	e017      	b.n	8002cb4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d103      	bne.n	8002c96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fec2 	bl	8003a18 <vPortFree>
	}
 8002c94:	e00e      	b.n	8002cb4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d009      	beq.n	8002cb4 <prvDeleteTCB+0x54>
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e7fe      	b.n	8002cb2 <prvDeleteTCB+0x52>
	}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <prvResetNextTaskUnblockTime+0x40>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <prvResetNextTaskUnblockTime+0x14>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <prvResetNextTaskUnblockTime+0x16>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <prvResetNextTaskUnblockTime+0x44>)
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002cde:	e008      	b.n	8002cf2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <prvResetNextTaskUnblockTime+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <prvResetNextTaskUnblockTime+0x44>)
 8002cf0:	6013      	str	r3, [r2, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	20000b74 	.word	0x20000b74
 8002d00:	20000bdc 	.word	0x20000bdc

08002d04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <xTaskGetSchedulerState+0x34>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002d12:	2301      	movs	r3, #1
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	e008      	b.n	8002d2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <xTaskGetSchedulerState+0x38>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002d20:	2302      	movs	r3, #2
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	e001      	b.n	8002d2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002d2a:	687b      	ldr	r3, [r7, #4]
	}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000bc8 	.word	0x20000bc8
 8002d3c:	20000be4 	.word	0x20000be4

08002d40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d054      	beq.n	8002e00 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002d56:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <xTaskPriorityDisinherit+0xcc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d009      	beq.n	8002d74 <xTaskPriorityDisinherit+0x34>
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e7fe      	b.n	8002d72 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <xTaskPriorityDisinherit+0x50>
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	e7fe      	b.n	8002d8e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d94:	1e5a      	subs	r2, r3, #1
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d02c      	beq.n	8002e00 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d128      	bne.n	8002e00 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	3304      	adds	r3, #4
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe fca2 	bl	80016fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <xTaskPriorityDisinherit+0xd0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d903      	bls.n	8002de0 <xTaskPriorityDisinherit+0xa0>
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	4a0c      	ldr	r2, [pc, #48]	; (8002e10 <xTaskPriorityDisinherit+0xd0>)
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <xTaskPriorityDisinherit+0xd4>)
 8002dee:	441a      	add	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7fe fc25 	bl	8001646 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002e00:	697b      	ldr	r3, [r7, #20]
	}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200006e8 	.word	0x200006e8
 8002e10:	20000bc4 	.word	0x20000bc4
 8002e14:	200006ec 	.word	0x200006ec

08002e18 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002e22:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0x90>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e28:	4b20      	ldr	r3, [pc, #128]	; (8002eac <prvAddCurrentTaskToDelayedList+0x94>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fc64 	bl	80016fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d10a      	bne.n	8002e52 <prvAddCurrentTaskToDelayedList+0x3a>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <prvAddCurrentTaskToDelayedList+0x94>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3304      	adds	r3, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4819      	ldr	r0, [pc, #100]	; (8002eb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8002e4c:	f7fe fbfb 	bl	8001646 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e50:	e026      	b.n	8002ea0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <prvAddCurrentTaskToDelayedList+0x94>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d209      	bcs.n	8002e7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <prvAddCurrentTaskToDelayedList+0x94>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f7fe fc08 	bl	800168c <vListInsert>
}
 8002e7c:	e010      	b.n	8002ea0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <prvAddCurrentTaskToDelayedList+0x94>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f7fe fbfe 	bl	800168c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <prvAddCurrentTaskToDelayedList+0xa4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d202      	bcs.n	8002ea0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002e9a:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <prvAddCurrentTaskToDelayedList+0xa4>)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000bc0 	.word	0x20000bc0
 8002eac:	200006e8 	.word	0x200006e8
 8002eb0:	20000ba8 	.word	0x20000ba8
 8002eb4:	20000b78 	.word	0x20000b78
 8002eb8:	20000b74 	.word	0x20000b74
 8002ebc:	20000bdc 	.word	0x20000bdc

08002ec0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002eca:	f000 fac3 	bl	8003454 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <xTimerCreateTimerTask+0x80>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d021      	beq.n	8002f1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002ede:	1d3a      	adds	r2, r7, #4
 8002ee0:	f107 0108 	add.w	r1, r7, #8
 8002ee4:	f107 030c 	add.w	r3, r7, #12
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe fb67 	bl	80015bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	9202      	str	r2, [sp, #8]
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	2302      	movs	r3, #2
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2300      	movs	r3, #0
 8002efe:	460a      	mov	r2, r1
 8002f00:	4910      	ldr	r1, [pc, #64]	; (8002f44 <xTimerCreateTimerTask+0x84>)
 8002f02:	4811      	ldr	r0, [pc, #68]	; (8002f48 <xTimerCreateTimerTask+0x88>)
 8002f04:	f7ff f8f8 	bl	80020f8 <xTaskCreateStatic>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <xTimerCreateTimerTask+0x8c>)
 8002f0c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <xTimerCreateTimerTask+0x8c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002f16:	2301      	movs	r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <xTimerCreateTimerTask+0x74>
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	e7fe      	b.n	8002f32 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8002f34:	697b      	ldr	r3, [r7, #20]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000c18 	.word	0x20000c18
 8002f44:	08003cec 	.word	0x08003cec
 8002f48:	08003069 	.word	0x08003069
 8002f4c:	20000c1c 	.word	0x20000c1c

08002f50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <xTimerGenericCommand+0x2c>
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	623b      	str	r3, [r7, #32]
 8002f7a:	e7fe      	b.n	8002f7a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <xTimerGenericCommand+0x94>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d02a      	beq.n	8002fda <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	dc18      	bgt.n	8002fc8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002f96:	f7ff feb5 	bl	8002d04 <xTaskGetSchedulerState>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d109      	bne.n	8002fb4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002fa0:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <xTimerGenericCommand+0x94>)
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	f107 0110 	add.w	r1, r7, #16
 8002fa8:	2300      	movs	r3, #0
 8002faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fac:	f7fe fcce 	bl	800194c <xQueueGenericSend>
 8002fb0:	6278      	str	r0, [r7, #36]	; 0x24
 8002fb2:	e012      	b.n	8002fda <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <xTimerGenericCommand+0x94>)
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	f107 0110 	add.w	r1, r7, #16
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f7fe fcc4 	bl	800194c <xQueueGenericSend>
 8002fc4:	6278      	str	r0, [r7, #36]	; 0x24
 8002fc6:	e008      	b.n	8002fda <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <xTimerGenericCommand+0x94>)
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	f107 0110 	add.w	r1, r7, #16
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	f7fe fdb4 	bl	8001b40 <xQueueGenericSendFromISR>
 8002fd8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3728      	adds	r7, #40	; 0x28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000c18 	.word	0x20000c18

08002fe8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <prvProcessExpiredTimer+0x7c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3304      	adds	r3, #4
 8003000:	4618      	mov	r0, r3
 8003002:	f7fe fb7b 	bl	80016fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d121      	bne.n	8003052 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	18d1      	adds	r1, r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	6978      	ldr	r0, [r7, #20]
 800301c:	f000 f8c8 	bl	80031b0 <prvInsertTimerInActiveList>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d015      	beq.n	8003052 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003026:	2300      	movs	r3, #0
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	2300      	movs	r3, #0
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	2100      	movs	r1, #0
 8003030:	6978      	ldr	r0, [r7, #20]
 8003032:	f7ff ff8d 	bl	8002f50 <xTimerGenericCommand>
 8003036:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <prvProcessExpiredTimer+0x6a>
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e7fe      	b.n	8003050 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	6978      	ldr	r0, [r7, #20]
 8003058:	4798      	blx	r3
}
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000c10 	.word	0x20000c10

08003068 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	4618      	mov	r0, r3
 8003076:	f000 f857 	bl	8003128 <prvGetNextExpireTime>
 800307a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4619      	mov	r1, r3
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f803 	bl	800308c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003086:	f000 f8d5 	bl	8003234 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800308a:	e7f1      	b.n	8003070 <prvTimerTask+0x8>

0800308c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003096:	f7ff fa5b 	bl	8002550 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800309a:	f107 0308 	add.w	r3, r7, #8
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f866 	bl	8003170 <prvSampleTimeNow>
 80030a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d130      	bne.n	800310e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <prvProcessTimerOrBlockTask+0x3c>
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d806      	bhi.n	80030c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80030ba:	f7ff fa57 	bl	800256c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff91 	bl	8002fe8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80030c6:	e024      	b.n	8003112 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <prvProcessTimerOrBlockTask+0x90>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <prvProcessTimerOrBlockTask+0x94>)
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fe ffcf 	bl	8002090 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80030f2:	f7ff fa3b 	bl	800256c <xTaskResumeAll>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <prvProcessTimerOrBlockTask+0x98>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	f3bf 8f6f 	isb	sy
}
 800310c:	e001      	b.n	8003112 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800310e:	f7ff fa2d 	bl	800256c <xTaskResumeAll>
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000c14 	.word	0x20000c14
 8003120:	20000c18 	.word	0x20000c18
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003130:	4b0e      	ldr	r3, [pc, #56]	; (800316c <prvGetNextExpireTime+0x44>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <prvGetNextExpireTime+0x44>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	e001      	b.n	800315e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800315e:	68fb      	ldr	r3, [r7, #12]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000c10 	.word	0x20000c10

08003170 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003178:	f7ff fa94 	bl	80026a4 <xTaskGetTickCount>
 800317c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800317e:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <prvSampleTimeNow+0x3c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d205      	bcs.n	8003194 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003188:	f000 f904 	bl	8003394 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	e002      	b.n	800319a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800319a:	4a04      	ldr	r2, [pc, #16]	; (80031ac <prvSampleTimeNow+0x3c>)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000c20 	.word	0x20000c20

080031b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d812      	bhi.n	80031fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	1ad2      	subs	r2, r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d302      	bcc.n	80031ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80031e4:	2301      	movs	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e01b      	b.n	8003222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80031ea:	4b10      	ldr	r3, [pc, #64]	; (800322c <prvInsertTimerInActiveList+0x7c>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3304      	adds	r3, #4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f7fe fa49 	bl	800168c <vListInsert>
 80031fa:	e012      	b.n	8003222 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d206      	bcs.n	8003212 <prvInsertTimerInActiveList+0x62>
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d302      	bcc.n	8003212 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800320c:	2301      	movs	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	e007      	b.n	8003222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <prvInsertTimerInActiveList+0x80>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3304      	adds	r3, #4
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f7fe fa35 	bl	800168c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003222:	697b      	ldr	r3, [r7, #20]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000c14 	.word	0x20000c14
 8003230:	20000c10 	.word	0x20000c10

08003234 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08e      	sub	sp, #56	; 0x38
 8003238:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800323a:	e099      	b.n	8003370 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	da17      	bge.n	8003272 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	3304      	adds	r3, #4
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <prvProcessReceivedCommands+0x2e>
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	e7fe      	b.n	8003260 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003268:	6850      	ldr	r0, [r2, #4]
 800326a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326c:	6892      	ldr	r2, [r2, #8]
 800326e:	4611      	mov	r1, r2
 8003270:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	db7a      	blt.n	800336e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	3304      	adds	r3, #4
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fa37 	bl	80016fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800328e:	463b      	mov	r3, r7
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff6d 	bl	8003170 <prvSampleTimeNow>
 8003296:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b09      	cmp	r3, #9
 800329c:	d868      	bhi.n	8003370 <prvProcessReceivedCommands+0x13c>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <prvProcessReceivedCommands+0x70>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032cd 	.word	0x080032cd
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	080032cd 	.word	0x080032cd
 80032b0:	08003371 	.word	0x08003371
 80032b4:	08003327 	.word	0x08003327
 80032b8:	0800335d 	.word	0x0800335d
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032cd 	.word	0x080032cd
 80032c4:	08003371 	.word	0x08003371
 80032c8:	08003327 	.word	0x08003327
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	18d1      	adds	r1, r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032da:	f7ff ff69 	bl	80031b0 <prvInsertTimerInActiveList>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d045      	beq.n	8003370 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d13d      	bne.n	8003370 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	441a      	add	r2, r3
 80032fc:	2300      	movs	r3, #0
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	2300      	movs	r3, #0
 8003302:	2100      	movs	r1, #0
 8003304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003306:	f7ff fe23 	bl	8002f50 <xTimerGenericCommand>
 800330a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d12e      	bne.n	8003370 <prvProcessReceivedCommands+0x13c>
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	e7fe      	b.n	8003324 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800332c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <prvProcessReceivedCommands+0x114>
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e7fe      	b.n	8003346 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	18d1      	adds	r1, r2, r3
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003356:	f7ff ff2b 	bl	80031b0 <prvInsertTimerInActiveList>
					break;
 800335a:	e009      	b.n	8003370 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8003366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003368:	f000 fb56 	bl	8003a18 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800336c:	e000      	b.n	8003370 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800336e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <prvProcessReceivedCommands+0x15c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	1d39      	adds	r1, r7, #4
 8003376:	2200      	movs	r2, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe fc75 	bl	8001c68 <xQueueReceive>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	f47f af5b 	bne.w	800323c <prvProcessReceivedCommands+0x8>
	}
}
 8003386:	bf00      	nop
 8003388:	3730      	adds	r7, #48	; 0x30
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000c18 	.word	0x20000c18

08003394 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800339a:	e044      	b.n	8003426 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800339c:	4b2b      	ldr	r3, [pc, #172]	; (800344c <prvSwitchTimerLists+0xb8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <prvSwitchTimerLists+0xb8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe f9a1 	bl	80016fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d12d      	bne.n	8003426 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d90e      	bls.n	80033fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033e8:	4b18      	ldr	r3, [pc, #96]	; (800344c <prvSwitchTimerLists+0xb8>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f7fe f94a 	bl	800168c <vListInsert>
 80033f8:	e015      	b.n	8003426 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80033fa:	2300      	movs	r3, #0
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2300      	movs	r3, #0
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	2100      	movs	r1, #0
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff fda3 	bl	8002f50 <xTimerGenericCommand>
 800340a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <prvSwitchTimerLists+0x92>
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	e7fe      	b.n	8003424 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <prvSwitchTimerLists+0xb8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1b5      	bne.n	800339c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <prvSwitchTimerLists+0xb8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <prvSwitchTimerLists+0xbc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a04      	ldr	r2, [pc, #16]	; (800344c <prvSwitchTimerLists+0xb8>)
 800343c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800343e:	4a04      	ldr	r2, [pc, #16]	; (8003450 <prvSwitchTimerLists+0xbc>)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	6013      	str	r3, [r2, #0]
}
 8003444:	bf00      	nop
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000c10 	.word	0x20000c10
 8003450:	20000c14 	.word	0x20000c14

08003454 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800345a:	f000 f925 	bl	80036a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <prvCheckForValidListAndQueue+0x60>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d120      	bne.n	80034a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003466:	4814      	ldr	r0, [pc, #80]	; (80034b8 <prvCheckForValidListAndQueue+0x64>)
 8003468:	f7fe f8c2 	bl	80015f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800346c:	4813      	ldr	r0, [pc, #76]	; (80034bc <prvCheckForValidListAndQueue+0x68>)
 800346e:	f7fe f8bf 	bl	80015f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <prvCheckForValidListAndQueue+0x6c>)
 8003474:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <prvCheckForValidListAndQueue+0x64>)
 8003476:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <prvCheckForValidListAndQueue+0x70>)
 800347a:	4a10      	ldr	r2, [pc, #64]	; (80034bc <prvCheckForValidListAndQueue+0x68>)
 800347c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800347e:	2300      	movs	r3, #0
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <prvCheckForValidListAndQueue+0x74>)
 8003484:	4a11      	ldr	r2, [pc, #68]	; (80034cc <prvCheckForValidListAndQueue+0x78>)
 8003486:	2110      	movs	r1, #16
 8003488:	200a      	movs	r0, #10
 800348a:	f7fe f9c9 	bl	8001820 <xQueueGenericCreateStatic>
 800348e:	4602      	mov	r2, r0
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <prvCheckForValidListAndQueue+0x60>)
 8003492:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <prvCheckForValidListAndQueue+0x60>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <prvCheckForValidListAndQueue+0x60>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	490b      	ldr	r1, [pc, #44]	; (80034d0 <prvCheckForValidListAndQueue+0x7c>)
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fdcc 	bl	8002040 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034a8:	f000 f92c 	bl	8003704 <vPortExitCritical>
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000c18 	.word	0x20000c18
 80034b8:	20000be8 	.word	0x20000be8
 80034bc:	20000bfc 	.word	0x20000bfc
 80034c0:	20000c10 	.word	0x20000c10
 80034c4:	20000c14 	.word	0x20000c14
 80034c8:	20000cc4 	.word	0x20000cc4
 80034cc:	20000c24 	.word	0x20000c24
 80034d0:	08003cf4 	.word	0x08003cf4

080034d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3b04      	subs	r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3b04      	subs	r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f023 0201 	bic.w	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3b04      	subs	r3, #4
 8003502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003504:	4a08      	ldr	r2, [pc, #32]	; (8003528 <pxPortInitialiseStack+0x54>)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3b14      	subs	r3, #20
 800350e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3b20      	subs	r3, #32
 800351a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800351c:	68fb      	ldr	r3, [r7, #12]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	0800352d 	.word	0x0800352d

0800352c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <prvTaskExitError+0x4c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d009      	beq.n	8003554 <prvTaskExitError+0x28>
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e7fe      	b.n	8003552 <prvTaskExitError+0x26>
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003566:	bf00      	nop
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0fc      	beq.n	8003568 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	2000000c 	.word	0x2000000c
 800357c:	00000000 	.word	0x00000000

08003580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <pxCurrentTCBConst2>)
 8003582:	6819      	ldr	r1, [r3, #0]
 8003584:	6808      	ldr	r0, [r1, #0]
 8003586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800358a:	f380 8809 	msr	PSP, r0
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f04f 0000 	mov.w	r0, #0
 8003596:	f380 8811 	msr	BASEPRI, r0
 800359a:	f04e 0e0d 	orr.w	lr, lr, #13
 800359e:	4770      	bx	lr

080035a0 <pxCurrentTCBConst2>:
 80035a0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop

080035a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80035a8:	4806      	ldr	r0, [pc, #24]	; (80035c4 <prvPortStartFirstTask+0x1c>)
 80035aa:	6800      	ldr	r0, [r0, #0]
 80035ac:	6800      	ldr	r0, [r0, #0]
 80035ae:	f380 8808 	msr	MSP, r0
 80035b2:	b662      	cpsie	i
 80035b4:	b661      	cpsie	f
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	df00      	svc	0
 80035c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80035c2:	bf00      	nop
 80035c4:	e000ed08 	.word	0xe000ed08

080035c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035ce:	4b31      	ldr	r3, [pc, #196]	; (8003694 <xPortStartScheduler+0xcc>)
 80035d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	22ff      	movs	r2, #255	; 0xff
 80035de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <xPortStartScheduler+0xd0>)
 80035f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035f6:	4b29      	ldr	r3, [pc, #164]	; (800369c <xPortStartScheduler+0xd4>)
 80035f8:	2207      	movs	r2, #7
 80035fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035fc:	e009      	b.n	8003612 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80035fe:	4b27      	ldr	r3, [pc, #156]	; (800369c <xPortStartScheduler+0xd4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3b01      	subs	r3, #1
 8003604:	4a25      	ldr	r2, [pc, #148]	; (800369c <xPortStartScheduler+0xd4>)
 8003606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d0ef      	beq.n	80035fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800361e:	4b1f      	ldr	r3, [pc, #124]	; (800369c <xPortStartScheduler+0xd4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f1c3 0307 	rsb	r3, r3, #7
 8003626:	2b04      	cmp	r3, #4
 8003628:	d009      	beq.n	800363e <xPortStartScheduler+0x76>
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	e7fe      	b.n	800363c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800363e:	4b17      	ldr	r3, [pc, #92]	; (800369c <xPortStartScheduler+0xd4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	4a15      	ldr	r2, [pc, #84]	; (800369c <xPortStartScheduler+0xd4>)
 8003646:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003648:	4b14      	ldr	r3, [pc, #80]	; (800369c <xPortStartScheduler+0xd4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003650:	4a12      	ldr	r2, [pc, #72]	; (800369c <xPortStartScheduler+0xd4>)
 8003652:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <xPortStartScheduler+0xd8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0f      	ldr	r2, [pc, #60]	; (80036a0 <xPortStartScheduler+0xd8>)
 8003662:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003666:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <xPortStartScheduler+0xd8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0c      	ldr	r2, [pc, #48]	; (80036a0 <xPortStartScheduler+0xd8>)
 800366e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003672:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003674:	f000 f8b0 	bl	80037d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <xPortStartScheduler+0xdc>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800367e:	f7ff ff93 	bl	80035a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003682:	f7ff f8db 	bl	800283c <vTaskSwitchContext>
	prvTaskExitError();
 8003686:	f7ff ff51 	bl	800352c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	e000e400 	.word	0xe000e400
 8003698:	20000d14 	.word	0x20000d14
 800369c:	20000d18 	.word	0x20000d18
 80036a0:	e000ed20 	.word	0xe000ed20
 80036a4:	2000000c 	.word	0x2000000c

080036a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <vPortEnterCritical+0x54>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3301      	adds	r3, #1
 80036c6:	4a0d      	ldr	r2, [pc, #52]	; (80036fc <vPortEnterCritical+0x54>)
 80036c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <vPortEnterCritical+0x54>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d10e      	bne.n	80036f0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <vPortEnterCritical+0x58>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d009      	beq.n	80036f0 <vPortEnterCritical+0x48>
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	e7fe      	b.n	80036ee <vPortEnterCritical+0x46>
	}
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	2000000c 	.word	0x2000000c
 8003700:	e000ed04 	.word	0xe000ed04

08003704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <vPortExitCritical+0x48>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <vPortExitCritical+0x22>
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	e7fe      	b.n	8003724 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <vPortExitCritical+0x48>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3b01      	subs	r3, #1
 800372c:	4a07      	ldr	r2, [pc, #28]	; (800374c <vPortExitCritical+0x48>)
 800372e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <vPortExitCritical+0x48>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <vPortExitCritical+0x3e>
 8003738:	2300      	movs	r3, #0
 800373a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	2000000c 	.word	0x2000000c

08003750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003750:	f3ef 8009 	mrs	r0, PSP
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <pxCurrentTCBConst>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003760:	6010      	str	r0, [r2, #0]
 8003762:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003766:	f04f 0050 	mov.w	r0, #80	; 0x50
 800376a:	f380 8811 	msr	BASEPRI, r0
 800376e:	f7ff f865 	bl	800283c <vTaskSwitchContext>
 8003772:	f04f 0000 	mov.w	r0, #0
 8003776:	f380 8811 	msr	BASEPRI, r0
 800377a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	6808      	ldr	r0, [r1, #0]
 8003782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003786:	f380 8809 	msr	PSP, r0
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	4770      	bx	lr

08003790 <pxCurrentTCBConst>:
 8003790:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop

08003798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037b0:	f7fe ff86 	bl	80026c0 <xTaskIncrementTick>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <SysTick_Handler+0x3c>)
 80037bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	2300      	movs	r3, #0
 80037c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	e000ed04 	.word	0xe000ed04

080037d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <vPortSetupTimerInterrupt+0x30>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <vPortSetupTimerInterrupt+0x34>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037e8:	4b09      	ldr	r3, [pc, #36]	; (8003810 <vPortSetupTimerInterrupt+0x38>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a09      	ldr	r2, [pc, #36]	; (8003814 <vPortSetupTimerInterrupt+0x3c>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	099b      	lsrs	r3, r3, #6
 80037f4:	4a08      	ldr	r2, [pc, #32]	; (8003818 <vPortSetupTimerInterrupt+0x40>)
 80037f6:	3b01      	subs	r3, #1
 80037f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037fa:	4b03      	ldr	r3, [pc, #12]	; (8003808 <vPortSetupTimerInterrupt+0x30>)
 80037fc:	2207      	movs	r2, #7
 80037fe:	601a      	str	r2, [r3, #0]
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	e000e010 	.word	0xe000e010
 800380c:	e000e018 	.word	0xe000e018
 8003810:	20000000 	.word	0x20000000
 8003814:	10624dd3 	.word	0x10624dd3
 8003818:	e000e014 	.word	0xe000e014

0800381c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003822:	f3ef 8305 	mrs	r3, IPSR
 8003826:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b0f      	cmp	r3, #15
 800382c:	d913      	bls.n	8003856 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800382e:	4a15      	ldr	r2, [pc, #84]	; (8003884 <vPortValidateInterruptPriority+0x68>)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003838:	4b13      	ldr	r3, [pc, #76]	; (8003888 <vPortValidateInterruptPriority+0x6c>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	7afa      	ldrb	r2, [r7, #11]
 800383e:	429a      	cmp	r2, r3
 8003840:	d209      	bcs.n	8003856 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	607b      	str	r3, [r7, #4]
 8003854:	e7fe      	b.n	8003854 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <vPortValidateInterruptPriority+0x70>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <vPortValidateInterruptPriority+0x74>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d909      	bls.n	800387a <vPortValidateInterruptPriority+0x5e>
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	e7fe      	b.n	8003878 <vPortValidateInterruptPriority+0x5c>
	}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	e000e3f0 	.word	0xe000e3f0
 8003888:	20000d14 	.word	0x20000d14
 800388c:	e000ed0c 	.word	0xe000ed0c
 8003890:	20000d18 	.word	0x20000d18

08003894 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038a0:	f7fe fe56 	bl	8002550 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038a4:	4b57      	ldr	r3, [pc, #348]	; (8003a04 <pvPortMalloc+0x170>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038ac:	f000 f90c 	bl	8003ac8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038b0:	4b55      	ldr	r3, [pc, #340]	; (8003a08 <pvPortMalloc+0x174>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f040 808c 	bne.w	80039d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01c      	beq.n	80038fe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80038c4:	2208      	movs	r2, #8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d013      	beq.n	80038fe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f023 0307 	bic.w	r3, r3, #7
 80038dc:	3308      	adds	r3, #8
 80038de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <pvPortMalloc+0x6a>
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e7fe      	b.n	80038fc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d068      	beq.n	80039d6 <pvPortMalloc+0x142>
 8003904:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <pvPortMalloc+0x178>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	429a      	cmp	r2, r3
 800390c:	d863      	bhi.n	80039d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800390e:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <pvPortMalloc+0x17c>)
 8003910:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003912:	4b3f      	ldr	r3, [pc, #252]	; (8003a10 <pvPortMalloc+0x17c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003918:	e004      	b.n	8003924 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d903      	bls.n	8003936 <pvPortMalloc+0xa2>
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f1      	bne.n	800391a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003936:	4b33      	ldr	r3, [pc, #204]	; (8003a04 <pvPortMalloc+0x170>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	429a      	cmp	r2, r3
 800393e:	d04a      	beq.n	80039d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	4413      	add	r3, r2
 8003948:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	1ad2      	subs	r2, r2, r3
 800395a:	2308      	movs	r3, #8
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	429a      	cmp	r2, r3
 8003960:	d91e      	bls.n	80039a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	2b00      	cmp	r3, #0
 8003972:	d009      	beq.n	8003988 <pvPortMalloc+0xf4>
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	e7fe      	b.n	8003986 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	1ad2      	subs	r2, r2, r3
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800399a:	69b8      	ldr	r0, [r7, #24]
 800399c:	f000 f8f6 	bl	8003b8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039a0:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <pvPortMalloc+0x178>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <pvPortMalloc+0x178>)
 80039ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039ae:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <pvPortMalloc+0x178>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <pvPortMalloc+0x180>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d203      	bcs.n	80039c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039ba:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <pvPortMalloc+0x178>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <pvPortMalloc+0x180>)
 80039c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <pvPortMalloc+0x174>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039d6:	f7fe fdc9 	bl	800256c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <pvPortMalloc+0x164>
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e7fe      	b.n	80039f6 <pvPortMalloc+0x162>
	return pvReturn;
 80039f8:	69fb      	ldr	r3, [r7, #28]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3728      	adds	r7, #40	; 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20001924 	.word	0x20001924
 8003a08:	20001930 	.word	0x20001930
 8003a0c:	20001928 	.word	0x20001928
 8003a10:	2000191c 	.word	0x2000191c
 8003a14:	2000192c 	.word	0x2000192c

08003a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d046      	beq.n	8003ab8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	425b      	negs	r3, r3
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4413      	add	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <vPortFree+0xa8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <vPortFree+0x42>
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	e7fe      	b.n	8003a58 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <vPortFree+0x5e>
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	e7fe      	b.n	8003a74 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <vPortFree+0xa8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d019      	beq.n	8003ab8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d115      	bne.n	8003ab8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <vPortFree+0xa8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	401a      	ands	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a9c:	f7fe fd58 	bl	8002550 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <vPortFree+0xac>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <vPortFree+0xac>)
 8003aac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003aae:	6938      	ldr	r0, [r7, #16]
 8003ab0:	f000 f86c 	bl	8003b8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003ab4:	f7fe fd5a 	bl	800256c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ab8:	bf00      	nop
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20001930 	.word	0x20001930
 8003ac4:	20001928 	.word	0x20001928

08003ac8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ace:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ad2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <prvHeapInit+0xac>)
 8003ad6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00c      	beq.n	8003afc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3307      	adds	r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0307 	bic.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <prvHeapInit+0xac>)
 8003af8:	4413      	add	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b00:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <prvHeapInit+0xb0>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b06:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <prvHeapInit+0xb0>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	4413      	add	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b14:	2208      	movs	r2, #8
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0307 	bic.w	r3, r3, #7
 8003b22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <prvHeapInit+0xb4>)
 8003b28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b2a:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <prvHeapInit+0xb4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <prvHeapInit+0xb4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	1ad2      	subs	r2, r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <prvHeapInit+0xb4>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <prvHeapInit+0xb8>)
 8003b56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <prvHeapInit+0xbc>)
 8003b5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <prvHeapInit+0xc0>)
 8003b62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b66:	601a      	str	r2, [r3, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000d1c 	.word	0x20000d1c
 8003b78:	2000191c 	.word	0x2000191c
 8003b7c:	20001924 	.word	0x20001924
 8003b80:	2000192c 	.word	0x2000192c
 8003b84:	20001928 	.word	0x20001928
 8003b88:	20001930 	.word	0x20001930

08003b8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b94:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <prvInsertBlockIntoFreeList+0xa8>)
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e002      	b.n	8003ba0 <prvInsertBlockIntoFreeList+0x14>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d8f7      	bhi.n	8003b9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d108      	bne.n	8003bce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	441a      	add	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d118      	bne.n	8003c14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <prvInsertBlockIntoFreeList+0xac>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d00d      	beq.n	8003c0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e008      	b.n	8003c1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <prvInsertBlockIntoFreeList+0xac>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e003      	b.n	8003c1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d002      	beq.n	8003c2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	2000191c 	.word	0x2000191c
 8003c38:	20001924 	.word	0x20001924

08003c3c <__libc_init_array>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	2500      	movs	r5, #0
 8003c40:	4e0c      	ldr	r6, [pc, #48]	; (8003c74 <__libc_init_array+0x38>)
 8003c42:	4c0d      	ldr	r4, [pc, #52]	; (8003c78 <__libc_init_array+0x3c>)
 8003c44:	1ba4      	subs	r4, r4, r6
 8003c46:	10a4      	asrs	r4, r4, #2
 8003c48:	42a5      	cmp	r5, r4
 8003c4a:	d109      	bne.n	8003c60 <__libc_init_array+0x24>
 8003c4c:	f000 f82e 	bl	8003cac <_init>
 8003c50:	2500      	movs	r5, #0
 8003c52:	4e0a      	ldr	r6, [pc, #40]	; (8003c7c <__libc_init_array+0x40>)
 8003c54:	4c0a      	ldr	r4, [pc, #40]	; (8003c80 <__libc_init_array+0x44>)
 8003c56:	1ba4      	subs	r4, r4, r6
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	42a5      	cmp	r5, r4
 8003c5c:	d105      	bne.n	8003c6a <__libc_init_array+0x2e>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c64:	4798      	blx	r3
 8003c66:	3501      	adds	r5, #1
 8003c68:	e7ee      	b.n	8003c48 <__libc_init_array+0xc>
 8003c6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c6e:	4798      	blx	r3
 8003c70:	3501      	adds	r5, #1
 8003c72:	e7f2      	b.n	8003c5a <__libc_init_array+0x1e>
 8003c74:	08003d38 	.word	0x08003d38
 8003c78:	08003d38 	.word	0x08003d38
 8003c7c:	08003d38 	.word	0x08003d38
 8003c80:	08003d3c 	.word	0x08003d3c

08003c84 <memcpy>:
 8003c84:	b510      	push	{r4, lr}
 8003c86:	1e43      	subs	r3, r0, #1
 8003c88:	440a      	add	r2, r1
 8003c8a:	4291      	cmp	r1, r2
 8003c8c:	d100      	bne.n	8003c90 <memcpy+0xc>
 8003c8e:	bd10      	pop	{r4, pc}
 8003c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c98:	e7f7      	b.n	8003c8a <memcpy+0x6>

08003c9a <memset>:
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4402      	add	r2, r0
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d100      	bne.n	8003ca4 <memset+0xa>
 8003ca2:	4770      	bx	lr
 8003ca4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca8:	e7f9      	b.n	8003c9e <memset+0x4>
	...

08003cac <_init>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	bf00      	nop
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr

08003cb8 <_fini>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr
